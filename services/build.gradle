apply from: "$rootDir/gradle/functions.gradle"
apply from: "$rootDir/gradle/tapestry.app.gradle"
apply from: "$rootDir/gradle/cxf-spring.gradle"

sourceSets {
    main {
        groovy {
            srcDirs 'src/main/java'
            srcDirs 'src/main/groovy'
            srcDirs "${buildDir}/generated-resources/main/java"
        }
        java {
            srcDirs = []
        }
    }
}
configurations {
    all*.exclude group: 'org.apache.derby', module: 'derby'
}

ext {
    previousVersion = replicationVersions.get(replicationVersions.size()-2)
}


dependencies {
    implementation project(':common:common-bootique')
    implementation("ish.oncourse.willow:webservices-client:$webservicesVersion") {
        //we should exclude cayenne-server from waCommon because the cayenne-server is not compatable to willow code.
        exclude group: 'org.apache.cayenne', module: 'cayenne-server'
        exclude group: 'org.apache.geronimo.specs', module: 'geronimo-javamail_1.4_spec'
    }
}

task generateNewVersionPortTypes(type: Copy){
    onlyIf { !file("src/main/java/ish/oncourse/webservices/soap/v${replicationVersions.last()}").exists() }
    from "src/main/java/ish/oncourse/webservices/soap/v${previousVersion}"
    into "src/main/java/ish/oncourse/webservices/soap/v${replicationVersions.last()}"
    filter { line -> line.replaceAll("${previousVersion}", "${replicationVersions.last()}") }
}

task generateNewVersionUpdatersAndBuilders(type: Copy) {
    onlyIf { !file("src/main/java/ish/oncourse/webservices/replication/v${replicationVersions.last()}").exists() }
    from "src/main/java/ish/oncourse/webservices/replication/v${previousVersion}"
    into "src/main/java/ish/oncourse/webservices/replication/v${replicationVersions.last()}"
    filter { line -> line.replaceAll("${previousVersion}", "${replicationVersions.last()}") }
    rename { filename -> filename.replace "${previousVersion}", "${replicationVersions.last()}"}
}

task generateNewVersionTests(type: Copy) {
    onlyIf { !file("src/test/java/ish/oncourse/webservices/soap/v${replicationVersions.last()}").exists() }
    from "src/test/java/ish/oncourse/webservices/soap/v${previousVersion}"
    into "src/test/java/ish/oncourse/webservices/soap/v${replicationVersions.last()}"
    filter { line -> line.replaceAll("v${previousVersion}", "v${replicationVersions.last()}")
            .replaceAll("V${previousVersion}", "V${replicationVersions.last()}")}
}

task deleteOldReplicationTests(type: Delete){
    dependsOn generateNewVersionTests
    onlyIf { file("src/test/java/ish/oncourse/webservices/soap/v${replicationVersions.last()}").exists() }
    delete "src/test/java/ish/oncourse/webservices/soap/v${previousVersion}"
}

task replaceOldVersionInTests(type: Copy){
    onlyIf { !file("src/test/java/ish/oncourse/webservices/soap/v${replicationVersions.last()}").exists() }
    dependsOn deleteOldReplicationTests
    ant.replaceregexp(match:"v${previousVersion}", replace:"v${replicationVersions.last()}", flags:'g') {
        fileset(dir: 'src/test/java/ish/oncourse/webservices')
    }
    ant.replaceregexp(match:"V${previousVersion}", replace:"V${replicationVersions.last()}", flags:'g') {
        fileset(dir: 'src/test/java/ish/oncourse/webservices')
    }
    rename { filename -> filename.replace "${previousVersion}", "${replicationVersions.last()}"}
}

task generateAppContext(type: Copy) {
    onlyIf { !file("src/main/resources/application-context.xml").text.contains("${replicationVersions.last()}") }
    from "src/templates/config"
    into "src/main/resources/"
    expand(replicationVersions: replicationVersions)
}

task generateSOAPstubs(type: Copy) {
    from 'src/templates/java'
    into "${buildDir}/generated-resources/main/java"
    expand(replicationVersions: replicationVersions, referenceVersions: referenceVersions)
}

compileJava {
    dependsOn generateNewVersionUpdatersAndBuilders
    dependsOn generateAppContext
    dependsOn generateNewVersionPortTypes
    dependsOn generateSOAPstubs
}

test {
    dependsOn replaceOldVersionInTests
    forkEvery = 1 //run every test in separate jvm
    initTestDBConfig(project, test)
}

mainClassName = 'ish.oncourse.webservices.ServicesApp'
