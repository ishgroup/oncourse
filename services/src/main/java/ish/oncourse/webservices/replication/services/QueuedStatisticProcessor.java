package ish.oncourse.webservices.replication.services;

import ish.oncourse.model.Queueable;
import ish.oncourse.model.QueuedStatistic;
import ish.oncourse.services.site.IWebSiteService;
import ish.oncourse.webservices.replication.updaters.IWillowUpdater;
import ish.oncourse.webservices.util.GenericQueuedStatisticStub;
import ish.oncourse.webservices.util.GenericReplicationStub;
import ish.oncourse.webservices.util.GenericTransactionGroup;
import org.apache.cayenne.ObjectContext;
import org.apache.cayenne.query.ObjectSelect;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.List;

public class QueuedStatisticProcessor {

    private static final Logger logger = LogManager.getLogger();

    private IWebSiteService webSiteService;
    private IWillowUpdater willowUpdater;
    private TransactionGroupProcessorImpl transactionGroupProcessor;
    private java.util.Date receivedTimestamp;

    private ObjectContext atomicContext;

    private boolean active = false;

    public QueuedStatisticProcessor(ObjectContext atomicContext,
                                    IWebSiteService webSiteService,
                                    IWillowUpdater willowUpdater,
                                    TransactionGroupProcessorImpl transactionGroupProcessor,
                                    boolean active
    ) {
        this.atomicContext = atomicContext;
        this.webSiteService = webSiteService;
        this.willowUpdater = willowUpdater;
        this.transactionGroupProcessor = transactionGroupProcessor;
        this.active = active;
    }

    public void cleanupStatistic() {
        if (!active)
            return;

        if (receivedTimestamp == null)
            return;

		List<QueuedStatistic> statisticForDelete = ObjectSelect.query(QueuedStatistic.class)
                .where(QueuedStatistic.COLLEGE.eq(webSiteService.getCurrentCollege()))
                .and(QueuedStatistic.RECEIVED_TIMESTAMP.lt(receivedTimestamp))
                .select(atomicContext);

        if (!statisticForDelete.isEmpty()) {
            atomicContext.deleteObjects(statisticForDelete);
            atomicContext.commitChanges();
        }

        /**
         * reset the field to exclude cleanup if no one statistic stub was got.
         */
        receivedTimestamp = null;
    }

	private List<QueuedStatistic> statisticByEntity(final String entityName) {
        return ObjectSelect.query(QueuedStatistic.class)
                .where(QueuedStatistic.COLLEGE.eq(webSiteService.getCurrentCollege()))
                .and(QueuedStatistic.ENTITY_IDENTIFIER.eq(entityName))
                .select(atomicContext);
    }


    public Queueable process(GenericQueuedStatisticStub statisticStub) {
        if (!active)
            return null;

        if (Boolean.TRUE.equals(statisticStub.isCleanupStub())) {
            receivedTimestamp = statisticStub.getReceivedTimestamp();
            return null;
        }
        final List<QueuedStatistic> objects = statisticByEntity(statisticStub.getStackedEntityIdentifier());
        switch (objects.size()) {
            case 0:
                return transactionGroupProcessor.createObject((GenericReplicationStub) statisticStub);
            case 1:
                QueuedStatistic objectToUpdate = objects.get(0);
                willowUpdater.updateEntityFromStub((GenericReplicationStub) statisticStub, objectToUpdate, transactionGroupProcessor.createRelationShipCallback());
                return objectToUpdate;
            default:
                //we should not throw and exception because even if this occurs on next replication data will be correct.
                String message = String.format("%s statistic objects found for entity:%s", objects.size(),
                        statisticStub.getStackedEntityIdentifier());
                logger.warn(message);
                return null;
        }
    }

	/**
	 * Fills angelId and entityIdentifier fields with defaults in stubs generated by angel versions up to 5.0.
	 * This code should be removed once there will be no colleges using angel 5.0 or earlier.
	 */
	public void fillQueuedStatisticStubs(GenericTransactionGroup group) {
		for (GenericReplicationStub stub : group.getGenericAttendanceOrBinaryInfo()) {
			if (stub instanceof GenericQueuedStatisticStub) {
				if (stub.getEntityIdentifier() == null) {
					stub.setEntityIdentifier(GenericQueuedStatisticStub.QUEUED_STATISTIC_ENTITY);
				}
				
				if (stub.getAngelId() == null) {
					stub.setAngelId(-1L);
				}
			}
		}
	}
}
