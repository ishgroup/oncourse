buildscript {
	ext {
		cayenneVersion = '4.0.M3.2'
		log4j2Version = '2.4.1'
        waCommonWebservicesClientVersion = '9.1.6'
		solrVersion = '5.5.3'
	}

	repositories {
		//mavenCentral()

		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}
	dependencies {
		classpath "org.apache.cayenne:cayenne-tools:$cayenneVersion"
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
		classpath 'org.gradle.plugins:gradle-compass:1.0.10'
		classpath 'com.eriwen:gradle-js-plugin:2.12.0'
	}
}

ext {
    replicationVersions = [10,  // introduced in onCourse 7.4
                           11,  // introduced in onCourse 8.2
						   12,   // introduced in onCourse 8.7
						   13,   // introduced in onCourse 8.17
						   14    // introduced in onCourse 9.1
    ]
    referenceVersions = [   4,  // introduced in onCourse 5.1
                            5,  // introduced in onCourse 7.4
                            6   // introduced in onCourse 8.2
    ]
}

allprojects {
	apply plugin: 'com.github.ben-manes.versions' // adds the task 'dependencyUpdates -Drevision=release'
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'jacoco'
    apply plugin: 'compass'
    apply plugin: 'com.eriwen.gradle.js'

    //java compile should read java files in UTF-8
    //because some tests (ish.oncourse.services.textile.TextileUtilTest.test_unicodeQuotesEncoding)
    //use UTF-8 chars
    compileJava {
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

	// get the version from the command line properties
	version = project.hasProperty('releaseVersion') ? project.releaseVersion : "SNAPSHOT"

	sourceCompatibility = 1.7
	targetCompatibility = 1.7

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	configurations.all {
		exclude module: 'slf4j-log4j12'
	}

	repositories {
		//mavenCentral()
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.12'
		testCompile 'dbunit:dbunit:2.4.8'
		testCompile 'org.mockito:mockito-core:1.10.19'

        compile "org.apache.logging.log4j:log4j-api:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-jcl:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-web:$log4j2Version"
        compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
        
        deployerJars 'org.apache.maven.wagon:wagon-http:2.8'
	}

	group = 'ish.oncourse.willow'
	uploadArchives {
		repositories.mavenDeployer {
			name = 'ishRepo'
			configuration = configurations.deployerJars
			repository(id:'internal-releases', url: 'http://repo.ish.com.au/content/repositories/ish-releases') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			snapshotRepository(id:'internal-snapshots', url: 'http://repo.ish.com.au/content/repositories/ish-snapshots') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
		}
	}
	uploadArchives.dependsOn install

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date(),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local'
//			'SCM-Revision': project.release.scmVersion
	}

	jar {
		manifest {
			from sharedManifest
		}
	}

	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'
		jvmArgs "-XX:MaxPermSize=256m"
		ignoreFailures = true

		jacoco {
			enabled = project.hasProperty('jacoco-enabled') ? true : false;
		}

		// log each starting test
		beforeTest { descriptor -> logger.lifecycle("Running: " + descriptor)
		}
	}

    //common tasks for combining java script and css
    javascript.source {
        production {
            js {
                srcDir 'src/main/static/js'
                include "**/*.js"
            }
        }
    }

    minifyJs {
        source = javascript.source.production.js.files
        dest = file("${buildDir}/resource-assemble/js/${project.name}-min.js")
    }

    gzipJs {
        source = minifyJs
        dest = file("${buildDir}/resource-assemble/js/${project.name}-min.js.gz")
    }

//css combining
    compass {
        cssDir = file("${buildDir}/resource-assemble/css")
        sassDir = file('src/main/static/src')
        fontsDir = file('src/main/static/fonts')
        noLineComments = true
        relativeAssets = true
        debugInfo = false
        environment = 'production'
    }

    task gzipCss(dependsOn:compileSass) {
        String srcPath = "${buildDir}/resource-assemble/css/${project.name}.css"
        inputs.file srcPath
        outputs.file "${srcPath}.gz"
        doLast {
            ant.gzip(src: srcPath, destfile: "${srcPath}.gz")
        }
    }

	task combineSvg(type: CombineSvg)  {
		projectName = "${project.name}"
		imgDirectoryName = file("src/main/static/img")
		outputDirectoryName = "${buildDir}/resource-assemble"
	}

	task cleanCombineSvg(type: CleanCombineSvg)  {
		imgDirectory = "${buildDir}/resource-assemble/img"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.13"
}