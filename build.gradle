buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
		add(new org.apache.ivy.plugins.resolver.URLResolver()) {
			name = 'GitHub cargo'
			addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
		}
	}
	dependencies {
		classpath 'org.apache.cayenne:cayenne-tools:3.1B1'
		classpath 'org.apache.maven.wagon:wagon-http:2.2'
		classpath 'bmuschko:gradle-cargo-plugin:0.5.6'
		classpath 'org.codehaus.cargo:cargo-core-uberjar:1.2.2'
		classpath 'org.codehaus.cargo:cargo-ant:1.2.2'
		classpath 'au.com.ish.gradle:release:2.1'
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.3'
	}
}

apply plugin: 'release'
release {
	//use subversion scm, unless otherwise specified in with -PscmFlavour= or in users gradle properties
	scm = project.hasProperty('scmFlavour') ? project.scmFlavour:'svn'
	failOnSnapshotDependencies = true

	//properties for svn access
	username = project.hasProperty('username') ? project.username : ''
	password = project.hasProperty('password') ? project.password : ''

	//the following two params have to be converted from string to boolean
	releaseDryRun = project.hasProperty('releaseDryRun') ? project.releaseDryRun=='true' : ''
	allowLocalModifications = project.hasProperty('allowLocalModifications') ? project.allowLocalModifications='true' : ''
}
version = release.projectVersion

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'war'
	apply plugin: 'versions' // adds the task 'dependencyUpdates'

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.11'
		testCompile 'dbunit:dbunit:2.4.8'
		
		compile 'log4j:log4j:1.2.17'
		providedCompile 'javax.servlet:servlet-api:2.5'

		deployerJars 'org.apache.maven.wagon:wagon-http:2.3'
	}

	uploadArchives.dependsOn install
	group = 'ish.oncourse.willow'
	uploadArchives {
		repositories.mavenDeployer {
			name = 'ishRepo'
			configuration = configurations.deployerJars
			repository(id:'internal-releases', url: 'http://repo.ish.com.au/content/repositories/ish-releases') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			snapshotRepository(id:'internal-snapshots', url: 'http://repo.ish.com.au/content/repositories/ish-snapshots') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
		}
	}
	uploadArchives.dependsOn install

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date(),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local'
//			'SCM-Revision': project.release.scmVersion
	}

	jar {
		manifest {
			from sharedManifest
		}
	}

	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'
		jvmArgs "-XX:MaxPermSize=256m"
		ignoreFailures = true  // ignore test failures so that the test aggregate still works
	}

	task aggregateTestReports(type: TestReportAggregator) {
		testReportDir = file("${reporting.baseDir}/tests")
		testResultsDir = file("${buildDir}/test-results")
		projects = subprojects
	}
}

apply plugin: 'sonar'

sonar {
	server {
		url = "http://sonar.ish.com.au"
	}
	database {
		url = "jdbc:mysql://delish.ish.com.au:3306/sonar?useUnicode=true&amp;characterEncoding=utf8"
		driverClassName = "com.mysql.jdbc.Driver"
		username = "sonar"
		password = sonarPassword
	}
	project {
		dynamicAnalysis  = "reuseReports"
		withProjectProperties { props ->
			props["sonar.core.codeCoveragePlugin"] = "jacoco"
			props["sonar.jacoco.reportPath"] = "${buildDir}/jacoco.exec"
		}
	}
}

subprojects { 
    configurations {
        jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
    }

    dependencies {
        jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.6.1.201212231917", classifier: "runtime"
    }
 
    test {
        jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec"
    }
}

class TestReportAggregator extends Copy {
	def projects
	File testResultsDir
	@OutputDirectory
	File testReportDir
	def TestReportAggregator() {
		dependsOn { testTasks }
		from { inputTestResultDirs }
		into { testResultsDir }
	}
	@TaskAction
	def aggregate() {
		def report = new org.gradle.api.internal.tasks.testing.junit.report.DefaultTestReport(testReportDir: testReportDir, testResultsDir: testResultsDir)
		report.generateReport()
	}
	def getTestTasks() {
		projects.collect { it.tasks.withType(Test) }.flatten()
	}
	def getInputTestResultDirs() {
		testTasks*.testResultsDir
	}
}