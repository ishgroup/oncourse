buildscript {
	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
		add(new org.apache.ivy.plugins.resolver.URLResolver()) {
			name = 'GitHub cargo'
			addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
		}
	}
	dependencies {
		classpath 'org.apache.cayenne:cayenne-tools:3.1B1'
		classpath 'org.apache.maven.wagon:wagon-http:2.2'
		classpath 'bmuschko:gradle-cargo-plugin:0.5.6'
		classpath 'org.codehaus.cargo:cargo-core-uberjar:1.2.2'
		classpath 'org.codehaus.cargo:cargo-ant:1.2.2'
		classpath 'au.com.ish.gradle:release:2.1.3'
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.3'
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'war'
	apply plugin: 'versions' // adds the task 'dependencyUpdates'
	apply plugin: 'release'
	
	release {
		//use subversion scm, unless otherwise specified in with -PscmFlavour= or in users gradle properties
		scm = project.hasProperty('scmFlavour') ? project.scmFlavour:'svn'
		failOnSnapshotDependencies = true

		//properties for svn access
		username = project.hasProperty('username') ? project.username : ''
		password = project.hasProperty('password') ? project.password : ''

		//the following two params have to be converted from string to boolean
		releaseDryRun = project.hasProperty('releaseDryRun') ? project.releaseDryRun=='true' : ''
		allowLocalModifications = project.hasProperty('allowLocalModifications') ? project.allowLocalModifications='true' : ''
	}
	version = release.projectVersion

	sourceCompatibility = 1.6
	targetCompatibility = 1.6

	configurations {
		deployerJars {
			description = 'Jars needed for doing deployment to JBoss Nexus repo'
		}
	}

	repositories {
		maven {
			url 'http://repo.ish.com.au/content/groups/public'
		}
		maven {
			url 'http://repo.ish.com.au/content/groups/ish'
		}
	}

	dependencies {
		testCompile 'junit:junit:4.11'
		testCompile 'dbunit:dbunit:2.4.8'
        testCompile 'org.mockito:mockito-core:1.9.5'

        compile 'log4j:log4j:1.2.17'
		providedCompile 'javax.servlet:servlet-api:2.5'

		deployerJars 'org.apache.maven.wagon:wagon-http:2.3'
	}

	uploadArchives.dependsOn install
	group = 'ish.oncourse.willow'
	uploadArchives {
		repositories.mavenDeployer {
			name = 'ishRepo'
			configuration = configurations.deployerJars
			repository(id:'internal-releases', url: 'http://repo.ish.com.au/content/repositories/ish-releases') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
			snapshotRepository(id:'internal-snapshots', url: 'http://repo.ish.com.au/content/repositories/ish-snapshots') {
				authentication(userName: nexusUsername, password: nexusPassword)
			}
		}
	}
	uploadArchives.dependsOn install

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date(),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local'
//			'SCM-Revision': project.release.scmVersion
	}

	jar {
		manifest {
			from sharedManifest
		}
	}

	war {
		archiveName = baseName+'.war'
		manifest {
			from sharedManifest
		}
	}

	test {
		systemProperties 'java.awt.headless': 'true'
		maxHeapSize = '1024m'
		jvmArgs "-XX:MaxPermSize=256m"
		ignoreFailures = true
	}
}

apply plugin: "sonar-runner"
sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://sonar.ish.com.au"
        property "sonar.jdbc.url", "jdbc:mysql://delish.ish.com.au:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.username", 'sonar'
        property "sonar.password", sonarPassword // sonar password comes from users gradle.properties file
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "1.5"
}