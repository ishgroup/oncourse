/*
 * Copyright ish group pty ltd 2021.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License version 3 as published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
 */
buildscript {
	ext {
		log4j2Version = '2.13.3'
		cayenneVersion = '4.1'
		jettyVersion = '9.4.33.v20201020'
        mariadbVersion = '2.7.1'
		derbyVersion = '10.14.2.0'
		googleGuiceVersion = '4.2.2'
		groovyVersion = '2.5.13'
		bouncycastleVersion = '1.67'
		bootiqueVersion = '1.0'
		cfxVersion = '3.3.5'
		jacksonVersion = '2.9.9'
		javaxActivationVersion = '1.2.0'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "org.apache.cayenne.plugins:cayenne-gradle-plugin:$cayenneVersion"
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.36.0' // adds the task 'dependencyUpdates -Drevision=release'
	id 'com.github.node-gradle.node' version '2.2.4' apply false
	id 'com.github.psxpaul.execfork' version '0.1.13' apply false
	id 'com.dorongold.task-tree' version '1.5' // adds the task 'taskTree [some task]'
	id 'application'
}

taskTree{
	noRepeat = true  //do not print a sub-tree in the task-tree more than once
}

apply plugin: 'idea'

subprojects {
	repositories {
		mavenCentral()
		maven {
			//needed for itext
			url 'http://jasperreports.sourceforge.net/maven2'
		}
	}

	apply plugin: 'java-library'
	apply plugin: 'java'
	apply plugin: 'maven-publish'

	sourceCompatibility = 11
	// get the version from the command line properties
	version = project.hasProperty('releaseVersion') && project.releaseVersion ? project.releaseVersion : "99-SNAPSHOT"

	dependencies {
		api "org.apache.logging.log4j:log4j-api:$log4j2Version"
		api "org.apache.logging.log4j:log4j-core:$log4j2Version"
		api "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"
		api "org.apache.logging.log4j:log4j-jcl:$log4j2Version"

		api "org.codehaus.groovy:groovy:$groovyVersion"
		api "org.codehaus.groovy:groovy-datetime:$groovyVersion"
		api "org.codehaus.groovy:groovy-json:$groovyVersion"
		api "org.codehaus.groovy:groovy-jsr223:$groovyVersion"
		api "org.codehaus.groovy:groovy-macro:$groovyVersion"
		api "org.codehaus.groovy:groovy-xml:$groovyVersion"
		api "org.codehaus.groovy:groovy-templates:$groovyVersion"
		api "org.codehaus.groovy:groovy-xml:$groovyVersion"
		api "org.codehaus.groovy:groovy-dateutil:$groovyVersion"

		implementation 'javax.annotation:javax.annotation-api:1.3.2'

		testImplementation 'junit:junit:4.13'
		testImplementation 'org.dbunit:dbunit:2.6.0'

		testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"
		testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
		testImplementation "org.codehaus.groovy:groovy-testng:$groovyVersion"
		testImplementation "org.codehaus.groovy:groovy-sql:$groovyVersion"
	}

	group = 'ish.oncourse.angel'

	publishing {
        repositories {
            maven {
                name = "ish"
                def repo = version.endsWith('SNAPSHOT') ? 'ish-snapshots' : 'ish-releases'
                url = "https://repo.ish.com.au/content/repositories/${repo}"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }

	ext.sharedManifest = manifest {
		attributes 'Release-Version': version,
			'Built-Date': new Date().format("dd-MMM-yyy"),
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Implementation-Version': System.getProperty('build_number') ?: 'local',
			'SCM-Revision': System.getProperty('svn_revision') ?: 'development',
			'Permissions': 'all-permissions',
			'Codebase': '*',
			'Application-Name': 'onCourse',
			'Trusted-Library': 'true'
	}

	ext {
		testFailed = false
	}

	test {
		systemProperties 'java.awt.headless': 'true',
		    'java.locale.providers': 'COMPAT,SPI'
		maxHeapSize = '2G'
		maxParallelForks = 1
		ignoreFailures = true

		// log each starting test
		beforeTest {
			descriptor -> logger.lifecycle("Running: " + descriptor)
		}

		reports {
			junitXml.enabled = true
		}

		afterSuite { desc, result ->
			if (result.resultType == TestResult.ResultType.FAILURE) {
				testFailed = true
			}
		}

		doLast {
			if (testFailed) {
				throw new Exception("tests failed, exit code == 1")
			}
		}
	}
}

task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}

// Skip beta and other non-final releases in the update report
dependencyUpdates.resolutionStrategy {
	componentSelection { rules ->
		rules.all { ComponentSelection selection ->
			boolean rejected = ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'pr', 'preview', 'ea'].any { qualifier ->
				selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
			}
			if (rejected) {
				selection.reject('Release candidate')
			}
		}
	}
}
