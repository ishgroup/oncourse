apply plugin: 'java'
apply plugin: 'application'

ext {
    swaggerSchema = file("${project.projectDir}/src/main/resources/${swaggerName}")
}

configurations {
    doc
}

dependencies {
    testCompile 'org.apache.commons:commons-dbcp2:2.1.1'
    testCompile 'org.apache.commons:commons-pool2:2.4.2'
    testCompile project(':common:test-functions')
}

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

sourceSets {
    main {
        groovy {
            srcDirs += "${project.projectDir}/build/generated-sources/src/main/groovy"
        }
    }
}

test {
    systemProperty "oncourse.jdbc.url", System.getProperty("oncourse.jdbc.url")
    systemProperty "oncourse.jdbc.user", System.getProperty("oncourse.jdbc.user")
    systemProperty "oncourse.jdbc.password", System.getProperty("oncourse.jdbc.password")
}

processResources.doLast {
    file("${buildDir}/resources/VERSION").text = version ?: "SNAPSHOT"
}

// the following block isn't working for me when placed in the top level build.gradle
startScripts {
    unixStartScriptGenerator.template = resources.text.fromFile("${project.rootDir}/buildSrc/src/main/resources/applicationStartScript.sh")

}

distZip {
    applicationDistribution.from( "${buildDir}/resources/VERSION" ) {
        into('.')
    }
}

publishing {
// For deploying to our repo
    publications {
        executables(MavenPublication) {
            artifact(distZip) {
                classifier "executable"
                extension "zip"
            }
        }
        
        releases(MavenPublication) {
            artifact("${buildDir}/doc/doc.zip") {
                classifier "documentation"
                extension "zip"
            }
        }
    }
}

task swagger (type: Swagger) {
    schema = swaggerSchema
    schemaVersion = 1
    javaOutput = file("${project.projectDir}/build/generated-sources")
    jsOutput = file("${rootDir}/editor/build/generated-sources")
}

compileGroovy {
    dependsOn swagger
    groovyOptions.configurationScript = file("config.groovy")
}

clean.doFirst {
    delete("${project.projectDir}/build/generated-sources")
}

task generateDoc (type: SwaggerDoc) {
    schema = swaggerSchema
    docOutput = file("${buildDir}/doc")
}

task buildDoc (type: Zip, dependsOn: generateDoc) {
    from generateDoc.outputs
    archiveName 'doc.zip'
    destinationDir file("${buildDir}/doc")
}
