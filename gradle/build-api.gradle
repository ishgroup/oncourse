apply plugin: 'java'
apply plugin: 'application'

ext {
    swaggerResources = "${rootDir}/common/codegen/common/src/main/resources/htmlDocs"
    docOutput = "${project.projectDir}/build/doc"
}

configurations {
    swagger
}

dependencies {
    testCompile 'org.apache.commons:commons-dbcp2:2.1.1'
    testCompile 'org.apache.commons:commons-pool2:2.4.2'
    testCompile project(':common:test-functions')
    swagger project(':common:codegen:jaxrs')
}

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

test {
    systemProperty "oncourse.jdbc.url", System.getProperty("oncourse.jdbc.url")
    systemProperty "oncourse.jdbc.user", System.getProperty("oncourse.jdbc.user")
    systemProperty "oncourse.jdbc.password", System.getProperty("oncourse.jdbc.password")
}

compileGroovy {
    groovyOptions.configurationScript = file("config.groovy")
}

processResources.doLast {
    file("${buildDir}/resources/VERSION").text = version ?: "SNAPSHOT"
}

// the following block isn't working for me when placed in the top level build.gradle
startScripts {
    unixStartScriptGenerator.template = resources.text.fromFile("${project.rootDir}/buildSrc/src/main/resources/applicationStartScript.sh")

}

distZip {
    applicationDistribution.from( "${buildDir}/resources/VERSION" ) {
        into('.')
    }
}

publishing {
// For deploying to our repo
    publications {
        executables(MavenPublication) {
            artifact(distZip) {
                classifier "executable"
                extension "zip"
            }
        }
        
        releases(MavenPublication) {
            artifact("$docOutput/doc.zip") {
                classifier "documentation"
                extension "zip"
            }
        }
    }
}

task (swagger, type: JavaExec) {
    main = 'ish.oncourse.codegen.cxf.WillowJaxRsGenerator'
    classpath = configurations.swagger
    args  = [ servicesPackage, modelPackage, project.projectDir, "${project.projectDir}/src/main/resources/$swaggerName" ]
}

task (generateDoc, type: JavaExec) {
    classpath = configurations.swagger
    main = 'io.swagger.codegen.SwaggerCodegen'
    args  = [ 'generate',
              '-i', "${project.projectDir}/src/main/resources/$swaggerName",
              '-l', 'html',
              '-t', "$swaggerResources",
              '-o', "${buildDir}/resources"]
}

task (buildDoc, type: Zip, dependsOn: generateDoc) {
    from "${buildDir}/resources"
    include "$swaggerResources/swagger.css"
    include 'index.html'
    archiveName 'doc.zip'
    destinationDir file(docOutput)
}
