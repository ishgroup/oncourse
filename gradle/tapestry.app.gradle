/**
 * Common build file for projects which use boutique-tapestry-java8 stack
 */
apply plugin: 'java'
apply plugin: 'application'

apply from: "$rootDir/gradle/jetty.gradle"

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'

sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDir 'src/test/java'

configurations {
    tapestryTest
    all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-servlet_2.5_spec'
    all*.exclude group: 'org.eclipse.jetty', module: 'jetty-webapp'
    all*.exclude group: 'org.eclipse.jetty', module: 'jetty-plus'
}


dependencies {
    implementation project(':common:common-functions')
    implementation(project(':common:common-services')) {
        exclude group: 'axis', module: 'axis-wsdl4j'
    }

    /**
     * bootique dependencies
     */
    implementation "io.bootique.tapestry:bootique-tapestry:$bootiqueVersion"

    implementation 'aopalliance:aopalliance:1.0'
    implementation 'commons-logging:commons-logging:1.1.1'

    /**
     * poi dependencies
     */
    implementation 'org.apache.poi:poi:3.11-beta3'
    implementation 'org.apache.poi:poi-ooxml:3.11-beta3'

    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: mariadbVersion

    testImplementation 'wsdl4j:wsdl4j:1.6.3'
    testImplementation 'org.jodd:jodd-http:3.9.1'
    testImplementation 'org.apache.derby:derby:10.13.1.1'
    testImplementation project(':common:test-functions')

    tapestryTest("org.apache.tapestry:tapestry-test:$tapestryVersion")
}

//workaround: put org.apache.tapestry:tapestry-test to end of test classpath
sourceSets.test.compileClasspath = sourceSets.test.compileClasspath + configurations.tapestryTest
sourceSets.test.runtimeClasspath = sourceSets.test.runtimeClasspath + configurations.tapestryTest

startScripts {
    unixStartScriptGenerator.template = resources.text.fromFile("${project.rootDir}/buildSrc/src/main/resources/applicationStartScript.sh")
}

processResources.doLast {
    file("${buildDir}/resources/VERSION").text = (version && version != "99-SNAPSHOT") ? version : "99-SNAPSHOT${System.getProperty('build_number')}"
}

distZip {
    applicationDistribution.from("${buildDir}/resources/VERSION") {
        into('.')
    }
    archiveName "${baseName}.zip"
}

publishing {
// For deploying to our repo
    publications {
        executables(MavenPublication) {
            artifact(distZip) {
                classifier "executable"
                extension "zip"
            }
        }
    }
}
