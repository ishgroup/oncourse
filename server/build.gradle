/*
 * Copyright ish group pty ltd 2020.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License version 3 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 */

import au.com.ish.Aql
import com.github.psxpaul.task.JavaExecFork

apply plugin: 'groovy'
apply plugin: 'apidoc'
apply plugin: 'org.apache.cayenne'
apply plugin: 'application'

apply plugin: 'com.github.psxpaul.execfork'

configurations {
	// exclude these here since they are pulled in in various ways
	all*.exclude group: "org.slf4j", module: "slf4j-simple"
	all*.exclude module: "hessian"
}

// compile everything with the groovy plugin which can handle mixed groovy and Java files
sourceSets {
	main {
		groovy {
			srcDirs += 'src/main/java'
			srcDirs += 'src/main/groovy'
			srcDirs += "$buildDir/antlr/java"
			srcDirs += "${buildDir}/generated-resources/main/java"
		}
		java {
			srcDirs = []
		}
	}
	test {
		groovy {
			srcDirs += 'src/main/java'
			srcDirs += 'src/main/groovy'
		}

	}
}

dependencies {
	api project(":types")
	api project(':server-api')

	implementation "io.bootique.jetty:bootique-jetty:$bootiqueVersion"
	implementation "io.bootique.cayenne:bootique-cayenne:$bootiqueVersion"
	implementation "io.bootique.jdbc:bootique-jdbc-tomcat:$bootiqueVersion"

	api ("org.apache.cxf:cxf-rt-frontend-jaxws:$cfxVersion") {
		exclude group: 'org.apache.geronimo.specs', module: 'geronimo-javamail_1.4_spec'
	}
	api 'javax.xml.bind:jaxb-api:2.3.0'
	api 'javax.xml.ws:jaxws-api:2.3.0'

	api "org.apache.cayenne:cayenne-lifecycle:$cayenneVersion"
	api "org.apache.cayenne:cayenne-commitlog:$cayenneVersion"

	implementation 'javax.jws:javax.jws-api:1.1'
	implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"

	implementation "org.eclipse.jetty:jetty-servlets:$jettyVersion"
	implementation "org.eclipse.jetty.http2:http2-server:$jettyVersion"
	implementation "org.eclipse.jetty.websocket:websocket-servlet:$jettyVersion"
	implementation "org.eclipse.jetty.websocket:websocket-server:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-alpn-java-server:$jettyVersion"
	implementation "org.eclipse.jetty:jetty-jmx:$jettyVersion"

	implementation "org.eclipse.jetty.alpn:alpn-api:1.1.3.v20160715"

	implementation ("org.apache.maven:maven-artifact:3.3.9")
	api ("org.liquibase:liquibase-core:4.1.0") {
		exclude group: "ch.qos.logback"
	}
	implementation "org.mariadb.jdbc:mariadb-java-client:$mariadbVersion"

	implementation 'commons-lang:commons-lang:2.6' // this exists only to support some old reports. To be removed when all reports upgraded.
	implementation ('net.sf.jasperreports:jasperreports:6.1.1') {
		exclude group:'org.apache.poi', module: 'poi-ooxml'
		exclude group:'org.codehaus.castor'
		exclude group:'com.fasterxml.jackson.core'
		exclude group:'org.apache.lucene'
		exclude group:'org.olap4j'
		exclude group:'bouncycastle'
	}

	implementation "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
	implementation "org.bouncycastle:bcmail-jdk15on:$bouncycastleVersion"

	api 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
	implementation 'oauth.signpost:signpost-commonshttp4:1.2.1.2'

	implementation 'com.nulab-inc:zxcvbn:1.2.5'
	implementation 'com.warrenstrange:googleauth:0.4.5'
	implementation 'net.glxn.qrgen:javase:2.0'

	implementation 'net.java.dev.jets3t:jets3t:0.9.4'
	api 'org.quartz-scheduler:quartz:2.2.2'
	implementation 'org.apache.pdfbox:pdfbox:2.0.17'
	implementation 'org.scribe:scribe:1.3.7'
	implementation 'commons-io:commons-io:2.6'
	implementation 'org.apache.commons:commons-lang3:3.7'
	implementation 'org.apache.commons:commons-collections4:4.1'
	implementation 'org.reflections:reflections:0.9.12'
	api "com.google.inject:guice:$googleGuiceVersion"

	implementation 'net.sf.supercsv:super-csv:2.4.0'
	implementation 'net.sf.supercsv:super-csv-java8:2.4.0'

	// Needed for log4j to json or gelf formats
	implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"

	implementation 'org.yaml:snakeyaml:1.27'
	implementation "org.antlr:antlr4-runtime:4.7.1"

	// WSDL SOAP helpers for our integrations
	implementation ('com.github.groovy-wslite:groovy-wslite:1.1.3') {
		exclude group:"org.codehaus.groovy", module:"groovy-all"
	}

	implementation 'com.google.api-client:google-api-client:1.23.0'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
	implementation 'com.google.apis:google-api-services-classroom:v1-rev135-1.23.0'

	api 'com.nimbusds:nimbus-jose-jwt:8.9'
	implementation 'com.bugsnag:bugsnag:3.6.1'

	testImplementation "org.apache.cayenne:cayenne-dbsync:$cayenneVersion"
	testImplementation 'org.mockito:mockito-core:2.18.3'
	testImplementation "org.apache.derby:derbytools:$derbyVersion"
	testImplementation 'commons-dbcp:commons-dbcp:1.4'
	testImplementation 'xmlunit:xmlunit:1.6' //used for xml export validation tests
	testImplementation 'org.kohsuke:wordnet-random-name:1.3'
	testImplementation "io.bootique:bootique-test:$bootiqueVersion"
	testImplementation "org.testng:testng:6.13.1"
	testImplementation "org.apache.derby:derbyclient:$derbyVersion"
	testImplementation "org.apache.derby:derbynet:$derbyVersion"

}
configurations.all {
	resolutionStrategy {
		// this is the last MPL version of iText, so we can't go past this
		forcedModules = ['com.lowagie:itext:2.1.7.js2']
	}
}

sourceCompatibility = JavaVersion.VERSION_11

project.ext {
	appName = "onCourseServer"
}

application {
	mainClassName = 'ish.oncourse.server.AngelServer'
	applicationDefaultJvmArgs = ['-Xmx1024m', '-XX:+HeapDumpOnOutOfMemoryError']
}

compileGroovy.groovyOptions.configurationScript = file("${rootDir}/gradle/groovyConfig.groovy")

jar {
	manifest {
		from sharedManifest
		attributes 'Main-Class': 'ish.oncourse.server.AngelServer'
		attributes 'Class-Path': configurations.runtimeClasspath.collect { "lib/" + it.name }.join(' ')
	}
	archiveFileName = 'onCourseServer.jar'
}

task expandConfig(type: Copy) {
	def dbUrl = project.hasProperty('dbUrl') ?
			project.getProperty('dbUrl') :
			'jdbc:mariadb://127.0.0.1:3306/angelTest_trunk'

	from("$rootDir/server/src/main/resources/") {
		include 'application-test-local-mariadb.yml'
	}
	into "$rootDir/server/build/resources/main"
	expand(dbUrl: dbUrl)
}

test {
	testLogging {
		exceptionFormat = 'full'
	}

	doFirst {
		println 'user.country:' + System.getProperty('user.country')
		println 'user.language:' + System.getProperty('user.language')
		println 'Locale.getDefault():' + Locale.getDefault()
	}
	
	// the database tests interfere with each other if run in parallel
	maxParallelForks = 1
	dependsOn "expandConfig"
	boolean local = project.hasProperty('local') ? project.getProperty('local') : true
	systemProperty 'yamlTestConfig', local ? 'application-test-local-mariadb.yml' : 'application-test-mariadb.yml'
}

task startDaemon(dependsOn: [classes], type: JavaExecFork) {

	doFirst {
		//do not assemble client-html
		mkdir 'build/resources/main/static'
	}
	classpath = sourceSets.main.runtimeClasspath
	main = 'ish.oncourse.server.AngelServer'
	args = ['DEBUG=true', 'REPLICATION_DISABLED=true']
	jvmArgs = ['-Xmx2048m', '-XX:+HeapDumpOnOutOfMemoryError']
	workingDir = "$buildDir"
	waitForOutput = 'Server ready for client connections'
	timeout = 60 * 3
}

tasks.withType(CreateStartScripts).each { task ->
	task.doLast {
		String text = task.windowsScript.text
		text = text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, "set CLASSPATH=%APP_HOME%\\\\onCourseServer.jar;%APP_HOME%\\\\lib\\\\*;%APP_HOME%\\\\plugins\\\\*" )
		task.windowsScript.write text

		text = task.unixScript.text
		text = text.replaceFirst(/(APP_HOME\/lib\/).*/, "APP_HOME/onCourseServer.jar\n\n" +
				"for entry in \"\\\$APP_HOME/plugins\"/*; do\n" +
				"    if [ -f \\\$entry ] ; then\n" +
				"        CLASSPATH=\\\$CLASSPATH:\\\$entry\n" +
				"    fi;\n" +
				"done;")
		task.unixScript.write text
	}
}

task installer_unix(dependsOn: [jar, assembleDist], type: Zip) {
	description "Create the Unix/Linux package (zip)."
	doFirst {
		file("build/resources/VERSION").text = project.version
	}

	from (configurations.runtimeClasspath) {
		into 'onCourseServer/lib'
	}
	from (configurations.runtime.artifacts.files) {
		into 'onCourseServer'
	}
	from (file("src/packaging/unix/")) {
		into 'onCourseServer'
	}
	from (file("build/resources/VERSION")) {
		into 'onCourseServer'
	}
	from (file("build/scripts/")) {
		into 'onCourseServer/bin/'
	}

	archiveFileName = 'onCourseServer.zip'
	destinationDirectory = file("${buildDir}/distributions/unix")
}

// API swagger ocumentation
task generateApiDoc (type: SwaggerDoc) {
	schema = file("${rootDir}/server-api/src/main/resources/server-api.yaml")
	docOutput = file("${buildDir}/doc")
}
task packageApiDoc (type: Zip, dependsOn: generateApiDoc) {
	from file("${buildDir}/doc/docs")
	archiveClassifier = 'documentation'
}

// DSL asciidoc documentation
dslDocs {
	source = sourceSets.main.groovy.plus(project(':types').sourceSets.main.groovy).plus(project(':server-api').sourceSets.main.groovy)
	destinationDir = file("${buildDir}/distributions/dsldoc")
}
task packageDslDoc(type: Zip) {
	from file("${buildDir}/distributions/dsldoc")
	archiveClassifier = 'documentation'
	archiveBaseName = "dsl"
	tasks.getByName('dslDocs').mustRunAfter(tasks.getByName('classes'))
	dependsOn tasks.getByName('classes'),tasks.getByName('dslDocs')
}

task testJar(type: Jar) {
	archiveClassifier = 'tests'
	from sourceSets.test.output
}


// "gradlew publishToMavenLocal" if you want to publish this to your local .m2 folder
publishing {
	publications {
		dsldocs(MavenPublication) {
			artifact (packageDslDoc) {
				artifactId "dsldocs"
			}
		}
		docs(MavenPublication) {
			artifact(packageApiDoc) {
				artifactId "docs"
			}
		}
		jar(MavenPublication) {
			from components.java
			artifactId 'server-jar'
		}
		test(MavenPublication) {
			artifact (testJar) {
				artifactId "test"
			}
		}
		executables(MavenPublication) {
			artifact(installer_unix) {
				classifier "executable"
				extension "zip"
			}
		}
	}
}

String sha256(String filename) {
	if (! file(filename).exists()) return "missing file"

	new ByteArrayOutputStream().withStream { result ->
		exec {
			executable = 'shasum' // this is only going to work on OSX
			args = ['-a', '256', filename]
			standardOutput = result
		}
		return result.toString().split()[0]
	}
}

task queryGrammar(type: Aql) {
	outputDir = file("${buildDir}/antlr/java/ish/oncourse/aql/impl")
	packageDir = 'ish.oncourse.aql.impl'
	target = 'Java'
}

cgen {
	createPropertyNames
	map = "${projectDir}/src/main/resources/cayenne/AngelMap.map.xml"
	makePairs = true
	template = "${projectDir}/src/main/resources/cayenne/dotemplates/subclass.vm"
	superTemplate = "${projectDir}/src/main/resources/cayenne/dotemplates/superclass.vm"
	mode = 'entity'
	superPkg = 'ish.oncourse.server.cayenne.glue'
	destDir = file("${buildDir}/generated-resources/main/java")
	doLast {
		// remove subclass files which are already committed inside the app
		delete fileTree("${buildDir}/generated-resources/main/java/ish/oncourse/server/cayenne") {
			exclude '**/glue/*'
		}
	}
}

task copyWebApp(type: Copy, dependsOn: ':client-html:build') {
	from('../client-html/build/assets') {
		include '**/*.*'
	}
	into 'build/resources/main/static'
}

compileJava {
	dependsOn queryGrammar, cgen
}
assembleDist.dependsOn(copyWebApp)

task runServer(dependsOn: [classes], type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'ish.oncourse.server.AngelServer'
	args = ['DEBUG=true', 'REPLICATION_DISABLED=true', 'disableReplication=true']
	jvmArgs = ['-Xmx1024m', '-XX:+HeapDumpOnOutOfMemoryError']
}

