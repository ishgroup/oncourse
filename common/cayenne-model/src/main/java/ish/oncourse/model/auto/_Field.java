package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.FieldConfiguration;
import ish.oncourse.model.FieldHeading;

/**
 * Class _Field was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Field extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DEFAULT_VALUE_PROPERTY = "defaultValue";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String MANDATORY_PROPERTY = "mandatory";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String ORDER_PROPERTY = "order";
    public static final String PROPERTY_PROPERTY = "property";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String FIELD_CONFIGURATION_PROPERTY = "fieldConfiguration";
    public static final String FIELD_HEADING_PROPERTY = "fieldHeading";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DEFAULT_VALUE = Property.create("defaultValue", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Boolean> MANDATORY = Property.create("mandatory", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Integer> ORDER = Property.create("order", Integer.class);
    public static final Property<String> PROPERTY = Property.create("property", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<FieldConfiguration> FIELD_CONFIGURATION = Property.create("fieldConfiguration", FieldConfiguration.class);
    public static final Property<FieldHeading> FIELD_HEADING = Property.create("fieldHeading", FieldHeading.class);

    protected Long angelId;
    protected Date created;
    protected String defaultValue;
    protected String description;
    protected Boolean mandatory;
    protected Date modified;
    protected String name;
    protected Integer order;
    protected String property;

    protected Object college;
    protected Object fieldConfiguration;
    protected Object fieldHeading;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDefaultValue(String defaultValue) {
        beforePropertyWrite("defaultValue", this.defaultValue, defaultValue);
        this.defaultValue = defaultValue;
    }

    public String getDefaultValue() {
        beforePropertyRead("defaultValue");
        return this.defaultValue;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setMandatory(Boolean mandatory) {
        beforePropertyWrite("mandatory", this.mandatory, mandatory);
        this.mandatory = mandatory;
    }

    public Boolean getMandatory() {
        beforePropertyRead("mandatory");
        return this.mandatory;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setOrder(Integer order) {
        beforePropertyWrite("order", this.order, order);
        this.order = order;
    }

    public Integer getOrder() {
        beforePropertyRead("order");
        return this.order;
    }

    public void setProperty(String property) {
        beforePropertyWrite("property", this.property, property);
        this.property = property;
    }

    public String getProperty() {
        beforePropertyRead("property");
        return this.property;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setFieldConfiguration(FieldConfiguration fieldConfiguration) {
        setToOneTarget("fieldConfiguration", fieldConfiguration, true);
    }

    public FieldConfiguration getFieldConfiguration() {
        return (FieldConfiguration)readProperty("fieldConfiguration");
    }

    public void setFieldHeading(FieldHeading fieldHeading) {
        setToOneTarget("fieldHeading", fieldHeading, true);
    }

    public FieldHeading getFieldHeading() {
        return (FieldHeading)readProperty("fieldHeading");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "defaultValue":
                return this.defaultValue;
            case "description":
                return this.description;
            case "mandatory":
                return this.mandatory;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "order":
                return this.order;
            case "property":
                return this.property;
            case "college":
                return this.college;
            case "fieldConfiguration":
                return this.fieldConfiguration;
            case "fieldHeading":
                return this.fieldHeading;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "defaultValue":
                this.defaultValue = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "mandatory":
                this.mandatory = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "order":
                this.order = (Integer)val;
                break;
            case "property":
                this.property = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "fieldConfiguration":
                this.fieldConfiguration = val;
                break;
            case "fieldHeading":
                this.fieldHeading = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.defaultValue);
        out.writeObject(this.description);
        out.writeObject(this.mandatory);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.order);
        out.writeObject(this.property);
        out.writeObject(this.college);
        out.writeObject(this.fieldConfiguration);
        out.writeObject(this.fieldHeading);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.defaultValue = (String)in.readObject();
        this.description = (String)in.readObject();
        this.mandatory = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.order = (Integer)in.readObject();
        this.property = (String)in.readObject();
        this.college = in.readObject();
        this.fieldConfiguration = in.readObject();
        this.fieldHeading = in.readObject();
    }

}
