package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;

/**
 * Class _CustomFee was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CustomFee extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODE_PROPERTY = "code";
    public static final String FEE_PROPERTY = "fee";
    public static final String NAME_PROPERTY = "name";
    public static final String PAID_UNTIL_PROPERTY = "paidUntil";
    public static final String COLLEGE_PROPERTY = "college";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<BigDecimal> FEE = Property.create("fee", BigDecimal.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Date> PAID_UNTIL = Property.create("paidUntil", Date.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);

    protected String code;
    protected BigDecimal fee;
    protected String name;
    protected Date paidUntil;

    protected Object college;

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setFee(BigDecimal fee) {
        beforePropertyWrite("fee", this.fee, fee);
        this.fee = fee;
    }

    public BigDecimal getFee() {
        beforePropertyRead("fee");
        return this.fee;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPaidUntil(Date paidUntil) {
        beforePropertyWrite("paidUntil", this.paidUntil, paidUntil);
        this.paidUntil = paidUntil;
    }

    public Date getPaidUntil() {
        beforePropertyRead("paidUntil");
        return this.paidUntil;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "code":
                return this.code;
            case "fee":
                return this.fee;
            case "name":
                return this.name;
            case "paidUntil":
                return this.paidUntil;
            case "college":
                return this.college;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "code":
                this.code = (String)val;
                break;
            case "fee":
                this.fee = (BigDecimal)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "paidUntil":
                this.paidUntil = (Date)val;
                break;
            case "college":
                this.college = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.code);
        out.writeObject(this.fee);
        out.writeObject(this.name);
        out.writeObject(this.paidUntil);
        out.writeObject(this.college);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.code = (String)in.readObject();
        this.fee = (BigDecimal)in.readObject();
        this.name = (String)in.readObject();
        this.paidUntil = (Date)in.readObject();
        this.college = in.readObject();
    }

}
