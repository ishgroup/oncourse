package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.common.types.EntityEvent;
import ish.common.types.SystemEventType;
import ish.common.types.TriggerType;
import ish.oncourse.model.College;

/**
 * Class _Script was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Script extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String ENABLED_PROPERTY = "enabled";
    public static final String ENTITY_CLASS_PROPERTY = "entityClass";
    public static final String ENTITY_EVENT_TYPE_PROPERTY = "entityEventType";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String SCHEDULE_PROPERTY = "schedule";
    public static final String SCRIPT_PROPERTY = "script";
    public static final String SYSTEM_EVENT_TYPE_PROPERTY = "systemEventType";
    public static final String TRIGGER_TYPE_PROPERTY = "triggerType";
    public static final String COLLEGE_PROPERTY = "college";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Boolean> ENABLED = Property.create("enabled", Boolean.class);
    public static final Property<String> ENTITY_CLASS = Property.create("entityClass", String.class);
    public static final Property<EntityEvent> ENTITY_EVENT_TYPE = Property.create("entityEventType", EntityEvent.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> SCHEDULE = Property.create("schedule", String.class);
    public static final Property<String> SCRIPT = Property.create("script", String.class);
    public static final Property<SystemEventType> SYSTEM_EVENT_TYPE = Property.create("systemEventType", SystemEventType.class);
    public static final Property<TriggerType> TRIGGER_TYPE = Property.create("triggerType", TriggerType.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);

    protected Long angelId;
    protected Date created;
    protected String description;
    protected Boolean enabled;
    protected String entityClass;
    protected EntityEvent entityEventType;
    protected Date modified;
    protected String name;
    protected String schedule;
    protected String script;
    protected SystemEventType systemEventType;
    protected TriggerType triggerType;

    protected Object college;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEnabled(Boolean enabled) {
        beforePropertyWrite("enabled", this.enabled, enabled);
        this.enabled = enabled;
    }

    public Boolean getEnabled() {
        beforePropertyRead("enabled");
        return this.enabled;
    }

    public void setEntityClass(String entityClass) {
        beforePropertyWrite("entityClass", this.entityClass, entityClass);
        this.entityClass = entityClass;
    }

    public String getEntityClass() {
        beforePropertyRead("entityClass");
        return this.entityClass;
    }

    public void setEntityEventType(EntityEvent entityEventType) {
        beforePropertyWrite("entityEventType", this.entityEventType, entityEventType);
        this.entityEventType = entityEventType;
    }

    public EntityEvent getEntityEventType() {
        beforePropertyRead("entityEventType");
        return this.entityEventType;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setSchedule(String schedule) {
        beforePropertyWrite("schedule", this.schedule, schedule);
        this.schedule = schedule;
    }

    public String getSchedule() {
        beforePropertyRead("schedule");
        return this.schedule;
    }

    public void setScript(String script) {
        beforePropertyWrite("script", this.script, script);
        this.script = script;
    }

    public String getScript() {
        beforePropertyRead("script");
        return this.script;
    }

    public void setSystemEventType(SystemEventType systemEventType) {
        beforePropertyWrite("systemEventType", this.systemEventType, systemEventType);
        this.systemEventType = systemEventType;
    }

    public SystemEventType getSystemEventType() {
        beforePropertyRead("systemEventType");
        return this.systemEventType;
    }

    public void setTriggerType(TriggerType triggerType) {
        beforePropertyWrite("triggerType", this.triggerType, triggerType);
        this.triggerType = triggerType;
    }

    public TriggerType getTriggerType() {
        beforePropertyRead("triggerType");
        return this.triggerType;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "description":
                return this.description;
            case "enabled":
                return this.enabled;
            case "entityClass":
                return this.entityClass;
            case "entityEventType":
                return this.entityEventType;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "schedule":
                return this.schedule;
            case "script":
                return this.script;
            case "systemEventType":
                return this.systemEventType;
            case "triggerType":
                return this.triggerType;
            case "college":
                return this.college;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "enabled":
                this.enabled = (Boolean)val;
                break;
            case "entityClass":
                this.entityClass = (String)val;
                break;
            case "entityEventType":
                this.entityEventType = (EntityEvent)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "schedule":
                this.schedule = (String)val;
                break;
            case "script":
                this.script = (String)val;
                break;
            case "systemEventType":
                this.systemEventType = (SystemEventType)val;
                break;
            case "triggerType":
                this.triggerType = (TriggerType)val;
                break;
            case "college":
                this.college = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.description);
        out.writeObject(this.enabled);
        out.writeObject(this.entityClass);
        out.writeObject(this.entityEventType);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.schedule);
        out.writeObject(this.script);
        out.writeObject(this.systemEventType);
        out.writeObject(this.triggerType);
        out.writeObject(this.college);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.enabled = (Boolean)in.readObject();
        this.entityClass = (String)in.readObject();
        this.entityEventType = (EntityEvent)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.schedule = (String)in.readObject();
        this.script = (String)in.readObject();
        this.systemEventType = (SystemEventType)in.readObject();
        this.triggerType = (TriggerType)in.readObject();
        this.college = in.readObject();
    }

}
