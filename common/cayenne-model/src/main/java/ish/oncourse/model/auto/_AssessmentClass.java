package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.Assessment;
import ish.oncourse.model.AssessmentClassModule;
import ish.oncourse.model.AssessmentClassTutor;
import ish.oncourse.model.AssessmentSubmission;
import ish.oncourse.model.College;
import ish.oncourse.model.CourseClass;

/**
 * Class _AssessmentClass was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AssessmentClass extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DUE_DATE_PROPERTY = "dueDate";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String RELEASE_DATE_PROPERTY = "releaseDate";
    public static final String ASSESSMENT_PROPERTY = "assessment";
    public static final String ASSESSMENT_CLASS_MODULES_PROPERTY = "assessmentClassModules";
    public static final String ASSESSMENT_CLASS_TUTORS_PROPERTY = "assessmentClassTutors";
    public static final String ASSESSMENT_SUBMISSIONS_PROPERTY = "assessmentSubmissions";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_CLASS_PROPERTY = "courseClass";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> DUE_DATE = Property.create("dueDate", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Date> RELEASE_DATE = Property.create("releaseDate", Date.class);
    public static final Property<Assessment> ASSESSMENT = Property.create("assessment", Assessment.class);
    public static final Property<List<AssessmentClassModule>> ASSESSMENT_CLASS_MODULES = Property.create("assessmentClassModules", List.class);
    public static final Property<List<AssessmentClassTutor>> ASSESSMENT_CLASS_TUTORS = Property.create("assessmentClassTutors", List.class);
    public static final Property<List<AssessmentSubmission>> ASSESSMENT_SUBMISSIONS = Property.create("assessmentSubmissions", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<CourseClass> COURSE_CLASS = Property.create("courseClass", CourseClass.class);

    protected Long angelId;
    protected Date created;
    protected Date dueDate;
    protected Date modified;
    protected Date releaseDate;

    protected Object assessment;
    protected Object assessmentClassModules;
    protected Object assessmentClassTutors;
    protected Object assessmentSubmissions;
    protected Object college;
    protected Object courseClass;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDueDate(Date dueDate) {
        beforePropertyWrite("dueDate", this.dueDate, dueDate);
        this.dueDate = dueDate;
    }

    public Date getDueDate() {
        beforePropertyRead("dueDate");
        return this.dueDate;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setReleaseDate(Date releaseDate) {
        beforePropertyWrite("releaseDate", this.releaseDate, releaseDate);
        this.releaseDate = releaseDate;
    }

    public Date getReleaseDate() {
        beforePropertyRead("releaseDate");
        return this.releaseDate;
    }

    public void setAssessment(Assessment assessment) {
        setToOneTarget("assessment", assessment, true);
    }

    public Assessment getAssessment() {
        return (Assessment)readProperty("assessment");
    }

    public void addToAssessmentClassModules(AssessmentClassModule obj) {
        addToManyTarget("assessmentClassModules", obj, true);
    }

    public void removeFromAssessmentClassModules(AssessmentClassModule obj) {
        removeToManyTarget("assessmentClassModules", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AssessmentClassModule> getAssessmentClassModules() {
        return (List<AssessmentClassModule>)readProperty("assessmentClassModules");
    }

    public void addToAssessmentClassTutors(AssessmentClassTutor obj) {
        addToManyTarget("assessmentClassTutors", obj, true);
    }

    public void removeFromAssessmentClassTutors(AssessmentClassTutor obj) {
        removeToManyTarget("assessmentClassTutors", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AssessmentClassTutor> getAssessmentClassTutors() {
        return (List<AssessmentClassTutor>)readProperty("assessmentClassTutors");
    }

    public void addToAssessmentSubmissions(AssessmentSubmission obj) {
        addToManyTarget("assessmentSubmissions", obj, true);
    }

    public void removeFromAssessmentSubmissions(AssessmentSubmission obj) {
        removeToManyTarget("assessmentSubmissions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AssessmentSubmission> getAssessmentSubmissions() {
        return (List<AssessmentSubmission>)readProperty("assessmentSubmissions");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCourseClass(CourseClass courseClass) {
        setToOneTarget("courseClass", courseClass, true);
    }

    public CourseClass getCourseClass() {
        return (CourseClass)readProperty("courseClass");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "dueDate":
                return this.dueDate;
            case "modified":
                return this.modified;
            case "releaseDate":
                return this.releaseDate;
            case "assessment":
                return this.assessment;
            case "assessmentClassModules":
                return this.assessmentClassModules;
            case "assessmentClassTutors":
                return this.assessmentClassTutors;
            case "assessmentSubmissions":
                return this.assessmentSubmissions;
            case "college":
                return this.college;
            case "courseClass":
                return this.courseClass;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "dueDate":
                this.dueDate = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "releaseDate":
                this.releaseDate = (Date)val;
                break;
            case "assessment":
                this.assessment = val;
                break;
            case "assessmentClassModules":
                this.assessmentClassModules = val;
                break;
            case "assessmentClassTutors":
                this.assessmentClassTutors = val;
                break;
            case "assessmentSubmissions":
                this.assessmentSubmissions = val;
                break;
            case "college":
                this.college = val;
                break;
            case "courseClass":
                this.courseClass = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.dueDate);
        out.writeObject(this.modified);
        out.writeObject(this.releaseDate);
        out.writeObject(this.assessment);
        out.writeObject(this.assessmentClassModules);
        out.writeObject(this.assessmentClassTutors);
        out.writeObject(this.assessmentSubmissions);
        out.writeObject(this.college);
        out.writeObject(this.courseClass);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.dueDate = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.releaseDate = (Date)in.readObject();
        this.assessment = in.readObject();
        this.assessmentClassModules = in.readObject();
        this.assessmentClassTutors = in.readObject();
        this.assessmentSubmissions = in.readObject();
        this.college = in.readObject();
        this.courseClass = in.readObject();
    }

}
