package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.ConfirmationStatus;
import ish.common.types.CreditCardType;
import ish.common.types.PaymentSource;
import ish.common.types.PaymentStatus;
import ish.math.Money;
import ish.oncourse.model.College;
import ish.oncourse.model.Contact;
import ish.oncourse.model.PaymentOutTransaction;

/**
 * Class _PaymentOut was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PaymentOut extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CONFIRMATION_STATUS_PROPERTY = "confirmationStatus";
    public static final String CREATED_PROPERTY = "created";
    public static final String CREDIT_CARD_CVV_PROPERTY = "creditCardCVV";
    public static final String CREDIT_CARD_TYPE_PROPERTY = "creditCardType";
    public static final String DATE_BANKED_PROPERTY = "dateBanked";
    public static final String DATE_PAID_PROPERTY = "datePaid";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PAYMENT_IN_TXN_REFERENCE_PROPERTY = "paymentInTxnReference";
    public static final String SOURCE_PROPERTY = "source";
    public static final String STATUS_PROPERTY = "status";
    public static final String STATUS_NOTES_PROPERTY = "statusNotes";
    public static final String TOTAL_AMOUNT_PROPERTY = "totalAmount";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONTACT_PROPERTY = "contact";
    public static final String PAYMENT_OUT_TRANSACTIONS_PROPERTY = "paymentOutTransactions";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<ConfirmationStatus> CONFIRMATION_STATUS = Property.create("confirmationStatus", ConfirmationStatus.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> CREDIT_CARD_CVV = Property.create("creditCardCVV", String.class);
    public static final Property<CreditCardType> CREDIT_CARD_TYPE = Property.create("creditCardType", CreditCardType.class);
    public static final Property<Date> DATE_BANKED = Property.create("dateBanked", Date.class);
    public static final Property<Date> DATE_PAID = Property.create("datePaid", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> PAYMENT_IN_TXN_REFERENCE = Property.create("paymentInTxnReference", String.class);
    public static final Property<PaymentSource> SOURCE = Property.create("source", PaymentSource.class);
    public static final Property<PaymentStatus> STATUS = Property.create("status", PaymentStatus.class);
    public static final Property<String> STATUS_NOTES = Property.create("statusNotes", String.class);
    public static final Property<Money> TOTAL_AMOUNT = Property.create("totalAmount", Money.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Contact> CONTACT = Property.create("contact", Contact.class);
    public static final Property<List<PaymentOutTransaction>> PAYMENT_OUT_TRANSACTIONS = Property.create("paymentOutTransactions", List.class);

    protected Long angelId;
    protected ConfirmationStatus confirmationStatus;
    protected Date created;
    protected String creditCardCVV;
    protected CreditCardType creditCardType;
    protected Date dateBanked;
    protected Date datePaid;
    protected Date modified;
    protected String paymentInTxnReference;
    protected PaymentSource source;
    protected PaymentStatus status;
    protected String statusNotes;
    protected Money totalAmount;

    protected Object college;
    protected Object contact;
    protected Object paymentOutTransactions;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
        beforePropertyWrite("confirmationStatus", this.confirmationStatus, confirmationStatus);
        this.confirmationStatus = confirmationStatus;
    }

    public ConfirmationStatus getConfirmationStatus() {
        beforePropertyRead("confirmationStatus");
        return this.confirmationStatus;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setCreditCardCVV(String creditCardCVV) {
        beforePropertyWrite("creditCardCVV", this.creditCardCVV, creditCardCVV);
        this.creditCardCVV = creditCardCVV;
    }

    public String getCreditCardCVV() {
        beforePropertyRead("creditCardCVV");
        return this.creditCardCVV;
    }

    public void setCreditCardType(CreditCardType creditCardType) {
        beforePropertyWrite("creditCardType", this.creditCardType, creditCardType);
        this.creditCardType = creditCardType;
    }

    public CreditCardType getCreditCardType() {
        beforePropertyRead("creditCardType");
        return this.creditCardType;
    }

    public void setDateBanked(Date dateBanked) {
        beforePropertyWrite("dateBanked", this.dateBanked, dateBanked);
        this.dateBanked = dateBanked;
    }

    public Date getDateBanked() {
        beforePropertyRead("dateBanked");
        return this.dateBanked;
    }

    public void setDatePaid(Date datePaid) {
        beforePropertyWrite("datePaid", this.datePaid, datePaid);
        this.datePaid = datePaid;
    }

    public Date getDatePaid() {
        beforePropertyRead("datePaid");
        return this.datePaid;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPaymentInTxnReference(String paymentInTxnReference) {
        beforePropertyWrite("paymentInTxnReference", this.paymentInTxnReference, paymentInTxnReference);
        this.paymentInTxnReference = paymentInTxnReference;
    }

    public String getPaymentInTxnReference() {
        beforePropertyRead("paymentInTxnReference");
        return this.paymentInTxnReference;
    }

    public void setSource(PaymentSource source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public PaymentSource getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setStatus(PaymentStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public PaymentStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setStatusNotes(String statusNotes) {
        beforePropertyWrite("statusNotes", this.statusNotes, statusNotes);
        this.statusNotes = statusNotes;
    }

    public String getStatusNotes() {
        beforePropertyRead("statusNotes");
        return this.statusNotes;
    }

    public void setTotalAmount(Money totalAmount) {
        beforePropertyWrite("totalAmount", this.totalAmount, totalAmount);
        this.totalAmount = totalAmount;
    }

    public Money getTotalAmount() {
        beforePropertyRead("totalAmount");
        return this.totalAmount;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void addToPaymentOutTransactions(PaymentOutTransaction obj) {
        addToManyTarget("paymentOutTransactions", obj, true);
    }

    public void removeFromPaymentOutTransactions(PaymentOutTransaction obj) {
        removeToManyTarget("paymentOutTransactions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PaymentOutTransaction> getPaymentOutTransactions() {
        return (List<PaymentOutTransaction>)readProperty("paymentOutTransactions");
    }

    protected abstract void onPostAdd();

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "confirmationStatus":
                return this.confirmationStatus;
            case "created":
                return this.created;
            case "creditCardCVV":
                return this.creditCardCVV;
            case "creditCardType":
                return this.creditCardType;
            case "dateBanked":
                return this.dateBanked;
            case "datePaid":
                return this.datePaid;
            case "modified":
                return this.modified;
            case "paymentInTxnReference":
                return this.paymentInTxnReference;
            case "source":
                return this.source;
            case "status":
                return this.status;
            case "statusNotes":
                return this.statusNotes;
            case "totalAmount":
                return this.totalAmount;
            case "college":
                return this.college;
            case "contact":
                return this.contact;
            case "paymentOutTransactions":
                return this.paymentOutTransactions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "confirmationStatus":
                this.confirmationStatus = (ConfirmationStatus)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "creditCardCVV":
                this.creditCardCVV = (String)val;
                break;
            case "creditCardType":
                this.creditCardType = (CreditCardType)val;
                break;
            case "dateBanked":
                this.dateBanked = (Date)val;
                break;
            case "datePaid":
                this.datePaid = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "paymentInTxnReference":
                this.paymentInTxnReference = (String)val;
                break;
            case "source":
                this.source = (PaymentSource)val;
                break;
            case "status":
                this.status = (PaymentStatus)val;
                break;
            case "statusNotes":
                this.statusNotes = (String)val;
                break;
            case "totalAmount":
                this.totalAmount = (Money)val;
                break;
            case "college":
                this.college = val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "paymentOutTransactions":
                this.paymentOutTransactions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.confirmationStatus);
        out.writeObject(this.created);
        out.writeObject(this.creditCardCVV);
        out.writeObject(this.creditCardType);
        out.writeObject(this.dateBanked);
        out.writeObject(this.datePaid);
        out.writeObject(this.modified);
        out.writeObject(this.paymentInTxnReference);
        out.writeObject(this.source);
        out.writeObject(this.status);
        out.writeObject(this.statusNotes);
        out.writeObject(this.totalAmount);
        out.writeObject(this.college);
        out.writeObject(this.contact);
        out.writeObject(this.paymentOutTransactions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.confirmationStatus = (ConfirmationStatus)in.readObject();
        this.created = (Date)in.readObject();
        this.creditCardCVV = (String)in.readObject();
        this.creditCardType = (CreditCardType)in.readObject();
        this.dateBanked = (Date)in.readObject();
        this.datePaid = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.paymentInTxnReference = (String)in.readObject();
        this.source = (PaymentSource)in.readObject();
        this.status = (PaymentStatus)in.readObject();
        this.statusNotes = (String)in.readObject();
        this.totalAmount = (Money)in.readObject();
        this.college = in.readObject();
        this.contact = in.readObject();
        this.paymentOutTransactions = in.readObject();
    }

}
