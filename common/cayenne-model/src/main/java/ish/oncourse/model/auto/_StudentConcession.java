package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.ConcessionType;
import ish.oncourse.model.Student;

/**
 * Class _StudentConcession was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _StudentConcession extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String AUTHORISATION_EXPIRES_ON_PROPERTY = "authorisationExpiresOn";
    public static final String AUTHORISED_ON_PROPERTY = "authorisedOn";
    public static final String CONCESSION_NUMBER_PROPERTY = "concessionNumber";
    public static final String CREATED_PROPERTY = "created";
    public static final String EXPIRES_ON_PROPERTY = "expiresOn";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String TIME_ZONE_PROPERTY = "timeZone";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONCESSION_TYPE_PROPERTY = "concessionType";
    public static final String STUDENT_PROPERTY = "student";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> AUTHORISATION_EXPIRES_ON = Property.create("authorisationExpiresOn", Date.class);
    public static final Property<Date> AUTHORISED_ON = Property.create("authorisedOn", Date.class);
    public static final Property<String> CONCESSION_NUMBER = Property.create("concessionNumber", String.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> EXPIRES_ON = Property.create("expiresOn", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> TIME_ZONE = Property.create("timeZone", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<ConcessionType> CONCESSION_TYPE = Property.create("concessionType", ConcessionType.class);
    public static final Property<Student> STUDENT = Property.create("student", Student.class);

    protected Long angelId;
    protected Date authorisationExpiresOn;
    protected Date authorisedOn;
    protected String concessionNumber;
    protected Date created;
    protected Date expiresOn;
    protected Date modified;
    protected String timeZone;

    protected Object college;
    protected Object concessionType;
    protected Object student;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setAuthorisationExpiresOn(Date authorisationExpiresOn) {
        beforePropertyWrite("authorisationExpiresOn", this.authorisationExpiresOn, authorisationExpiresOn);
        this.authorisationExpiresOn = authorisationExpiresOn;
    }

    public Date getAuthorisationExpiresOn() {
        beforePropertyRead("authorisationExpiresOn");
        return this.authorisationExpiresOn;
    }

    public void setAuthorisedOn(Date authorisedOn) {
        beforePropertyWrite("authorisedOn", this.authorisedOn, authorisedOn);
        this.authorisedOn = authorisedOn;
    }

    public Date getAuthorisedOn() {
        beforePropertyRead("authorisedOn");
        return this.authorisedOn;
    }

    public void setConcessionNumber(String concessionNumber) {
        beforePropertyWrite("concessionNumber", this.concessionNumber, concessionNumber);
        this.concessionNumber = concessionNumber;
    }

    public String getConcessionNumber() {
        beforePropertyRead("concessionNumber");
        return this.concessionNumber;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setExpiresOn(Date expiresOn) {
        beforePropertyWrite("expiresOn", this.expiresOn, expiresOn);
        this.expiresOn = expiresOn;
    }

    public Date getExpiresOn() {
        beforePropertyRead("expiresOn");
        return this.expiresOn;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setTimeZone(String timeZone) {
        beforePropertyWrite("timeZone", this.timeZone, timeZone);
        this.timeZone = timeZone;
    }

    public String getTimeZone() {
        beforePropertyRead("timeZone");
        return this.timeZone;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setConcessionType(ConcessionType concessionType) {
        setToOneTarget("concessionType", concessionType, true);
    }

    public ConcessionType getConcessionType() {
        return (ConcessionType)readProperty("concessionType");
    }

    public void setStudent(Student student) {
        setToOneTarget("student", student, true);
    }

    public Student getStudent() {
        return (Student)readProperty("student");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "authorisationExpiresOn":
                return this.authorisationExpiresOn;
            case "authorisedOn":
                return this.authorisedOn;
            case "concessionNumber":
                return this.concessionNumber;
            case "created":
                return this.created;
            case "expiresOn":
                return this.expiresOn;
            case "modified":
                return this.modified;
            case "timeZone":
                return this.timeZone;
            case "college":
                return this.college;
            case "concessionType":
                return this.concessionType;
            case "student":
                return this.student;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "authorisationExpiresOn":
                this.authorisationExpiresOn = (Date)val;
                break;
            case "authorisedOn":
                this.authorisedOn = (Date)val;
                break;
            case "concessionNumber":
                this.concessionNumber = (String)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "expiresOn":
                this.expiresOn = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "timeZone":
                this.timeZone = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "concessionType":
                this.concessionType = val;
                break;
            case "student":
                this.student = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.authorisationExpiresOn);
        out.writeObject(this.authorisedOn);
        out.writeObject(this.concessionNumber);
        out.writeObject(this.created);
        out.writeObject(this.expiresOn);
        out.writeObject(this.modified);
        out.writeObject(this.timeZone);
        out.writeObject(this.college);
        out.writeObject(this.concessionType);
        out.writeObject(this.student);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.authorisationExpiresOn = (Date)in.readObject();
        this.authorisedOn = (Date)in.readObject();
        this.concessionNumber = (String)in.readObject();
        this.created = (Date)in.readObject();
        this.expiresOn = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.timeZone = (String)in.readObject();
        this.college = in.readObject();
        this.concessionType = in.readObject();
        this.student = in.readObject();
    }

}
