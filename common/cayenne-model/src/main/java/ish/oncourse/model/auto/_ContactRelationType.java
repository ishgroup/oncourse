package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.ContactRelation;
import ish.oncourse.model.DiscountMembershipRelationType;
import ish.oncourse.model.SystemUser;

/**
 * Class _ContactRelationType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContactRelationType extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DELEGATED_ACCESS_TO_CONTACT_PROPERTY = "delegatedAccessToContact";
    public static final String FROM_CONTACT_NAME_PROPERTY = "fromContactName";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String TO_CONTACT_NAME_PROPERTY = "toContactName";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONTACT_RELATIONS_PROPERTY = "contactRelations";
    public static final String CREATED_BY_PROPERTY = "createdBy";
    public static final String MEMBESHIP_DISCOUNT_RELATIONS_PROPERTY = "membeshipDiscountRelations";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Boolean> DELEGATED_ACCESS_TO_CONTACT = Property.create("delegatedAccessToContact", Boolean.class);
    public static final Property<String> FROM_CONTACT_NAME = Property.create("fromContactName", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> TO_CONTACT_NAME = Property.create("toContactName", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<ContactRelation>> CONTACT_RELATIONS = Property.create("contactRelations", List.class);
    public static final Property<SystemUser> CREATED_BY = Property.create("createdBy", SystemUser.class);
    public static final Property<List<DiscountMembershipRelationType>> MEMBESHIP_DISCOUNT_RELATIONS = Property.create("membeshipDiscountRelations", List.class);

    protected Long angelId;
    protected Date created;
    protected Boolean delegatedAccessToContact;
    protected String fromContactName;
    protected Date modified;
    protected String toContactName;

    protected Object college;
    protected Object contactRelations;
    protected Object createdBy;
    protected Object membeshipDiscountRelations;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDelegatedAccessToContact(Boolean delegatedAccessToContact) {
        beforePropertyWrite("delegatedAccessToContact", this.delegatedAccessToContact, delegatedAccessToContact);
        this.delegatedAccessToContact = delegatedAccessToContact;
    }

    public Boolean getDelegatedAccessToContact() {
        beforePropertyRead("delegatedAccessToContact");
        return this.delegatedAccessToContact;
    }

    public void setFromContactName(String fromContactName) {
        beforePropertyWrite("fromContactName", this.fromContactName, fromContactName);
        this.fromContactName = fromContactName;
    }

    public String getFromContactName() {
        beforePropertyRead("fromContactName");
        return this.fromContactName;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setToContactName(String toContactName) {
        beforePropertyWrite("toContactName", this.toContactName, toContactName);
        this.toContactName = toContactName;
    }

    public String getToContactName() {
        beforePropertyRead("toContactName");
        return this.toContactName;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToContactRelations(ContactRelation obj) {
        addToManyTarget("contactRelations", obj, true);
    }

    public void removeFromContactRelations(ContactRelation obj) {
        removeToManyTarget("contactRelations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContactRelation> getContactRelations() {
        return (List<ContactRelation>)readProperty("contactRelations");
    }

    public void setCreatedBy(SystemUser createdBy) {
        setToOneTarget("createdBy", createdBy, true);
    }

    public SystemUser getCreatedBy() {
        return (SystemUser)readProperty("createdBy");
    }

    public void addToMembeshipDiscountRelations(DiscountMembershipRelationType obj) {
        addToManyTarget("membeshipDiscountRelations", obj, true);
    }

    public void removeFromMembeshipDiscountRelations(DiscountMembershipRelationType obj) {
        removeToManyTarget("membeshipDiscountRelations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscountMembershipRelationType> getMembeshipDiscountRelations() {
        return (List<DiscountMembershipRelationType>)readProperty("membeshipDiscountRelations");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "delegatedAccessToContact":
                return this.delegatedAccessToContact;
            case "fromContactName":
                return this.fromContactName;
            case "modified":
                return this.modified;
            case "toContactName":
                return this.toContactName;
            case "college":
                return this.college;
            case "contactRelations":
                return this.contactRelations;
            case "createdBy":
                return this.createdBy;
            case "membeshipDiscountRelations":
                return this.membeshipDiscountRelations;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "delegatedAccessToContact":
                this.delegatedAccessToContact = (Boolean)val;
                break;
            case "fromContactName":
                this.fromContactName = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "toContactName":
                this.toContactName = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "contactRelations":
                this.contactRelations = val;
                break;
            case "createdBy":
                this.createdBy = val;
                break;
            case "membeshipDiscountRelations":
                this.membeshipDiscountRelations = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.delegatedAccessToContact);
        out.writeObject(this.fromContactName);
        out.writeObject(this.modified);
        out.writeObject(this.toContactName);
        out.writeObject(this.college);
        out.writeObject(this.contactRelations);
        out.writeObject(this.createdBy);
        out.writeObject(this.membeshipDiscountRelations);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.delegatedAccessToContact = (Boolean)in.readObject();
        this.fromContactName = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.toContactName = (String)in.readObject();
        this.college = in.readObject();
        this.contactRelations = in.readObject();
        this.createdBy = in.readObject();
        this.membeshipDiscountRelations = in.readObject();
    }

}
