package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.math.Money;
import ish.oncourse.model.Course;
import ish.oncourse.model.Product;

/**
 * Class _VoucherProduct was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _VoucherProduct extends Product {

    private static final long serialVersionUID = 1L; 

    public static final String MAX_COURSES_REDEMPTION_PROPERTY = "maxCoursesRedemption";
    public static final String VALUE_PROPERTY = "value";
    public static final String REDEMPTION_COURSES_PROPERTY = "redemptionCourses";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> MAX_COURSES_REDEMPTION = Property.create("maxCoursesRedemption", Integer.class);
    public static final Property<Money> VALUE = Property.create("value", Money.class);
    public static final Property<List<Course>> REDEMPTION_COURSES = Property.create("redemptionCourses", List.class);

    protected Integer maxCoursesRedemption;
    protected Money value;

    protected Object redemptionCourses;

    public void setMaxCoursesRedemption(Integer maxCoursesRedemption) {
        beforePropertyWrite("maxCoursesRedemption", this.maxCoursesRedemption, maxCoursesRedemption);
        this.maxCoursesRedemption = maxCoursesRedemption;
    }

    public Integer getMaxCoursesRedemption() {
        beforePropertyRead("maxCoursesRedemption");
        return this.maxCoursesRedemption;
    }

    public void setValue(Money value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public Money getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    public void addToRedemptionCourses(Course obj) {
        addToManyTarget("redemptionCourses", obj, true);
    }

    public void removeFromRedemptionCourses(Course obj) {
        removeToManyTarget("redemptionCourses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Course> getRedemptionCourses() {
        return (List<Course>)readProperty("redemptionCourses");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "maxCoursesRedemption":
                return this.maxCoursesRedemption;
            case "value":
                return this.value;
            case "redemptionCourses":
                return this.redemptionCourses;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "maxCoursesRedemption":
                this.maxCoursesRedemption = (Integer)val;
                break;
            case "value":
                this.value = (Money)val;
                break;
            case "redemptionCourses":
                this.redemptionCourses = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.maxCoursesRedemption);
        out.writeObject(this.value);
        out.writeObject(this.redemptionCourses);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.maxCoursesRedemption = (Integer)in.readObject();
        this.value = (Money)in.readObject();
        this.redemptionCourses = in.readObject();
    }

}
