package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.QueuedRecord;

/**
 * Class _QueuedTransaction was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QueuedTransaction extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_PROPERTY = "created";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String TRANSACTION_KEY_PROPERTY = "transactionKey";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String QUEUED_RECORDS_PROPERTY = "queuedRecords";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> TRANSACTION_KEY = Property.create("transactionKey", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<QueuedRecord>> QUEUED_RECORDS = Property.create("queuedRecords", List.class);

    protected Date created;
    protected Date modified;
    protected String transactionKey;

    protected Object college;
    protected Object queuedRecords;

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setTransactionKey(String transactionKey) {
        beforePropertyWrite("transactionKey", this.transactionKey, transactionKey);
        this.transactionKey = transactionKey;
    }

    public String getTransactionKey() {
        beforePropertyRead("transactionKey");
        return this.transactionKey;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToQueuedRecords(QueuedRecord obj) {
        addToManyTarget("queuedRecords", obj, true);
    }

    public void removeFromQueuedRecords(QueuedRecord obj) {
        removeToManyTarget("queuedRecords", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<QueuedRecord> getQueuedRecords() {
        return (List<QueuedRecord>)readProperty("queuedRecords");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "created":
                return this.created;
            case "modified":
                return this.modified;
            case "transactionKey":
                return this.transactionKey;
            case "college":
                return this.college;
            case "queuedRecords":
                return this.queuedRecords;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "created":
                this.created = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "transactionKey":
                this.transactionKey = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "queuedRecords":
                this.queuedRecords = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.created);
        out.writeObject(this.modified);
        out.writeObject(this.transactionKey);
        out.writeObject(this.college);
        out.writeObject(this.queuedRecords);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.created = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.transactionKey = (String)in.readObject();
        this.college = in.readObject();
        this.queuedRecords = in.readObject();
    }

}
