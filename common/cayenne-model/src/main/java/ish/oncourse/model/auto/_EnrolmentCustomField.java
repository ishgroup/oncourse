package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.CustomField;
import ish.oncourse.model.Enrolment;

/**
 * Class _EnrolmentCustomField was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EnrolmentCustomField extends CustomField {

    private static final long serialVersionUID = 1L; 

    public static final String RELATED_OBJECT_PROPERTY = "relatedObject";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Enrolment> RELATED_OBJECT = Property.create("relatedObject", Enrolment.class);


    protected Object relatedObject;

    public void setRelatedObject(Enrolment relatedObject) {
        setToOneTarget("relatedObject", relatedObject, true);
    }

    public Enrolment getRelatedObject() {
        return (Enrolment)readProperty("relatedObject");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "relatedObject":
                return this.relatedObject;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "relatedObject":
                this.relatedObject = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.relatedObject);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.relatedObject = in.readObject();
    }

}
