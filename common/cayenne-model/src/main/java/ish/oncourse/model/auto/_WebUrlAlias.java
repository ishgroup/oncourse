package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.WebNode;
import ish.oncourse.model.WebSiteVersion;
import ish.oncourse.specialpages.RequestMatchType;
import ish.oncourse.specialpages.SpecialWebPage;

/**
 * Class _WebUrlAlias was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebUrlAlias extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_PROPERTY = "created";
    public static final String DEFAULT_PROPERTY = "default";
    public static final String MATCH_TYPE_PROPERTY = "matchType";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String REDIRECT_TO_PROPERTY = "redirectTo";
    public static final String SPECIAL_PAGE_PROPERTY = "specialPage";
    public static final String URL_PATH_PROPERTY = "urlPath";
    public static final String WEB_NODE_PROPERTY = "webNode";
    public static final String WEB_SITE_VERSION_PROPERTY = "webSiteVersion";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Boolean> DEFAULT = Property.create("default", Boolean.class);
    public static final Property<RequestMatchType> MATCH_TYPE = Property.create("matchType", RequestMatchType.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> REDIRECT_TO = Property.create("redirectTo", String.class);
    public static final Property<SpecialWebPage> SPECIAL_PAGE = Property.create("specialPage", SpecialWebPage.class);
    public static final Property<String> URL_PATH = Property.create("urlPath", String.class);
    public static final Property<WebNode> WEB_NODE = Property.create("webNode", WebNode.class);
    public static final Property<WebSiteVersion> WEB_SITE_VERSION = Property.create("webSiteVersion", WebSiteVersion.class);

    protected Date created;
    protected boolean _default;
    protected RequestMatchType matchType;
    protected Date modified;
    protected String redirectTo;
    protected SpecialWebPage specialPage;
    protected String urlPath;

    protected Object webNode;
    protected Object webSiteVersion;

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDefault(boolean _default) {
        beforePropertyWrite("default", this._default, _default);
        this._default = _default;
    }

	public boolean isDefault() {
        beforePropertyRead("default");
        return this._default;
    }

    public void setMatchType(RequestMatchType matchType) {
        beforePropertyWrite("matchType", this.matchType, matchType);
        this.matchType = matchType;
    }

    public RequestMatchType getMatchType() {
        beforePropertyRead("matchType");
        return this.matchType;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setRedirectTo(String redirectTo) {
        beforePropertyWrite("redirectTo", this.redirectTo, redirectTo);
        this.redirectTo = redirectTo;
    }

    public String getRedirectTo() {
        beforePropertyRead("redirectTo");
        return this.redirectTo;
    }

    public void setSpecialPage(SpecialWebPage specialPage) {
        beforePropertyWrite("specialPage", this.specialPage, specialPage);
        this.specialPage = specialPage;
    }

    public SpecialWebPage getSpecialPage() {
        beforePropertyRead("specialPage");
        return this.specialPage;
    }

    public void setUrlPath(String urlPath) {
        beforePropertyWrite("urlPath", this.urlPath, urlPath);
        this.urlPath = urlPath;
    }

    public String getUrlPath() {
        beforePropertyRead("urlPath");
        return this.urlPath;
    }

    public void setWebNode(WebNode webNode) {
        setToOneTarget("webNode", webNode, true);
    }

    public WebNode getWebNode() {
        return (WebNode)readProperty("webNode");
    }

    public void setWebSiteVersion(WebSiteVersion webSiteVersion) {
        setToOneTarget("webSiteVersion", webSiteVersion, true);
    }

    public WebSiteVersion getWebSiteVersion() {
        return (WebSiteVersion)readProperty("webSiteVersion");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "created":
                return this.created;
            case "default":
                return this._default;
            case "matchType":
                return this.matchType;
            case "modified":
                return this.modified;
            case "redirectTo":
                return this.redirectTo;
            case "specialPage":
                return this.specialPage;
            case "urlPath":
                return this.urlPath;
            case "webNode":
                return this.webNode;
            case "webSiteVersion":
                return this.webSiteVersion;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "created":
                this.created = (Date)val;
                break;
            case "default":
                this._default = val == null ? false : (boolean)val;
                break;
            case "matchType":
                this.matchType = (RequestMatchType)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "redirectTo":
                this.redirectTo = (String)val;
                break;
            case "specialPage":
                this.specialPage = (SpecialWebPage)val;
                break;
            case "urlPath":
                this.urlPath = (String)val;
                break;
            case "webNode":
                this.webNode = val;
                break;
            case "webSiteVersion":
                this.webSiteVersion = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.created);
        out.writeBoolean(this._default);
        out.writeObject(this.matchType);
        out.writeObject(this.modified);
        out.writeObject(this.redirectTo);
        out.writeObject(this.specialPage);
        out.writeObject(this.urlPath);
        out.writeObject(this.webNode);
        out.writeObject(this.webSiteVersion);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.created = (Date)in.readObject();
        this._default = in.readBoolean();
        this.matchType = (RequestMatchType)in.readObject();
        this.modified = (Date)in.readObject();
        this.redirectTo = (String)in.readObject();
        this.specialPage = (SpecialWebPage)in.readObject();
        this.urlPath = (String)in.readObject();
        this.webNode = in.readObject();
        this.webSiteVersion = in.readObject();
    }

}
