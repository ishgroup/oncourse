package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.common.types.MessageStatus;
import ish.common.types.MessageType;
import ish.oncourse.model.College;
import ish.oncourse.model.Contact;
import ish.oncourse.model.Message;

/**
 * Class _MessagePerson was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MessagePerson extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESTINATION_ADDRESS_PROPERTY = "destinationAddress";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NUMBER_OF_ATTEMPTS_PROPERTY = "numberOfAttempts";
    public static final String RESPONSE_PROPERTY = "response";
    public static final String STATUS_PROPERTY = "status";
    public static final String TIME_OF_DELIVERY_PROPERTY = "timeOfDelivery";
    public static final String TYPE_PROPERTY = "type";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONTACT_PROPERTY = "contact";
    public static final String MESSAGE_PROPERTY = "message";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESTINATION_ADDRESS = Property.create("destinationAddress", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Integer> NUMBER_OF_ATTEMPTS = Property.create("numberOfAttempts", Integer.class);
    public static final Property<String> RESPONSE = Property.create("response", String.class);
    public static final Property<MessageStatus> STATUS = Property.create("status", MessageStatus.class);
    public static final Property<Date> TIME_OF_DELIVERY = Property.create("timeOfDelivery", Date.class);
    public static final Property<MessageType> TYPE = Property.create("type", MessageType.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Contact> CONTACT = Property.create("contact", Contact.class);
    public static final Property<Message> MESSAGE = Property.create("message", Message.class);

    protected Long angelId;
    protected Date created;
    protected String destinationAddress;
    protected Date modified;
    protected Integer numberOfAttempts;
    protected String response;
    protected MessageStatus status;
    protected Date timeOfDelivery;
    protected MessageType type;

    protected Object college;
    protected Object contact;
    protected Object message;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDestinationAddress(String destinationAddress) {
        beforePropertyWrite("destinationAddress", this.destinationAddress, destinationAddress);
        this.destinationAddress = destinationAddress;
    }

    public String getDestinationAddress() {
        beforePropertyRead("destinationAddress");
        return this.destinationAddress;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setNumberOfAttempts(Integer numberOfAttempts) {
        beforePropertyWrite("numberOfAttempts", this.numberOfAttempts, numberOfAttempts);
        this.numberOfAttempts = numberOfAttempts;
    }

    public Integer getNumberOfAttempts() {
        beforePropertyRead("numberOfAttempts");
        return this.numberOfAttempts;
    }

    public void setResponse(String response) {
        beforePropertyWrite("response", this.response, response);
        this.response = response;
    }

    public String getResponse() {
        beforePropertyRead("response");
        return this.response;
    }

    public void setStatus(MessageStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public MessageStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setTimeOfDelivery(Date timeOfDelivery) {
        beforePropertyWrite("timeOfDelivery", this.timeOfDelivery, timeOfDelivery);
        this.timeOfDelivery = timeOfDelivery;
    }

    public Date getTimeOfDelivery() {
        beforePropertyRead("timeOfDelivery");
        return this.timeOfDelivery;
    }

    public void setType(MessageType type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public MessageType getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void setMessage(Message message) {
        setToOneTarget("message", message, true);
    }

    public Message getMessage() {
        return (Message)readProperty("message");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "destinationAddress":
                return this.destinationAddress;
            case "modified":
                return this.modified;
            case "numberOfAttempts":
                return this.numberOfAttempts;
            case "response":
                return this.response;
            case "status":
                return this.status;
            case "timeOfDelivery":
                return this.timeOfDelivery;
            case "type":
                return this.type;
            case "college":
                return this.college;
            case "contact":
                return this.contact;
            case "message":
                return this.message;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "destinationAddress":
                this.destinationAddress = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "numberOfAttempts":
                this.numberOfAttempts = (Integer)val;
                break;
            case "response":
                this.response = (String)val;
                break;
            case "status":
                this.status = (MessageStatus)val;
                break;
            case "timeOfDelivery":
                this.timeOfDelivery = (Date)val;
                break;
            case "type":
                this.type = (MessageType)val;
                break;
            case "college":
                this.college = val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "message":
                this.message = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.destinationAddress);
        out.writeObject(this.modified);
        out.writeObject(this.numberOfAttempts);
        out.writeObject(this.response);
        out.writeObject(this.status);
        out.writeObject(this.timeOfDelivery);
        out.writeObject(this.type);
        out.writeObject(this.college);
        out.writeObject(this.contact);
        out.writeObject(this.message);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.destinationAddress = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.numberOfAttempts = (Integer)in.readObject();
        this.response = (String)in.readObject();
        this.status = (MessageStatus)in.readObject();
        this.timeOfDelivery = (Date)in.readObject();
        this.type = (MessageType)in.readObject();
        this.college = in.readObject();
        this.contact = in.readObject();
        this.message = in.readObject();
    }

}
