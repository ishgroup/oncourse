package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.Invoice;
import ish.oncourse.model.LicenseFee;
import ish.oncourse.model.Preference;
import ish.oncourse.model.WebHostName;
import ish.oncourse.model.WebSiteVersion;

/**
 * Class _WebSite was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebSite extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String COURSES_ROOT_TAG_NAME_PROPERTY = "coursesRootTagName";
    public static final String CREATED_PROPERTY = "created";
    public static final String GOOGLE_DIRECTIONS_FROM_PROPERTY = "googleDirectionsFrom";
    public static final String GOOGLE_TAGMANAGER_ACCOUNT_PROPERTY = "googleTagmanagerAccount";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String SITE_KEY_PROPERTY = "siteKey";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COLLEGE_DOMAINS_PROPERTY = "collegeDomains";
    public static final String INVOICES_PROPERTY = "invoices";
    public static final String LICENSE_FEES_PROPERTY = "licenseFees";
    public static final String PREFERENCES_PROPERTY = "preferences";
    public static final String VERSIONS_PROPERTY = "versions";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> COURSES_ROOT_TAG_NAME = Property.create("coursesRootTagName", String.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> GOOGLE_DIRECTIONS_FROM = Property.create("googleDirectionsFrom", String.class);
    public static final Property<String> GOOGLE_TAGMANAGER_ACCOUNT = Property.create("googleTagmanagerAccount", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> SITE_KEY = Property.create("siteKey", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<WebHostName>> COLLEGE_DOMAINS = Property.create("collegeDomains", List.class);
    public static final Property<List<Invoice>> INVOICES = Property.create("invoices", List.class);
    public static final Property<List<LicenseFee>> LICENSE_FEES = Property.create("licenseFees", List.class);
    public static final Property<List<Preference>> PREFERENCES = Property.create("preferences", List.class);
    public static final Property<List<WebSiteVersion>> VERSIONS = Property.create("versions", List.class);

    protected String coursesRootTagName;
    protected Date created;
    protected String googleDirectionsFrom;
    protected String googleTagmanagerAccount;
    protected Date modified;
    protected String name;
    protected String siteKey;

    protected Object college;
    protected Object collegeDomains;
    protected Object invoices;
    protected Object licenseFees;
    protected Object preferences;
    protected Object versions;

    public void setCoursesRootTagName(String coursesRootTagName) {
        beforePropertyWrite("coursesRootTagName", this.coursesRootTagName, coursesRootTagName);
        this.coursesRootTagName = coursesRootTagName;
    }

    public String getCoursesRootTagName() {
        beforePropertyRead("coursesRootTagName");
        return this.coursesRootTagName;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setGoogleDirectionsFrom(String googleDirectionsFrom) {
        beforePropertyWrite("googleDirectionsFrom", this.googleDirectionsFrom, googleDirectionsFrom);
        this.googleDirectionsFrom = googleDirectionsFrom;
    }

    public String getGoogleDirectionsFrom() {
        beforePropertyRead("googleDirectionsFrom");
        return this.googleDirectionsFrom;
    }

    public void setGoogleTagmanagerAccount(String googleTagmanagerAccount) {
        beforePropertyWrite("googleTagmanagerAccount", this.googleTagmanagerAccount, googleTagmanagerAccount);
        this.googleTagmanagerAccount = googleTagmanagerAccount;
    }

    public String getGoogleTagmanagerAccount() {
        beforePropertyRead("googleTagmanagerAccount");
        return this.googleTagmanagerAccount;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setSiteKey(String siteKey) {
        beforePropertyWrite("siteKey", this.siteKey, siteKey);
        this.siteKey = siteKey;
    }

    public String getSiteKey() {
        beforePropertyRead("siteKey");
        return this.siteKey;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToCollegeDomains(WebHostName obj) {
        addToManyTarget("collegeDomains", obj, true);
    }

    public void removeFromCollegeDomains(WebHostName obj) {
        removeToManyTarget("collegeDomains", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebHostName> getCollegeDomains() {
        return (List<WebHostName>)readProperty("collegeDomains");
    }

    public void addToInvoices(Invoice obj) {
        addToManyTarget("invoices", obj, true);
    }

    public void removeFromInvoices(Invoice obj) {
        removeToManyTarget("invoices", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Invoice> getInvoices() {
        return (List<Invoice>)readProperty("invoices");
    }

    public void addToLicenseFees(LicenseFee obj) {
        addToManyTarget("licenseFees", obj, true);
    }

    public void removeFromLicenseFees(LicenseFee obj) {
        removeToManyTarget("licenseFees", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<LicenseFee> getLicenseFees() {
        return (List<LicenseFee>)readProperty("licenseFees");
    }

    public void addToPreferences(Preference obj) {
        addToManyTarget("preferences", obj, true);
    }

    public void removeFromPreferences(Preference obj) {
        removeToManyTarget("preferences", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Preference> getPreferences() {
        return (List<Preference>)readProperty("preferences");
    }

    public void addToVersions(WebSiteVersion obj) {
        addToManyTarget("versions", obj, true);
    }

    public void removeFromVersions(WebSiteVersion obj) {
        removeToManyTarget("versions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebSiteVersion> getVersions() {
        return (List<WebSiteVersion>)readProperty("versions");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "coursesRootTagName":
                return this.coursesRootTagName;
            case "created":
                return this.created;
            case "googleDirectionsFrom":
                return this.googleDirectionsFrom;
            case "googleTagmanagerAccount":
                return this.googleTagmanagerAccount;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "siteKey":
                return this.siteKey;
            case "college":
                return this.college;
            case "collegeDomains":
                return this.collegeDomains;
            case "invoices":
                return this.invoices;
            case "licenseFees":
                return this.licenseFees;
            case "preferences":
                return this.preferences;
            case "versions":
                return this.versions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "coursesRootTagName":
                this.coursesRootTagName = (String)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "googleDirectionsFrom":
                this.googleDirectionsFrom = (String)val;
                break;
            case "googleTagmanagerAccount":
                this.googleTagmanagerAccount = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "siteKey":
                this.siteKey = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "collegeDomains":
                this.collegeDomains = val;
                break;
            case "invoices":
                this.invoices = val;
                break;
            case "licenseFees":
                this.licenseFees = val;
                break;
            case "preferences":
                this.preferences = val;
                break;
            case "versions":
                this.versions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.coursesRootTagName);
        out.writeObject(this.created);
        out.writeObject(this.googleDirectionsFrom);
        out.writeObject(this.googleTagmanagerAccount);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.siteKey);
        out.writeObject(this.college);
        out.writeObject(this.collegeDomains);
        out.writeObject(this.invoices);
        out.writeObject(this.licenseFees);
        out.writeObject(this.preferences);
        out.writeObject(this.versions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.coursesRootTagName = (String)in.readObject();
        this.created = (Date)in.readObject();
        this.googleDirectionsFrom = (String)in.readObject();
        this.googleTagmanagerAccount = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.siteKey = (String)in.readObject();
        this.college = in.readObject();
        this.collegeDomains = in.readObject();
        this.invoices = in.readObject();
        this.licenseFees = in.readObject();
        this.preferences = in.readObject();
        this.versions = in.readObject();
    }

}
