package ish.oncourse.model.auto;

import ish.oncourse.model.WebLayoutPath;
import ish.oncourse.model.WebNodeType;
import ish.oncourse.model.WebSiteVersion;
import ish.oncourse.model.WebTemplate;
import org.apache.cayenne.exp.Property;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

/**
 * Class _WebSiteLayout was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebSiteLayout extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String LAYOUT_KEY_PROPERTY = "layoutKey";
    public static final String TEMPLATES_PROPERTY = "templates";
    public static final String WEB_NODE_TYPES_PROPERTY = "webNodeTypes";
    public static final String WEB_SITE_VERSION_PROPERTY = "webSiteVersion";
    public static final String WEB_LAYOUT_PATHS_PROPERTY = "webLayoutPaths";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> LAYOUT_KEY = Property.create("layoutKey", String.class);
    public static final Property<List<WebTemplate>> TEMPLATES = Property.create("templates", List.class);
    public static final Property<List<WebNodeType>> WEB_NODE_TYPES = Property.create("webNodeTypes", List.class);
    public static final Property<WebSiteVersion> WEB_SITE_VERSION = Property.create("webSiteVersion", WebSiteVersion.class);
    public static final Property<List<WebLayoutPath>> WEB_LAYOUT_PATHS = Property.create("webLayoutPaths", List.class);

    protected String layoutKey;

    protected Object templates;
    protected Object webNodeTypes;
    protected Object webSiteVersion;
    protected Object webLayoutPaths;

    public void setLayoutKey(String layoutKey) {
        beforePropertyWrite("layoutKey", this.layoutKey, layoutKey);
        this.layoutKey = layoutKey;
    }

    public String getLayoutKey() {
        beforePropertyRead("layoutKey");
        return this.layoutKey;
    }

    public void addToTemplates(WebTemplate obj) {
        addToManyTarget("templates", obj, true);
    }

    public void removeFromTemplates(WebTemplate obj) {
        removeToManyTarget("templates", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebTemplate> getTemplates() {
        return (List<WebTemplate>)readProperty("templates");
    }

    public void addToWebNodeTypes(WebNodeType obj) {
        addToManyTarget("webNodeTypes", obj, true);
    }

    public void removeFromWebNodeTypes(WebNodeType obj) {
        removeToManyTarget("webNodeTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebNodeType> getWebNodeTypes() {
        return (List<WebNodeType>)readProperty("webNodeTypes");
    }

    public void setWebSiteVersion(WebSiteVersion webSiteVersion) {
        setToOneTarget("webSiteVersion", webSiteVersion, true);
    }

    public WebSiteVersion getWebSiteVersion() {
        return (WebSiteVersion)readProperty("webSiteVersion");
    }

    public void addToWebLayoutPaths(WebLayoutPath obj) {
        addToManyTarget("webLayoutPaths", obj, true);
    }

    public void removeFromWebLayoutPaths(WebLayoutPath obj) {
        removeToManyTarget("webLayoutPaths", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebLayoutPath> getWebLayoutPaths() {
        return (List<WebLayoutPath>)readProperty("webLayoutPaths");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "layoutKey":
                return this.layoutKey;
            case "templates":
                return this.templates;
            case "webNodeTypes":
                return this.webNodeTypes;
            case "webSiteVersion":
                return this.webSiteVersion;
            case "webLayoutPaths":
                return this.webLayoutPaths;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "layoutKey":
                this.layoutKey = (String)val;
                break;
            case "templates":
                this.templates = val;
                break;
            case "webNodeTypes":
                this.webNodeTypes = val;
                break;
            case "webSiteVersion":
                this.webSiteVersion = val;
                break;
            case "webLayoutPaths":
                this.webLayoutPaths = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.layoutKey);
        out.writeObject(this.templates);
        out.writeObject(this.webNodeTypes);
        out.writeObject(this.webSiteVersion);
        out.writeObject(this.webLayoutPaths);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.layoutKey = (String)in.readObject();
        this.templates = in.readObject();
        this.webNodeTypes = in.readObject();
        this.webSiteVersion = in.readObject();
        this.webLayoutPaths = in.readObject();
    }

}
