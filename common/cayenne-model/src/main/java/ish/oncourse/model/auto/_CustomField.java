package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.CustomFieldType;

/**
 * Class _CustomField was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CustomField extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String ENTITY_NAME_PROPERTY = "entityName";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String VALUE_PROPERTY = "value";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CUSTOM_FIELD_TYPE_PROPERTY = "customFieldType";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> ENTITY_NAME = Property.create("entityName", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> VALUE = Property.create("value", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<CustomFieldType> CUSTOM_FIELD_TYPE = Property.create("customFieldType", CustomFieldType.class);

    protected Long angelId;
    protected Date created;
    protected String entityName;
    protected Date modified;
    protected String value;

    protected Object college;
    protected Object customFieldType;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setEntityName(String entityName) {
        beforePropertyWrite("entityName", this.entityName, entityName);
        this.entityName = entityName;
    }

    public String getEntityName() {
        beforePropertyRead("entityName");
        return this.entityName;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setValue(String value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public String getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCustomFieldType(CustomFieldType customFieldType) {
        setToOneTarget("customFieldType", customFieldType, true);
    }

    public CustomFieldType getCustomFieldType() {
        return (CustomFieldType)readProperty("customFieldType");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "entityName":
                return this.entityName;
            case "modified":
                return this.modified;
            case "value":
                return this.value;
            case "college":
                return this.college;
            case "customFieldType":
                return this.customFieldType;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "entityName":
                this.entityName = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "value":
                this.value = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "customFieldType":
                this.customFieldType = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.entityName);
        out.writeObject(this.modified);
        out.writeObject(this.value);
        out.writeObject(this.college);
        out.writeObject(this.customFieldType);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.entityName = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.value = (String)in.readObject();
        this.college = in.readObject();
        this.customFieldType = in.readObject();
    }

}
