package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.Session;
import ish.oncourse.model.Student;
import ish.oncourse.model.Tutor;

/**
 * Class _Attendance was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Attendance extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String ATTENDANCE_TYPE_PROPERTY = "attendanceType";
    public static final String ATTENDED_FROM_PROPERTY = "attendedFrom";
    public static final String ATTENDED_UNTIL_PROPERTY = "attendedUntil";
    public static final String CREATED_PROPERTY = "created";
    public static final String DURATION_MINUTES_PROPERTY = "durationMinutes";
    public static final String MARKED_BY_TUTOR_DATE_PROPERTY = "markedByTutorDate";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NOTE_PROPERTY = "note";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String MARKED_BY_TUTOR_PROPERTY = "markedByTutor";
    public static final String SESSION_PROPERTY = "session";
    public static final String STUDENT_PROPERTY = "student";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Integer> ATTENDANCE_TYPE = Property.create("attendanceType", Integer.class);
    public static final Property<Date> ATTENDED_FROM = Property.create("attendedFrom", Date.class);
    public static final Property<Date> ATTENDED_UNTIL = Property.create("attendedUntil", Date.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Integer> DURATION_MINUTES = Property.create("durationMinutes", Integer.class);
    public static final Property<Date> MARKED_BY_TUTOR_DATE = Property.create("markedByTutorDate", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NOTE = Property.create("note", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Tutor> MARKED_BY_TUTOR = Property.create("markedByTutor", Tutor.class);
    public static final Property<Session> SESSION = Property.create("session", Session.class);
    public static final Property<Student> STUDENT = Property.create("student", Student.class);

    protected Long angelId;
    protected Integer attendanceType;
    protected Date attendedFrom;
    protected Date attendedUntil;
    protected Date created;
    protected Integer durationMinutes;
    protected Date markedByTutorDate;
    protected Date modified;
    protected String note;

    protected Object college;
    protected Object markedByTutor;
    protected Object session;
    protected Object student;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setAttendanceType(Integer attendanceType) {
        beforePropertyWrite("attendanceType", this.attendanceType, attendanceType);
        this.attendanceType = attendanceType;
    }

    public Integer getAttendanceType() {
        beforePropertyRead("attendanceType");
        return this.attendanceType;
    }

    public void setAttendedFrom(Date attendedFrom) {
        beforePropertyWrite("attendedFrom", this.attendedFrom, attendedFrom);
        this.attendedFrom = attendedFrom;
    }

    public Date getAttendedFrom() {
        beforePropertyRead("attendedFrom");
        return this.attendedFrom;
    }

    public void setAttendedUntil(Date attendedUntil) {
        beforePropertyWrite("attendedUntil", this.attendedUntil, attendedUntil);
        this.attendedUntil = attendedUntil;
    }

    public Date getAttendedUntil() {
        beforePropertyRead("attendedUntil");
        return this.attendedUntil;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDurationMinutes(Integer durationMinutes) {
        beforePropertyWrite("durationMinutes", this.durationMinutes, durationMinutes);
        this.durationMinutes = durationMinutes;
    }

    public Integer getDurationMinutes() {
        beforePropertyRead("durationMinutes");
        return this.durationMinutes;
    }

    public void setMarkedByTutorDate(Date markedByTutorDate) {
        beforePropertyWrite("markedByTutorDate", this.markedByTutorDate, markedByTutorDate);
        this.markedByTutorDate = markedByTutorDate;
    }

    public Date getMarkedByTutorDate() {
        beforePropertyRead("markedByTutorDate");
        return this.markedByTutorDate;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setNote(String note) {
        beforePropertyWrite("note", this.note, note);
        this.note = note;
    }

    public String getNote() {
        beforePropertyRead("note");
        return this.note;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setMarkedByTutor(Tutor markedByTutor) {
        setToOneTarget("markedByTutor", markedByTutor, true);
    }

    public Tutor getMarkedByTutor() {
        return (Tutor)readProperty("markedByTutor");
    }

    public void setSession(Session session) {
        setToOneTarget("session", session, true);
    }

    public Session getSession() {
        return (Session)readProperty("session");
    }

    public void setStudent(Student student) {
        setToOneTarget("student", student, true);
    }

    public Student getStudent() {
        return (Student)readProperty("student");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "attendanceType":
                return this.attendanceType;
            case "attendedFrom":
                return this.attendedFrom;
            case "attendedUntil":
                return this.attendedUntil;
            case "created":
                return this.created;
            case "durationMinutes":
                return this.durationMinutes;
            case "markedByTutorDate":
                return this.markedByTutorDate;
            case "modified":
                return this.modified;
            case "note":
                return this.note;
            case "college":
                return this.college;
            case "markedByTutor":
                return this.markedByTutor;
            case "session":
                return this.session;
            case "student":
                return this.student;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "attendanceType":
                this.attendanceType = (Integer)val;
                break;
            case "attendedFrom":
                this.attendedFrom = (Date)val;
                break;
            case "attendedUntil":
                this.attendedUntil = (Date)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "durationMinutes":
                this.durationMinutes = (Integer)val;
                break;
            case "markedByTutorDate":
                this.markedByTutorDate = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "note":
                this.note = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "markedByTutor":
                this.markedByTutor = val;
                break;
            case "session":
                this.session = val;
                break;
            case "student":
                this.student = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.attendanceType);
        out.writeObject(this.attendedFrom);
        out.writeObject(this.attendedUntil);
        out.writeObject(this.created);
        out.writeObject(this.durationMinutes);
        out.writeObject(this.markedByTutorDate);
        out.writeObject(this.modified);
        out.writeObject(this.note);
        out.writeObject(this.college);
        out.writeObject(this.markedByTutor);
        out.writeObject(this.session);
        out.writeObject(this.student);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.attendanceType = (Integer)in.readObject();
        this.attendedFrom = (Date)in.readObject();
        this.attendedUntil = (Date)in.readObject();
        this.created = (Date)in.readObject();
        this.durationMinutes = (Integer)in.readObject();
        this.markedByTutorDate = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.note = (String)in.readObject();
        this.college = in.readObject();
        this.markedByTutor = in.readObject();
        this.session = in.readObject();
        this.student = in.readObject();
    }

}
