package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.QueuedRecordAction;
import ish.oncourse.model.QueuedTransaction;

/**
 * Class _QueuedRecord was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QueuedRecord extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ACTION_PROPERTY = "action";
    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String ENTITY_IDENTIFIER_PROPERTY = "entityIdentifier";
    public static final String ENTITY_WILLOW_ID_PROPERTY = "entityWillowId";
    public static final String ERROR_MESSAGE_PROPERTY = "errorMessage";
    public static final String LAST_ATTEMPT_TIMESTAMP_PROPERTY = "lastAttemptTimestamp";
    public static final String NUMBER_OF_ATTEMPTS_PROPERTY = "numberOfAttempts";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String QUEUED_TRANSACTION_PROPERTY = "queuedTransaction";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<QueuedRecordAction> ACTION = Property.create("action", QueuedRecordAction.class);
    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> ENTITY_IDENTIFIER = Property.create("entityIdentifier", String.class);
    public static final Property<Long> ENTITY_WILLOW_ID = Property.create("entityWillowId", Long.class);
    public static final Property<String> ERROR_MESSAGE = Property.create("errorMessage", String.class);
    public static final Property<Date> LAST_ATTEMPT_TIMESTAMP = Property.create("lastAttemptTimestamp", Date.class);
    public static final Property<Integer> NUMBER_OF_ATTEMPTS = Property.create("numberOfAttempts", Integer.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<QueuedTransaction> QUEUED_TRANSACTION = Property.create("queuedTransaction", QueuedTransaction.class);

    protected QueuedRecordAction action;
    protected Long angelId;
    protected String entityIdentifier;
    protected Long entityWillowId;
    protected String errorMessage;
    protected Date lastAttemptTimestamp;
    protected Integer numberOfAttempts;

    protected Object college;
    protected Object queuedTransaction;

    public void setAction(QueuedRecordAction action) {
        beforePropertyWrite("action", this.action, action);
        this.action = action;
    }

    public QueuedRecordAction getAction() {
        beforePropertyRead("action");
        return this.action;
    }

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setEntityIdentifier(String entityIdentifier) {
        beforePropertyWrite("entityIdentifier", this.entityIdentifier, entityIdentifier);
        this.entityIdentifier = entityIdentifier;
    }

    public String getEntityIdentifier() {
        beforePropertyRead("entityIdentifier");
        return this.entityIdentifier;
    }

    public void setEntityWillowId(Long entityWillowId) {
        beforePropertyWrite("entityWillowId", this.entityWillowId, entityWillowId);
        this.entityWillowId = entityWillowId;
    }

    public Long getEntityWillowId() {
        beforePropertyRead("entityWillowId");
        return this.entityWillowId;
    }

    public void setErrorMessage(String errorMessage) {
        beforePropertyWrite("errorMessage", this.errorMessage, errorMessage);
        this.errorMessage = errorMessage;
    }

    public String getErrorMessage() {
        beforePropertyRead("errorMessage");
        return this.errorMessage;
    }

    public void setLastAttemptTimestamp(Date lastAttemptTimestamp) {
        beforePropertyWrite("lastAttemptTimestamp", this.lastAttemptTimestamp, lastAttemptTimestamp);
        this.lastAttemptTimestamp = lastAttemptTimestamp;
    }

    public Date getLastAttemptTimestamp() {
        beforePropertyRead("lastAttemptTimestamp");
        return this.lastAttemptTimestamp;
    }

    public void setNumberOfAttempts(Integer numberOfAttempts) {
        beforePropertyWrite("numberOfAttempts", this.numberOfAttempts, numberOfAttempts);
        this.numberOfAttempts = numberOfAttempts;
    }

    public Integer getNumberOfAttempts() {
        beforePropertyRead("numberOfAttempts");
        return this.numberOfAttempts;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setQueuedTransaction(QueuedTransaction queuedTransaction) {
        setToOneTarget("queuedTransaction", queuedTransaction, true);
    }

    public QueuedTransaction getQueuedTransaction() {
        return (QueuedTransaction)readProperty("queuedTransaction");
    }

    protected abstract void onPreRemove();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "action":
                return this.action;
            case "angelId":
                return this.angelId;
            case "entityIdentifier":
                return this.entityIdentifier;
            case "entityWillowId":
                return this.entityWillowId;
            case "errorMessage":
                return this.errorMessage;
            case "lastAttemptTimestamp":
                return this.lastAttemptTimestamp;
            case "numberOfAttempts":
                return this.numberOfAttempts;
            case "college":
                return this.college;
            case "queuedTransaction":
                return this.queuedTransaction;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "action":
                this.action = (QueuedRecordAction)val;
                break;
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "entityIdentifier":
                this.entityIdentifier = (String)val;
                break;
            case "entityWillowId":
                this.entityWillowId = (Long)val;
                break;
            case "errorMessage":
                this.errorMessage = (String)val;
                break;
            case "lastAttemptTimestamp":
                this.lastAttemptTimestamp = (Date)val;
                break;
            case "numberOfAttempts":
                this.numberOfAttempts = (Integer)val;
                break;
            case "college":
                this.college = val;
                break;
            case "queuedTransaction":
                this.queuedTransaction = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.action);
        out.writeObject(this.angelId);
        out.writeObject(this.entityIdentifier);
        out.writeObject(this.entityWillowId);
        out.writeObject(this.errorMessage);
        out.writeObject(this.lastAttemptTimestamp);
        out.writeObject(this.numberOfAttempts);
        out.writeObject(this.college);
        out.writeObject(this.queuedTransaction);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.action = (QueuedRecordAction)in.readObject();
        this.angelId = (Long)in.readObject();
        this.entityIdentifier = (String)in.readObject();
        this.entityWillowId = (Long)in.readObject();
        this.errorMessage = (String)in.readObject();
        this.lastAttemptTimestamp = (Date)in.readObject();
        this.numberOfAttempts = (Integer)in.readObject();
        this.college = in.readObject();
        this.queuedTransaction = in.readObject();
    }

}
