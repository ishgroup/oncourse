package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.common.types.VoucherPaymentStatus;
import ish.oncourse.model.College;
import ish.oncourse.model.InvoiceLine;
import ish.oncourse.model.PaymentIn;
import ish.oncourse.model.Voucher;

/**
 * Class _VoucherPaymentIn was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _VoucherPaymentIn extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String ENROLMENTS_COUNT_PROPERTY = "enrolmentsCount";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String STATUS_PROPERTY = "status";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String INVOICE_LINE_PROPERTY = "invoiceLine";
    public static final String PAYMENT_PROPERTY = "payment";
    public static final String VOUCHER_PROPERTY = "voucher";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Integer> ENROLMENTS_COUNT = Property.create("enrolmentsCount", Integer.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<VoucherPaymentStatus> STATUS = Property.create("status", VoucherPaymentStatus.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<InvoiceLine> INVOICE_LINE = Property.create("invoiceLine", InvoiceLine.class);
    public static final Property<PaymentIn> PAYMENT = Property.create("payment", PaymentIn.class);
    public static final Property<Voucher> VOUCHER = Property.create("voucher", Voucher.class);

    protected Long angelId;
    protected Date created;
    protected Integer enrolmentsCount;
    protected Date modified;
    protected VoucherPaymentStatus status;

    protected Object college;
    protected Object invoiceLine;
    protected Object payment;
    protected Object voucher;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setEnrolmentsCount(Integer enrolmentsCount) {
        beforePropertyWrite("enrolmentsCount", this.enrolmentsCount, enrolmentsCount);
        this.enrolmentsCount = enrolmentsCount;
    }

    public Integer getEnrolmentsCount() {
        beforePropertyRead("enrolmentsCount");
        return this.enrolmentsCount;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setStatus(VoucherPaymentStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public VoucherPaymentStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setInvoiceLine(InvoiceLine invoiceLine) {
        setToOneTarget("invoiceLine", invoiceLine, true);
    }

    public InvoiceLine getInvoiceLine() {
        return (InvoiceLine)readProperty("invoiceLine");
    }

    public void setPayment(PaymentIn payment) {
        setToOneTarget("payment", payment, true);
    }

    public PaymentIn getPayment() {
        return (PaymentIn)readProperty("payment");
    }

    public void setVoucher(Voucher voucher) {
        setToOneTarget("voucher", voucher, true);
    }

    public Voucher getVoucher() {
        return (Voucher)readProperty("voucher");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "enrolmentsCount":
                return this.enrolmentsCount;
            case "modified":
                return this.modified;
            case "status":
                return this.status;
            case "college":
                return this.college;
            case "invoiceLine":
                return this.invoiceLine;
            case "payment":
                return this.payment;
            case "voucher":
                return this.voucher;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "enrolmentsCount":
                this.enrolmentsCount = (Integer)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "status":
                this.status = (VoucherPaymentStatus)val;
                break;
            case "college":
                this.college = val;
                break;
            case "invoiceLine":
                this.invoiceLine = val;
                break;
            case "payment":
                this.payment = val;
                break;
            case "voucher":
                this.voucher = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.enrolmentsCount);
        out.writeObject(this.modified);
        out.writeObject(this.status);
        out.writeObject(this.college);
        out.writeObject(this.invoiceLine);
        out.writeObject(this.payment);
        out.writeObject(this.voucher);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.enrolmentsCount = (Integer)in.readObject();
        this.modified = (Date)in.readObject();
        this.status = (VoucherPaymentStatus)in.readObject();
        this.college = in.readObject();
        this.invoiceLine = in.readObject();
        this.payment = in.readObject();
        this.voucher = in.readObject();
    }

}
