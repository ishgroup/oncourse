package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.ExpiryType;
import ish.math.Money;
import ish.oncourse.model.College;
import ish.oncourse.model.ProductItem;

/**
 * Class _Product was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Product extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String EXPIRY_DAYS_PROPERTY = "expiryDays";
    public static final String EXPIRY_TYPE_PROPERTY = "expiryType";
    public static final String IS_ON_SALE_PROPERTY = "isOnSale";
    public static final String IS_WEB_VISIBLE_PROPERTY = "isWebVisible";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String NOTES_PROPERTY = "notes";
    public static final String PRICE_EX_TAX_PROPERTY = "priceExTax";
    public static final String SKU_PROPERTY = "sku";
    public static final String TAX_ADJUSTMENT_PROPERTY = "taxAdjustment";
    public static final String TAX_AMOUNT_PROPERTY = "taxAmount";
    public static final String TYPE_PROPERTY = "type";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String PRODUCT_ITEMS_PROPERTY = "productItems";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Integer> EXPIRY_DAYS = Property.create("expiryDays", Integer.class);
    public static final Property<ExpiryType> EXPIRY_TYPE = Property.create("expiryType", ExpiryType.class);
    public static final Property<Boolean> IS_ON_SALE = Property.create("isOnSale", Boolean.class);
    public static final Property<Boolean> IS_WEB_VISIBLE = Property.create("isWebVisible", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);
    public static final Property<Money> PRICE_EX_TAX = Property.create("priceExTax", Money.class);
    public static final Property<String> SKU = Property.create("sku", String.class);
    public static final Property<Money> TAX_ADJUSTMENT = Property.create("taxAdjustment", Money.class);
    public static final Property<Money> TAX_AMOUNT = Property.create("taxAmount", Money.class);
    public static final Property<Integer> TYPE = Property.create("type", Integer.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<ProductItem>> PRODUCT_ITEMS = Property.create("productItems", List.class);

    protected Long angelId;
    protected Date created;
    protected String description;
    protected Integer expiryDays;
    protected ExpiryType expiryType;
    protected Boolean isOnSale;
    protected Boolean isWebVisible;
    protected Date modified;
    protected String name;
    protected String notes;
    protected Money priceExTax;
    protected String sku;
    protected Money taxAdjustment;
    protected Money taxAmount;
    protected Integer type;

    protected Object college;
    protected Object productItems;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setExpiryDays(Integer expiryDays) {
        beforePropertyWrite("expiryDays", this.expiryDays, expiryDays);
        this.expiryDays = expiryDays;
    }

    public Integer getExpiryDays() {
        beforePropertyRead("expiryDays");
        return this.expiryDays;
    }

    public void setExpiryType(ExpiryType expiryType) {
        beforePropertyWrite("expiryType", this.expiryType, expiryType);
        this.expiryType = expiryType;
    }

    public ExpiryType getExpiryType() {
        beforePropertyRead("expiryType");
        return this.expiryType;
    }

    public void setIsOnSale(Boolean isOnSale) {
        beforePropertyWrite("isOnSale", this.isOnSale, isOnSale);
        this.isOnSale = isOnSale;
    }

    public Boolean getIsOnSale() {
        beforePropertyRead("isOnSale");
        return this.isOnSale;
    }

    public void setIsWebVisible(Boolean isWebVisible) {
        beforePropertyWrite("isWebVisible", this.isWebVisible, isWebVisible);
        this.isWebVisible = isWebVisible;
    }

    public Boolean getIsWebVisible() {
        beforePropertyRead("isWebVisible");
        return this.isWebVisible;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    public void setPriceExTax(Money priceExTax) {
        beforePropertyWrite("priceExTax", this.priceExTax, priceExTax);
        this.priceExTax = priceExTax;
    }

    public Money getPriceExTax() {
        beforePropertyRead("priceExTax");
        return this.priceExTax;
    }

    public void setSku(String sku) {
        beforePropertyWrite("sku", this.sku, sku);
        this.sku = sku;
    }

    public String getSku() {
        beforePropertyRead("sku");
        return this.sku;
    }

    public void setTaxAdjustment(Money taxAdjustment) {
        beforePropertyWrite("taxAdjustment", this.taxAdjustment, taxAdjustment);
        this.taxAdjustment = taxAdjustment;
    }

    public Money getTaxAdjustment() {
        beforePropertyRead("taxAdjustment");
        return this.taxAdjustment;
    }

    public void setTaxAmount(Money taxAmount) {
        beforePropertyWrite("taxAmount", this.taxAmount, taxAmount);
        this.taxAmount = taxAmount;
    }

    public Money getTaxAmount() {
        beforePropertyRead("taxAmount");
        return this.taxAmount;
    }

    public void setType(Integer type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public Integer getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToProductItems(ProductItem obj) {
        addToManyTarget("productItems", obj, true);
    }

    public void removeFromProductItems(ProductItem obj) {
        removeToManyTarget("productItems", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ProductItem> getProductItems() {
        return (List<ProductItem>)readProperty("productItems");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "description":
                return this.description;
            case "expiryDays":
                return this.expiryDays;
            case "expiryType":
                return this.expiryType;
            case "isOnSale":
                return this.isOnSale;
            case "isWebVisible":
                return this.isWebVisible;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "notes":
                return this.notes;
            case "priceExTax":
                return this.priceExTax;
            case "sku":
                return this.sku;
            case "taxAdjustment":
                return this.taxAdjustment;
            case "taxAmount":
                return this.taxAmount;
            case "type":
                return this.type;
            case "college":
                return this.college;
            case "productItems":
                return this.productItems;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "expiryDays":
                this.expiryDays = (Integer)val;
                break;
            case "expiryType":
                this.expiryType = (ExpiryType)val;
                break;
            case "isOnSale":
                this.isOnSale = (Boolean)val;
                break;
            case "isWebVisible":
                this.isWebVisible = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            case "priceExTax":
                this.priceExTax = (Money)val;
                break;
            case "sku":
                this.sku = (String)val;
                break;
            case "taxAdjustment":
                this.taxAdjustment = (Money)val;
                break;
            case "taxAmount":
                this.taxAmount = (Money)val;
                break;
            case "type":
                this.type = (Integer)val;
                break;
            case "college":
                this.college = val;
                break;
            case "productItems":
                this.productItems = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.description);
        out.writeObject(this.expiryDays);
        out.writeObject(this.expiryType);
        out.writeObject(this.isOnSale);
        out.writeObject(this.isWebVisible);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.notes);
        out.writeObject(this.priceExTax);
        out.writeObject(this.sku);
        out.writeObject(this.taxAdjustment);
        out.writeObject(this.taxAmount);
        out.writeObject(this.type);
        out.writeObject(this.college);
        out.writeObject(this.productItems);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.expiryDays = (Integer)in.readObject();
        this.expiryType = (ExpiryType)in.readObject();
        this.isOnSale = (Boolean)in.readObject();
        this.isWebVisible = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.notes = (String)in.readObject();
        this.priceExTax = (Money)in.readObject();
        this.sku = (String)in.readObject();
        this.taxAdjustment = (Money)in.readObject();
        this.taxAmount = (Money)in.readObject();
        this.type = (Integer)in.readObject();
        this.college = in.readObject();
        this.productItems = in.readObject();
    }

}
