package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.Course;
import ish.oncourse.model.EntityRelation;
import ish.oncourse.model.Product;

/**
 * Class _ProductCourseRelation was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ProductCourseRelation extends EntityRelation {

    private static final long serialVersionUID = 1L; 

    public static final String FROM_PRODUCT_PROPERTY = "fromProduct";
    public static final String TO_COURSE_PROPERTY = "toCourse";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Product> FROM_PRODUCT = Property.create("fromProduct", Product.class);
    public static final Property<Course> TO_COURSE = Property.create("toCourse", Course.class);


    protected Object fromProduct;
    protected Object toCourse;

    public void setFromProduct(Product fromProduct) {
        setToOneTarget("fromProduct", fromProduct, true);
    }

    public Product getFromProduct() {
        return (Product)readProperty("fromProduct");
    }

    public void setToCourse(Course toCourse) {
        setToOneTarget("toCourse", toCourse, true);
    }

    public Course getToCourse() {
        return (Course)readProperty("toCourse");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "fromProduct":
                return this.fromProduct;
            case "toCourse":
                return this.toCourse;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "fromProduct":
                this.fromProduct = val;
                break;
            case "toCourse":
                this.toCourse = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.fromProduct);
        out.writeObject(this.toCourse);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.fromProduct = in.readObject();
        this.toCourse = in.readObject();
    }

}
