package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.CustomField;

/**
 * Class _CustomFieldType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CustomFieldType extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DEFAULT_VALUE_PROPERTY = "defaultValue";
    public static final String ENTITY_NAME_PROPERTY = "entityName";
    public static final String IS_MANDATORY_PROPERTY = "isMandatory";
    public static final String KEY_PROPERTY = "key";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String REQUIRE_FOR_ENROLMENT_PROPERTY = "requireForEnrolment";
    public static final String REQUIRE_FOR_MAILING_LIST_PROPERTY = "requireForMailingList";
    public static final String REQUIRE_FOR_WAITING_LIST_PROPERTY = "requireForWaitingList";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DEFAULT_VALUE = Property.create("defaultValue", String.class);
    public static final Property<String> ENTITY_NAME = Property.create("entityName", String.class);
    public static final Property<Boolean> IS_MANDATORY = Property.create("isMandatory", Boolean.class);
    public static final Property<String> KEY = Property.create("key", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> REQUIRE_FOR_ENROLMENT = Property.create("requireForEnrolment", String.class);
    public static final Property<String> REQUIRE_FOR_MAILING_LIST = Property.create("requireForMailingList", String.class);
    public static final Property<String> REQUIRE_FOR_WAITING_LIST = Property.create("requireForWaitingList", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<CustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);

    protected Long angelId;
    protected Date created;
    protected String defaultValue;
    protected String entityName;
    protected Boolean isMandatory;
    protected String key;
    protected Date modified;
    protected String name;
    protected String requireForEnrolment;
    protected String requireForMailingList;
    protected String requireForWaitingList;

    protected Object college;
    protected Object customFields;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDefaultValue(String defaultValue) {
        beforePropertyWrite("defaultValue", this.defaultValue, defaultValue);
        this.defaultValue = defaultValue;
    }

    public String getDefaultValue() {
        beforePropertyRead("defaultValue");
        return this.defaultValue;
    }

    public void setEntityName(String entityName) {
        beforePropertyWrite("entityName", this.entityName, entityName);
        this.entityName = entityName;
    }

    public String getEntityName() {
        beforePropertyRead("entityName");
        return this.entityName;
    }

    public void setIsMandatory(Boolean isMandatory) {
        beforePropertyWrite("isMandatory", this.isMandatory, isMandatory);
        this.isMandatory = isMandatory;
    }

    public Boolean getIsMandatory() {
        beforePropertyRead("isMandatory");
        return this.isMandatory;
    }

    public void setKey(String key) {
        beforePropertyWrite("key", this.key, key);
        this.key = key;
    }

    public String getKey() {
        beforePropertyRead("key");
        return this.key;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setRequireForEnrolment(String requireForEnrolment) {
        beforePropertyWrite("requireForEnrolment", this.requireForEnrolment, requireForEnrolment);
        this.requireForEnrolment = requireForEnrolment;
    }

    public String getRequireForEnrolment() {
        beforePropertyRead("requireForEnrolment");
        return this.requireForEnrolment;
    }

    public void setRequireForMailingList(String requireForMailingList) {
        beforePropertyWrite("requireForMailingList", this.requireForMailingList, requireForMailingList);
        this.requireForMailingList = requireForMailingList;
    }

    public String getRequireForMailingList() {
        beforePropertyRead("requireForMailingList");
        return this.requireForMailingList;
    }

    public void setRequireForWaitingList(String requireForWaitingList) {
        beforePropertyWrite("requireForWaitingList", this.requireForWaitingList, requireForWaitingList);
        this.requireForWaitingList = requireForWaitingList;
    }

    public String getRequireForWaitingList() {
        beforePropertyRead("requireForWaitingList");
        return this.requireForWaitingList;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToCustomFields(CustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(CustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CustomField> getCustomFields() {
        return (List<CustomField>)readProperty("customFields");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "defaultValue":
                return this.defaultValue;
            case "entityName":
                return this.entityName;
            case "isMandatory":
                return this.isMandatory;
            case "key":
                return this.key;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "requireForEnrolment":
                return this.requireForEnrolment;
            case "requireForMailingList":
                return this.requireForMailingList;
            case "requireForWaitingList":
                return this.requireForWaitingList;
            case "college":
                return this.college;
            case "customFields":
                return this.customFields;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "defaultValue":
                this.defaultValue = (String)val;
                break;
            case "entityName":
                this.entityName = (String)val;
                break;
            case "isMandatory":
                this.isMandatory = (Boolean)val;
                break;
            case "key":
                this.key = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "requireForEnrolment":
                this.requireForEnrolment = (String)val;
                break;
            case "requireForMailingList":
                this.requireForMailingList = (String)val;
                break;
            case "requireForWaitingList":
                this.requireForWaitingList = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.defaultValue);
        out.writeObject(this.entityName);
        out.writeObject(this.isMandatory);
        out.writeObject(this.key);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.requireForEnrolment);
        out.writeObject(this.requireForMailingList);
        out.writeObject(this.requireForWaitingList);
        out.writeObject(this.college);
        out.writeObject(this.customFields);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.defaultValue = (String)in.readObject();
        this.entityName = (String)in.readObject();
        this.isMandatory = (Boolean)in.readObject();
        this.key = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.requireForEnrolment = (String)in.readObject();
        this.requireForMailingList = (String)in.readObject();
        this.requireForWaitingList = (String)in.readObject();
        this.college = in.readObject();
        this.customFields = in.readObject();
    }

}
