package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

/**
 * Class _DiscussionComment was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DiscussionComment extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String BODY_PROPERTY = "body";
    public static final String DISCUSSION_THREAD_ID_PROPERTY = "discussionThreadId";
    public static final String IS_DELETED_PROPERTY = "isDeleted";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> BODY = Property.create("body", String.class);
    public static final Property<Long> DISCUSSION_THREAD_ID = Property.create("discussionThreadId", Long.class);
    public static final Property<Boolean> IS_DELETED = Property.create("isDeleted", Boolean.class);

    protected String body;
    protected Long discussionThreadId;
    protected Boolean isDeleted;


    public void setBody(String body) {
        beforePropertyWrite("body", this.body, body);
        this.body = body;
    }

    public String getBody() {
        beforePropertyRead("body");
        return this.body;
    }

    public void setDiscussionThreadId(Long discussionThreadId) {
        beforePropertyWrite("discussionThreadId", this.discussionThreadId, discussionThreadId);
        this.discussionThreadId = discussionThreadId;
    }

    public Long getDiscussionThreadId() {
        beforePropertyRead("discussionThreadId");
        return this.discussionThreadId;
    }

    public void setIsDeleted(Boolean isDeleted) {
        beforePropertyWrite("isDeleted", this.isDeleted, isDeleted);
        this.isDeleted = isDeleted;
    }

    public Boolean getIsDeleted() {
        beforePropertyRead("isDeleted");
        return this.isDeleted;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "body":
                return this.body;
            case "discussionThreadId":
                return this.discussionThreadId;
            case "isDeleted":
                return this.isDeleted;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "body":
                this.body = (String)val;
                break;
            case "discussionThreadId":
                this.discussionThreadId = (Long)val;
                break;
            case "isDeleted":
                this.isDeleted = (Boolean)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.body);
        out.writeObject(this.discussionThreadId);
        out.writeObject(this.isDeleted);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.body = (String)in.readObject();
        this.discussionThreadId = (Long)in.readObject();
        this.isDeleted = (Boolean)in.readObject();
    }

}
