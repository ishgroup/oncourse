package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.AssessmentClass;
import ish.oncourse.model.College;
import ish.oncourse.model.Contact;
import ish.oncourse.model.Enrolment;

/**
 * Class _AssessmentSubmission was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AssessmentSubmission extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String STUDENT_COMMENTS_PROPERTY = "studentComments";
    public static final String TUTOR_COMMENTS_PROPERTY = "tutorComments";
    public static final String ASSESSMENT_CLASS_PROPERTY = "assessmentClass";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String ENROLMENT_PROPERTY = "enrolment";
    public static final String SUBMITTED_BY_PROPERTY = "submittedBy";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> STUDENT_COMMENTS = Property.create("studentComments", String.class);
    public static final Property<String> TUTOR_COMMENTS = Property.create("tutorComments", String.class);
    public static final Property<AssessmentClass> ASSESSMENT_CLASS = Property.create("assessmentClass", AssessmentClass.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Enrolment> ENROLMENT = Property.create("enrolment", Enrolment.class);
    public static final Property<Contact> SUBMITTED_BY = Property.create("submittedBy", Contact.class);

    protected Long angelId;
    protected Date created;
    protected Date modified;
    protected String studentComments;
    protected String tutorComments;

    protected Object assessmentClass;
    protected Object college;
    protected Object enrolment;
    protected Object submittedBy;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setStudentComments(String studentComments) {
        beforePropertyWrite("studentComments", this.studentComments, studentComments);
        this.studentComments = studentComments;
    }

    public String getStudentComments() {
        beforePropertyRead("studentComments");
        return this.studentComments;
    }

    public void setTutorComments(String tutorComments) {
        beforePropertyWrite("tutorComments", this.tutorComments, tutorComments);
        this.tutorComments = tutorComments;
    }

    public String getTutorComments() {
        beforePropertyRead("tutorComments");
        return this.tutorComments;
    }

    public void setAssessmentClass(AssessmentClass assessmentClass) {
        setToOneTarget("assessmentClass", assessmentClass, true);
    }

    public AssessmentClass getAssessmentClass() {
        return (AssessmentClass)readProperty("assessmentClass");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setEnrolment(Enrolment enrolment) {
        setToOneTarget("enrolment", enrolment, true);
    }

    public Enrolment getEnrolment() {
        return (Enrolment)readProperty("enrolment");
    }

    public void setSubmittedBy(Contact submittedBy) {
        setToOneTarget("submittedBy", submittedBy, true);
    }

    public Contact getSubmittedBy() {
        return (Contact)readProperty("submittedBy");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "modified":
                return this.modified;
            case "studentComments":
                return this.studentComments;
            case "tutorComments":
                return this.tutorComments;
            case "assessmentClass":
                return this.assessmentClass;
            case "college":
                return this.college;
            case "enrolment":
                return this.enrolment;
            case "submittedBy":
                return this.submittedBy;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "studentComments":
                this.studentComments = (String)val;
                break;
            case "tutorComments":
                this.tutorComments = (String)val;
                break;
            case "assessmentClass":
                this.assessmentClass = val;
                break;
            case "college":
                this.college = val;
                break;
            case "enrolment":
                this.enrolment = val;
                break;
            case "submittedBy":
                this.submittedBy = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.modified);
        out.writeObject(this.studentComments);
        out.writeObject(this.tutorComments);
        out.writeObject(this.assessmentClass);
        out.writeObject(this.college);
        out.writeObject(this.enrolment);
        out.writeObject(this.submittedBy);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.studentComments = (String)in.readObject();
        this.tutorComments = (String)in.readObject();
        this.assessmentClass = in.readObject();
        this.college = in.readObject();
        this.enrolment = in.readObject();
        this.submittedBy = in.readObject();
    }

}
