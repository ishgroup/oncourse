package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.math.Money;
import ish.oncourse.model.College;
import ish.oncourse.model.CourseClass;
import ish.oncourse.model.Enrolment;
import ish.oncourse.model.Invoice;
import ish.oncourse.model.InvoiceLineDiscount;
import ish.oncourse.model.InvoicePayableLine;
import ish.oncourse.model.ProductItem;
import ish.oncourse.model.VoucherPaymentIn;

/**
 * Class _InvoiceLine was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _InvoiceLine extends InvoicePayableLine {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String DISCOUNT_EACH_EX_TAX_PROPERTY = "discountEachExTax";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PRICE_EACH_EX_TAX_PROPERTY = "priceEachExTax";
    public static final String QUANTITY_PROPERTY = "quantity";
    public static final String SORT_ORDER_PROPERTY = "sortOrder";
    public static final String TAX_EACH_PROPERTY = "taxEach";
    public static final String TITLE_PROPERTY = "title";
    public static final String UNIT_PROPERTY = "unit";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_CLASS_PROPERTY = "courseClass";
    public static final String ENROLMENT_PROPERTY = "enrolment";
    public static final String INVOICE_PROPERTY = "invoice";
    public static final String INVOICE_LINE_DISCOUNTS_PROPERTY = "invoiceLineDiscounts";
    public static final String PRODUCT_ITEMS_PROPERTY = "productItems";
    public static final String VOUCHER_PAYMENTS_IN_PROPERTY = "voucherPaymentsIn";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Money> DISCOUNT_EACH_EX_TAX = Property.create("discountEachExTax", Money.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Money> PRICE_EACH_EX_TAX = Property.create("priceEachExTax", Money.class);
    public static final Property<BigDecimal> QUANTITY = Property.create("quantity", BigDecimal.class);
    public static final Property<Integer> SORT_ORDER = Property.create("sortOrder", Integer.class);
    public static final Property<Money> TAX_EACH = Property.create("taxEach", Money.class);
    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> UNIT = Property.create("unit", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<CourseClass> COURSE_CLASS = Property.create("courseClass", CourseClass.class);
    public static final Property<Enrolment> ENROLMENT = Property.create("enrolment", Enrolment.class);
    public static final Property<Invoice> INVOICE = Property.create("invoice", Invoice.class);
    public static final Property<List<InvoiceLineDiscount>> INVOICE_LINE_DISCOUNTS = Property.create("invoiceLineDiscounts", List.class);
    public static final Property<List<ProductItem>> PRODUCT_ITEMS = Property.create("productItems", List.class);
    public static final Property<List<VoucherPaymentIn>> VOUCHER_PAYMENTS_IN = Property.create("voucherPaymentsIn", List.class);

    protected Long angelId;
    protected Date created;
    protected String description;
    protected Money discountEachExTax;
    protected Date modified;
    protected Money priceEachExTax;
    protected BigDecimal quantity;
    protected Integer sortOrder;
    protected Money taxEach;
    protected String title;
    protected String unit;

    protected Object college;
    protected Object courseClass;
    protected Object enrolment;
    protected Object invoice;
    protected Object invoiceLineDiscounts;
    protected Object productItems;
    protected Object voucherPaymentsIn;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setDiscountEachExTax(Money discountEachExTax) {
        beforePropertyWrite("discountEachExTax", this.discountEachExTax, discountEachExTax);
        this.discountEachExTax = discountEachExTax;
    }

    public Money getDiscountEachExTax() {
        beforePropertyRead("discountEachExTax");
        return this.discountEachExTax;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPriceEachExTax(Money priceEachExTax) {
        beforePropertyWrite("priceEachExTax", this.priceEachExTax, priceEachExTax);
        this.priceEachExTax = priceEachExTax;
    }

    public Money getPriceEachExTax() {
        beforePropertyRead("priceEachExTax");
        return this.priceEachExTax;
    }

    public void setQuantity(BigDecimal quantity) {
        beforePropertyWrite("quantity", this.quantity, quantity);
        this.quantity = quantity;
    }

    public BigDecimal getQuantity() {
        beforePropertyRead("quantity");
        return this.quantity;
    }

    public void setSortOrder(Integer sortOrder) {
        beforePropertyWrite("sortOrder", this.sortOrder, sortOrder);
        this.sortOrder = sortOrder;
    }

    public Integer getSortOrder() {
        beforePropertyRead("sortOrder");
        return this.sortOrder;
    }

    public void setTaxEach(Money taxEach) {
        beforePropertyWrite("taxEach", this.taxEach, taxEach);
        this.taxEach = taxEach;
    }

    public Money getTaxEach() {
        beforePropertyRead("taxEach");
        return this.taxEach;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setUnit(String unit) {
        beforePropertyWrite("unit", this.unit, unit);
        this.unit = unit;
    }

    public String getUnit() {
        beforePropertyRead("unit");
        return this.unit;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCourseClass(CourseClass courseClass) {
        setToOneTarget("courseClass", courseClass, true);
    }

    public CourseClass getCourseClass() {
        return (CourseClass)readProperty("courseClass");
    }

    public void setEnrolment(Enrolment enrolment) {
        setToOneTarget("enrolment", enrolment, true);
    }

    public Enrolment getEnrolment() {
        return (Enrolment)readProperty("enrolment");
    }

    public void setInvoice(Invoice invoice) {
        setToOneTarget("invoice", invoice, true);
    }

    public Invoice getInvoice() {
        return (Invoice)readProperty("invoice");
    }

    public void addToInvoiceLineDiscounts(InvoiceLineDiscount obj) {
        addToManyTarget("invoiceLineDiscounts", obj, true);
    }

    public void removeFromInvoiceLineDiscounts(InvoiceLineDiscount obj) {
        removeToManyTarget("invoiceLineDiscounts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<InvoiceLineDiscount> getInvoiceLineDiscounts() {
        return (List<InvoiceLineDiscount>)readProperty("invoiceLineDiscounts");
    }

    public void addToProductItems(ProductItem obj) {
        addToManyTarget("productItems", obj, true);
    }

    public void removeFromProductItems(ProductItem obj) {
        removeToManyTarget("productItems", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ProductItem> getProductItems() {
        return (List<ProductItem>)readProperty("productItems");
    }

    public void addToVoucherPaymentsIn(VoucherPaymentIn obj) {
        addToManyTarget("voucherPaymentsIn", obj, true);
    }

    public void removeFromVoucherPaymentsIn(VoucherPaymentIn obj) {
        removeToManyTarget("voucherPaymentsIn", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<VoucherPaymentIn> getVoucherPaymentsIn() {
        return (List<VoucherPaymentIn>)readProperty("voucherPaymentsIn");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "description":
                return this.description;
            case "discountEachExTax":
                return this.discountEachExTax;
            case "modified":
                return this.modified;
            case "priceEachExTax":
                return this.priceEachExTax;
            case "quantity":
                return this.quantity;
            case "sortOrder":
                return this.sortOrder;
            case "taxEach":
                return this.taxEach;
            case "title":
                return this.title;
            case "unit":
                return this.unit;
            case "college":
                return this.college;
            case "courseClass":
                return this.courseClass;
            case "enrolment":
                return this.enrolment;
            case "invoice":
                return this.invoice;
            case "invoiceLineDiscounts":
                return this.invoiceLineDiscounts;
            case "productItems":
                return this.productItems;
            case "voucherPaymentsIn":
                return this.voucherPaymentsIn;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "discountEachExTax":
                this.discountEachExTax = (Money)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "priceEachExTax":
                this.priceEachExTax = (Money)val;
                break;
            case "quantity":
                this.quantity = (BigDecimal)val;
                break;
            case "sortOrder":
                this.sortOrder = (Integer)val;
                break;
            case "taxEach":
                this.taxEach = (Money)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "unit":
                this.unit = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "courseClass":
                this.courseClass = val;
                break;
            case "enrolment":
                this.enrolment = val;
                break;
            case "invoice":
                this.invoice = val;
                break;
            case "invoiceLineDiscounts":
                this.invoiceLineDiscounts = val;
                break;
            case "productItems":
                this.productItems = val;
                break;
            case "voucherPaymentsIn":
                this.voucherPaymentsIn = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.description);
        out.writeObject(this.discountEachExTax);
        out.writeObject(this.modified);
        out.writeObject(this.priceEachExTax);
        out.writeObject(this.quantity);
        out.writeObject(this.sortOrder);
        out.writeObject(this.taxEach);
        out.writeObject(this.title);
        out.writeObject(this.unit);
        out.writeObject(this.college);
        out.writeObject(this.courseClass);
        out.writeObject(this.enrolment);
        out.writeObject(this.invoice);
        out.writeObject(this.invoiceLineDiscounts);
        out.writeObject(this.productItems);
        out.writeObject(this.voucherPaymentsIn);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.discountEachExTax = (Money)in.readObject();
        this.modified = (Date)in.readObject();
        this.priceEachExTax = (Money)in.readObject();
        this.quantity = (BigDecimal)in.readObject();
        this.sortOrder = (Integer)in.readObject();
        this.taxEach = (Money)in.readObject();
        this.title = (String)in.readObject();
        this.unit = (String)in.readObject();
        this.college = in.readObject();
        this.courseClass = in.readObject();
        this.enrolment = in.readObject();
        this.invoice = in.readObject();
        this.invoiceLineDiscounts = in.readObject();
        this.productItems = in.readObject();
        this.voucherPaymentsIn = in.readObject();
    }

}
