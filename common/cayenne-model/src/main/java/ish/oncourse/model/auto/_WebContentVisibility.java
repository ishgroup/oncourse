package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.RegionKey;
import ish.oncourse.model.WebContent;
import ish.oncourse.model.WebNode;
import ish.oncourse.model.WebNodeType;

/**
 * Class _WebContentVisibility was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebContentVisibility extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String REGION_KEY_PROPERTY = "regionKey";
    public static final String WEIGHT_PROPERTY = "weight";
    public static final String WEB_CONTENT_PROPERTY = "webContent";
    public static final String WEB_NODE_PROPERTY = "webNode";
    public static final String WEB_NODE_TYPE_PROPERTY = "webNodeType";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<RegionKey> REGION_KEY = Property.create("regionKey", RegionKey.class);
    public static final Property<Integer> WEIGHT = Property.create("weight", Integer.class);
    public static final Property<WebContent> WEB_CONTENT = Property.create("webContent", WebContent.class);
    public static final Property<WebNode> WEB_NODE = Property.create("webNode", WebNode.class);
    public static final Property<WebNodeType> WEB_NODE_TYPE = Property.create("webNodeType", WebNodeType.class);

    protected RegionKey regionKey;
    protected Integer weight;

    protected Object webContent;
    protected Object webNode;
    protected Object webNodeType;

    public void setRegionKey(RegionKey regionKey) {
        beforePropertyWrite("regionKey", this.regionKey, regionKey);
        this.regionKey = regionKey;
    }

    public RegionKey getRegionKey() {
        beforePropertyRead("regionKey");
        return this.regionKey;
    }

    public void setWeight(Integer weight) {
        beforePropertyWrite("weight", this.weight, weight);
        this.weight = weight;
    }

    public Integer getWeight() {
        beforePropertyRead("weight");
        return this.weight;
    }

    public void setWebContent(WebContent webContent) {
        setToOneTarget("webContent", webContent, true);
    }

    public WebContent getWebContent() {
        return (WebContent)readProperty("webContent");
    }

    public void setWebNode(WebNode webNode) {
        setToOneTarget("webNode", webNode, true);
    }

    public WebNode getWebNode() {
        return (WebNode)readProperty("webNode");
    }

    public void setWebNodeType(WebNodeType webNodeType) {
        setToOneTarget("webNodeType", webNodeType, true);
    }

    public WebNodeType getWebNodeType() {
        return (WebNodeType)readProperty("webNodeType");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "regionKey":
                return this.regionKey;
            case "weight":
                return this.weight;
            case "webContent":
                return this.webContent;
            case "webNode":
                return this.webNode;
            case "webNodeType":
                return this.webNodeType;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "regionKey":
                this.regionKey = (RegionKey)val;
                break;
            case "weight":
                this.weight = (Integer)val;
                break;
            case "webContent":
                this.webContent = val;
                break;
            case "webNode":
                this.webNode = val;
                break;
            case "webNodeType":
                this.webNodeType = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.regionKey);
        out.writeObject(this.weight);
        out.writeObject(this.webContent);
        out.writeObject(this.webNode);
        out.writeObject(this.webNodeType);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.regionKey = (RegionKey)in.readObject();
        this.weight = (Integer)in.readObject();
        this.webContent = in.readObject();
        this.webNode = in.readObject();
        this.webNodeType = in.readObject();
    }

}
