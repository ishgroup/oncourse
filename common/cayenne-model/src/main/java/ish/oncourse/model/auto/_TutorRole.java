package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.CourseClass;
import ish.oncourse.model.Tutor;

/**
 * Class _TutorRole was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _TutorRole extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CONFIRMED_DATE_PROPERTY = "confirmedDate";
    public static final String CREATED_PROPERTY = "created";
    public static final String IN_PUBLICITY_PROPERTY = "inPublicity";
    public static final String IS_CONFIRMED_PROPERTY = "isConfirmed";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_CLASS_PROPERTY = "courseClass";
    public static final String TUTOR_PROPERTY = "tutor";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CONFIRMED_DATE = Property.create("confirmedDate", Date.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Boolean> IN_PUBLICITY = Property.create("inPublicity", Boolean.class);
    public static final Property<Boolean> IS_CONFIRMED = Property.create("isConfirmed", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<CourseClass> COURSE_CLASS = Property.create("courseClass", CourseClass.class);
    public static final Property<Tutor> TUTOR = Property.create("tutor", Tutor.class);

    protected Long angelId;
    protected Date confirmedDate;
    protected Date created;
    protected Boolean inPublicity;
    protected Boolean isConfirmed;
    protected Date modified;

    protected Object college;
    protected Object courseClass;
    protected Object tutor;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setConfirmedDate(Date confirmedDate) {
        beforePropertyWrite("confirmedDate", this.confirmedDate, confirmedDate);
        this.confirmedDate = confirmedDate;
    }

    public Date getConfirmedDate() {
        beforePropertyRead("confirmedDate");
        return this.confirmedDate;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setInPublicity(Boolean inPublicity) {
        beforePropertyWrite("inPublicity", this.inPublicity, inPublicity);
        this.inPublicity = inPublicity;
    }

    public Boolean getInPublicity() {
        beforePropertyRead("inPublicity");
        return this.inPublicity;
    }

    public void setIsConfirmed(Boolean isConfirmed) {
        beforePropertyWrite("isConfirmed", this.isConfirmed, isConfirmed);
        this.isConfirmed = isConfirmed;
    }

    public Boolean getIsConfirmed() {
        beforePropertyRead("isConfirmed");
        return this.isConfirmed;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCourseClass(CourseClass courseClass) {
        setToOneTarget("courseClass", courseClass, true);
    }

    public CourseClass getCourseClass() {
        return (CourseClass)readProperty("courseClass");
    }

    public void setTutor(Tutor tutor) {
        setToOneTarget("tutor", tutor, true);
    }

    public Tutor getTutor() {
        return (Tutor)readProperty("tutor");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "confirmedDate":
                return this.confirmedDate;
            case "created":
                return this.created;
            case "inPublicity":
                return this.inPublicity;
            case "isConfirmed":
                return this.isConfirmed;
            case "modified":
                return this.modified;
            case "college":
                return this.college;
            case "courseClass":
                return this.courseClass;
            case "tutor":
                return this.tutor;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "confirmedDate":
                this.confirmedDate = (Date)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "inPublicity":
                this.inPublicity = (Boolean)val;
                break;
            case "isConfirmed":
                this.isConfirmed = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "college":
                this.college = val;
                break;
            case "courseClass":
                this.courseClass = val;
                break;
            case "tutor":
                this.tutor = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.confirmedDate);
        out.writeObject(this.created);
        out.writeObject(this.inPublicity);
        out.writeObject(this.isConfirmed);
        out.writeObject(this.modified);
        out.writeObject(this.college);
        out.writeObject(this.courseClass);
        out.writeObject(this.tutor);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.confirmedDate = (Date)in.readObject();
        this.created = (Date)in.readObject();
        this.inPublicity = (Boolean)in.readObject();
        this.isConfirmed = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.college = in.readObject();
        this.courseClass = in.readObject();
        this.tutor = in.readObject();
    }

}
