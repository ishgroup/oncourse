package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.PaymentIn;

/**
 * Class _PaymentTransaction was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PaymentTransaction extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_PROPERTY = "created";
    public static final String IS_FINALISED_PROPERTY = "isFinalised";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String RESPONSE_PROPERTY = "response";
    public static final String SOAP_RESPONSE_PROPERTY = "soapResponse";
    public static final String TXN_REFERENCE_PROPERTY = "txnReference";
    public static final String PAYMENT_PROPERTY = "payment";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Boolean> IS_FINALISED = Property.create("isFinalised", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> RESPONSE = Property.create("response", String.class);
    public static final Property<String> SOAP_RESPONSE = Property.create("soapResponse", String.class);
    public static final Property<String> TXN_REFERENCE = Property.create("txnReference", String.class);
    public static final Property<PaymentIn> PAYMENT = Property.create("payment", PaymentIn.class);

    protected Date created;
    protected Boolean isFinalised;
    protected Date modified;
    protected String response;
    protected String soapResponse;
    protected String txnReference;

    protected Object payment;

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setIsFinalised(Boolean isFinalised) {
        beforePropertyWrite("isFinalised", this.isFinalised, isFinalised);
        this.isFinalised = isFinalised;
    }

    public Boolean getIsFinalised() {
        beforePropertyRead("isFinalised");
        return this.isFinalised;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setResponse(String response) {
        beforePropertyWrite("response", this.response, response);
        this.response = response;
    }

    public String getResponse() {
        beforePropertyRead("response");
        return this.response;
    }

    public void setSoapResponse(String soapResponse) {
        beforePropertyWrite("soapResponse", this.soapResponse, soapResponse);
        this.soapResponse = soapResponse;
    }

    public String getSoapResponse() {
        beforePropertyRead("soapResponse");
        return this.soapResponse;
    }

    public void setTxnReference(String txnReference) {
        beforePropertyWrite("txnReference", this.txnReference, txnReference);
        this.txnReference = txnReference;
    }

    public String getTxnReference() {
        beforePropertyRead("txnReference");
        return this.txnReference;
    }

    public void setPayment(PaymentIn payment) {
        setToOneTarget("payment", payment, true);
    }

    public PaymentIn getPayment() {
        return (PaymentIn)readProperty("payment");
    }

    protected abstract void onPreUpdate();

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "created":
                return this.created;
            case "isFinalised":
                return this.isFinalised;
            case "modified":
                return this.modified;
            case "response":
                return this.response;
            case "soapResponse":
                return this.soapResponse;
            case "txnReference":
                return this.txnReference;
            case "payment":
                return this.payment;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "created":
                this.created = (Date)val;
                break;
            case "isFinalised":
                this.isFinalised = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "response":
                this.response = (String)val;
                break;
            case "soapResponse":
                this.soapResponse = (String)val;
                break;
            case "txnReference":
                this.txnReference = (String)val;
                break;
            case "payment":
                this.payment = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.created);
        out.writeObject(this.isFinalised);
        out.writeObject(this.modified);
        out.writeObject(this.response);
        out.writeObject(this.soapResponse);
        out.writeObject(this.txnReference);
        out.writeObject(this.payment);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.created = (Date)in.readObject();
        this.isFinalised = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.response = (String)in.readObject();
        this.soapResponse = (String)in.readObject();
        this.txnReference = (String)in.readObject();
        this.payment = in.readObject();
    }

}
