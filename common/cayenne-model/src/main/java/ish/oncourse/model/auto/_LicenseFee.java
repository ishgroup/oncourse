package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.WebSite;

/**
 * Class _LicenseFee was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _LicenseFee extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String BILLING_MONTH_PROPERTY = "billingMonth";
    public static final String FEE_PROPERTY = "fee";
    public static final String FREE_TRANSACTIONS_PROPERTY = "freeTransactions";
    public static final String KEY_CODE_PROPERTY = "keyCode";
    public static final String PAID_UNTIL_PROPERTY = "paidUntil";
    public static final String PLAN_NAME_PROPERTY = "planName";
    public static final String VALID_UNTIL_PROPERTY = "validUntil";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String WEB_SITE_PROPERTY = "webSite";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Integer> BILLING_MONTH = Property.create("billingMonth", Integer.class);
    public static final Property<BigDecimal> FEE = Property.create("fee", BigDecimal.class);
    public static final Property<Integer> FREE_TRANSACTIONS = Property.create("freeTransactions", Integer.class);
    public static final Property<String> KEY_CODE = Property.create("keyCode", String.class);
    public static final Property<Date> PAID_UNTIL = Property.create("paidUntil", Date.class);
    public static final Property<String> PLAN_NAME = Property.create("planName", String.class);
    public static final Property<Date> VALID_UNTIL = Property.create("validUntil", Date.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<WebSite> WEB_SITE = Property.create("webSite", WebSite.class);

    protected Integer billingMonth;
    protected BigDecimal fee;
    protected Integer freeTransactions;
    protected String keyCode;
    protected Date paidUntil;
    protected String planName;
    protected Date validUntil;

    protected Object college;
    protected Object webSite;

    public void setBillingMonth(Integer billingMonth) {
        beforePropertyWrite("billingMonth", this.billingMonth, billingMonth);
        this.billingMonth = billingMonth;
    }

    public Integer getBillingMonth() {
        beforePropertyRead("billingMonth");
        return this.billingMonth;
    }

    public void setFee(BigDecimal fee) {
        beforePropertyWrite("fee", this.fee, fee);
        this.fee = fee;
    }

    public BigDecimal getFee() {
        beforePropertyRead("fee");
        return this.fee;
    }

    public void setFreeTransactions(Integer freeTransactions) {
        beforePropertyWrite("freeTransactions", this.freeTransactions, freeTransactions);
        this.freeTransactions = freeTransactions;
    }

    public Integer getFreeTransactions() {
        beforePropertyRead("freeTransactions");
        return this.freeTransactions;
    }

    public void setKeyCode(String keyCode) {
        beforePropertyWrite("keyCode", this.keyCode, keyCode);
        this.keyCode = keyCode;
    }

    public String getKeyCode() {
        beforePropertyRead("keyCode");
        return this.keyCode;
    }

    public void setPaidUntil(Date paidUntil) {
        beforePropertyWrite("paidUntil", this.paidUntil, paidUntil);
        this.paidUntil = paidUntil;
    }

    public Date getPaidUntil() {
        beforePropertyRead("paidUntil");
        return this.paidUntil;
    }

    public void setPlanName(String planName) {
        beforePropertyWrite("planName", this.planName, planName);
        this.planName = planName;
    }

    public String getPlanName() {
        beforePropertyRead("planName");
        return this.planName;
    }

    public void setValidUntil(Date validUntil) {
        beforePropertyWrite("validUntil", this.validUntil, validUntil);
        this.validUntil = validUntil;
    }

    public Date getValidUntil() {
        beforePropertyRead("validUntil");
        return this.validUntil;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setWebSite(WebSite webSite) {
        setToOneTarget("webSite", webSite, true);
    }

    public WebSite getWebSite() {
        return (WebSite)readProperty("webSite");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "billingMonth":
                return this.billingMonth;
            case "fee":
                return this.fee;
            case "freeTransactions":
                return this.freeTransactions;
            case "keyCode":
                return this.keyCode;
            case "paidUntil":
                return this.paidUntil;
            case "planName":
                return this.planName;
            case "validUntil":
                return this.validUntil;
            case "college":
                return this.college;
            case "webSite":
                return this.webSite;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "billingMonth":
                this.billingMonth = (Integer)val;
                break;
            case "fee":
                this.fee = (BigDecimal)val;
                break;
            case "freeTransactions":
                this.freeTransactions = (Integer)val;
                break;
            case "keyCode":
                this.keyCode = (String)val;
                break;
            case "paidUntil":
                this.paidUntil = (Date)val;
                break;
            case "planName":
                this.planName = (String)val;
                break;
            case "validUntil":
                this.validUntil = (Date)val;
                break;
            case "college":
                this.college = val;
                break;
            case "webSite":
                this.webSite = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.billingMonth);
        out.writeObject(this.fee);
        out.writeObject(this.freeTransactions);
        out.writeObject(this.keyCode);
        out.writeObject(this.paidUntil);
        out.writeObject(this.planName);
        out.writeObject(this.validUntil);
        out.writeObject(this.college);
        out.writeObject(this.webSite);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.billingMonth = (Integer)in.readObject();
        this.fee = (BigDecimal)in.readObject();
        this.freeTransactions = (Integer)in.readObject();
        this.keyCode = (String)in.readObject();
        this.paidUntil = (Date)in.readObject();
        this.planName = (String)in.readObject();
        this.validUntil = (Date)in.readObject();
        this.college = in.readObject();
        this.webSite = in.readObject();
    }

}
