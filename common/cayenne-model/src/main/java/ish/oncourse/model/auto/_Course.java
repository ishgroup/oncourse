package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.CourseEnrolmentType;
import ish.oncourse.model.Application;
import ish.oncourse.model.College;
import ish.oncourse.model.CourseClass;
import ish.oncourse.model.CourseCourseRelation;
import ish.oncourse.model.CourseCustomField;
import ish.oncourse.model.CourseModule;
import ish.oncourse.model.ExpandableCayenneDataObject;
import ish.oncourse.model.FieldConfigurationScheme;
import ish.oncourse.model.Qualification;
import ish.oncourse.model.VoucherProductCourse;
import ish.oncourse.model.WaitingList;

/**
 * Class _Course was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Course extends ExpandableCayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ALLOW_WAITING_LIST_PROPERTY = "allowWaitingList";
    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CODE_PROPERTY = "code";
    public static final String CREATED_PROPERTY = "created";
    public static final String DETAIL_PROPERTY = "detail";
    public static final String DETAIL_TEXTILE_PROPERTY = "detailTextile";
    public static final String ENROLMENT_TYPE_PROPERTY = "enrolmentType";
    public static final String FIELD_OF_EDUCATION_PROPERTY = "fieldOfEducation";
    public static final String IS_SUFFICIENT_FOR_QUALIFICATION_PROPERTY = "isSufficientForQualification";
    public static final String IS_VETCOURSE_PROPERTY = "isVETCourse";
    public static final String IS_WEB_VISIBLE_PROPERTY = "isWebVisible";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String NOMINAL_HOURS_PROPERTY = "nominalHours";
    public static final String SEARCH_TEXT_PROPERTY = "searchText";
    public static final String APPLICATIONS_PROPERTY = "applications";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_CLASSES_PROPERTY = "courseClasses";
    public static final String COURSE_MODULES_PROPERTY = "courseModules";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";
    public static final String FIELD_CONFIGURATION_SCHEME_PROPERTY = "fieldConfigurationScheme";
    public static final String FROM_COURSES_PROPERTY = "fromCourses";
    public static final String QUALIFICATION_PROPERTY = "qualification";
    public static final String TO_COURSES_PROPERTY = "toCourses";
    public static final String VOUCHER_PRODUCT_COURSES_PROPERTY = "voucherProductCourses";
    public static final String WAITING_LISTS_PROPERTY = "waitingLists";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ALLOW_WAITING_LIST = Property.create("allowWaitingList", Boolean.class);
    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DETAIL = Property.create("detail", String.class);
    public static final Property<String> DETAIL_TEXTILE = Property.create("detailTextile", String.class);
    public static final Property<CourseEnrolmentType> ENROLMENT_TYPE = Property.create("enrolmentType", CourseEnrolmentType.class);
    public static final Property<String> FIELD_OF_EDUCATION = Property.create("fieldOfEducation", String.class);
    public static final Property<Boolean> IS_SUFFICIENT_FOR_QUALIFICATION = Property.create("isSufficientForQualification", Boolean.class);
    public static final Property<Boolean> IS_VETCOURSE = Property.create("isVETCourse", Boolean.class);
    public static final Property<Boolean> IS_WEB_VISIBLE = Property.create("isWebVisible", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Float> NOMINAL_HOURS = Property.create("nominalHours", Float.class);
    public static final Property<String> SEARCH_TEXT = Property.create("searchText", String.class);
    public static final Property<List<Application>> APPLICATIONS = Property.create("applications", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<CourseClass>> COURSE_CLASSES = Property.create("courseClasses", List.class);
    public static final Property<List<CourseModule>> COURSE_MODULES = Property.create("courseModules", List.class);
    public static final Property<List<CourseCustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);
    public static final Property<FieldConfigurationScheme> FIELD_CONFIGURATION_SCHEME = Property.create("fieldConfigurationScheme", FieldConfigurationScheme.class);
    public static final Property<List<CourseCourseRelation>> FROM_COURSES = Property.create("fromCourses", List.class);
    public static final Property<Qualification> QUALIFICATION = Property.create("qualification", Qualification.class);
    public static final Property<List<CourseCourseRelation>> TO_COURSES = Property.create("toCourses", List.class);
    public static final Property<List<VoucherProductCourse>> VOUCHER_PRODUCT_COURSES = Property.create("voucherProductCourses", List.class);
    public static final Property<List<WaitingList>> WAITING_LISTS = Property.create("waitingLists", List.class);

    protected Boolean allowWaitingList;
    protected Long angelId;
    protected String code;
    protected Date created;
    protected String detail;
    protected String detailTextile;
    protected CourseEnrolmentType enrolmentType;
    protected String fieldOfEducation;
    protected Boolean isSufficientForQualification;
    protected Boolean isVETCourse;
    protected Boolean isWebVisible;
    protected Date modified;
    protected String name;
    protected Float nominalHours;
    protected String searchText;

    protected Object applications;
    protected Object college;
    protected Object courseClasses;
    protected Object courseModules;
    protected Object customFields;
    protected Object fieldConfigurationScheme;
    protected Object fromCourses;
    protected Object qualification;
    protected Object toCourses;
    protected Object voucherProductCourses;
    protected Object waitingLists;

    public void setAllowWaitingList(Boolean allowWaitingList) {
        beforePropertyWrite("allowWaitingList", this.allowWaitingList, allowWaitingList);
        this.allowWaitingList = allowWaitingList;
    }

    public Boolean getAllowWaitingList() {
        beforePropertyRead("allowWaitingList");
        return this.allowWaitingList;
    }

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDetail(String detail) {
        beforePropertyWrite("detail", this.detail, detail);
        this.detail = detail;
    }

    public String getDetail() {
        beforePropertyRead("detail");
        return this.detail;
    }

    public void setDetailTextile(String detailTextile) {
        beforePropertyWrite("detailTextile", this.detailTextile, detailTextile);
        this.detailTextile = detailTextile;
    }

    public String getDetailTextile() {
        beforePropertyRead("detailTextile");
        return this.detailTextile;
    }

    public void setEnrolmentType(CourseEnrolmentType enrolmentType) {
        beforePropertyWrite("enrolmentType", this.enrolmentType, enrolmentType);
        this.enrolmentType = enrolmentType;
    }

    public CourseEnrolmentType getEnrolmentType() {
        beforePropertyRead("enrolmentType");
        return this.enrolmentType;
    }

    public void setFieldOfEducation(String fieldOfEducation) {
        beforePropertyWrite("fieldOfEducation", this.fieldOfEducation, fieldOfEducation);
        this.fieldOfEducation = fieldOfEducation;
    }

    public String getFieldOfEducation() {
        beforePropertyRead("fieldOfEducation");
        return this.fieldOfEducation;
    }

    public void setIsSufficientForQualification(Boolean isSufficientForQualification) {
        beforePropertyWrite("isSufficientForQualification", this.isSufficientForQualification, isSufficientForQualification);
        this.isSufficientForQualification = isSufficientForQualification;
    }

    public Boolean getIsSufficientForQualification() {
        beforePropertyRead("isSufficientForQualification");
        return this.isSufficientForQualification;
    }

    public void setIsVETCourse(Boolean isVETCourse) {
        beforePropertyWrite("isVETCourse", this.isVETCourse, isVETCourse);
        this.isVETCourse = isVETCourse;
    }

    public Boolean getIsVETCourse() {
        beforePropertyRead("isVETCourse");
        return this.isVETCourse;
    }

    public void setIsWebVisible(Boolean isWebVisible) {
        beforePropertyWrite("isWebVisible", this.isWebVisible, isWebVisible);
        this.isWebVisible = isWebVisible;
    }

    public Boolean getIsWebVisible() {
        beforePropertyRead("isWebVisible");
        return this.isWebVisible;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNominalHours(Float nominalHours) {
        beforePropertyWrite("nominalHours", this.nominalHours, nominalHours);
        this.nominalHours = nominalHours;
    }

    public Float getNominalHours() {
        beforePropertyRead("nominalHours");
        return this.nominalHours;
    }

    public void setSearchText(String searchText) {
        beforePropertyWrite("searchText", this.searchText, searchText);
        this.searchText = searchText;
    }

    public String getSearchText() {
        beforePropertyRead("searchText");
        return this.searchText;
    }

    public void addToApplications(Application obj) {
        addToManyTarget("applications", obj, true);
    }

    public void removeFromApplications(Application obj) {
        removeToManyTarget("applications", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Application> getApplications() {
        return (List<Application>)readProperty("applications");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToCourseClasses(CourseClass obj) {
        addToManyTarget("courseClasses", obj, true);
    }

    public void removeFromCourseClasses(CourseClass obj) {
        removeToManyTarget("courseClasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseClass> getCourseClasses() {
        return (List<CourseClass>)readProperty("courseClasses");
    }

    public void addToCourseModules(CourseModule obj) {
        addToManyTarget("courseModules", obj, true);
    }

    public void removeFromCourseModules(CourseModule obj) {
        removeToManyTarget("courseModules", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseModule> getCourseModules() {
        return (List<CourseModule>)readProperty("courseModules");
    }

    public void addToCustomFields(CourseCustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(CourseCustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseCustomField> getCustomFields() {
        return (List<CourseCustomField>)readProperty("customFields");
    }

    public void setFieldConfigurationScheme(FieldConfigurationScheme fieldConfigurationScheme) {
        setToOneTarget("fieldConfigurationScheme", fieldConfigurationScheme, true);
    }

    public FieldConfigurationScheme getFieldConfigurationScheme() {
        return (FieldConfigurationScheme)readProperty("fieldConfigurationScheme");
    }

    public void addToFromCourses(CourseCourseRelation obj) {
        addToManyTarget("fromCourses", obj, true);
    }

    public void removeFromFromCourses(CourseCourseRelation obj) {
        removeToManyTarget("fromCourses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseCourseRelation> getFromCourses() {
        return (List<CourseCourseRelation>)readProperty("fromCourses");
    }

    public void setQualification(Qualification qualification) {
        setToOneTarget("qualification", qualification, true);
    }

    public Qualification getQualification() {
        return (Qualification)readProperty("qualification");
    }

    public void addToToCourses(CourseCourseRelation obj) {
        addToManyTarget("toCourses", obj, true);
    }

    public void removeFromToCourses(CourseCourseRelation obj) {
        removeToManyTarget("toCourses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseCourseRelation> getToCourses() {
        return (List<CourseCourseRelation>)readProperty("toCourses");
    }

    public void addToVoucherProductCourses(VoucherProductCourse obj) {
        addToManyTarget("voucherProductCourses", obj, true);
    }

    public void removeFromVoucherProductCourses(VoucherProductCourse obj) {
        removeToManyTarget("voucherProductCourses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<VoucherProductCourse> getVoucherProductCourses() {
        return (List<VoucherProductCourse>)readProperty("voucherProductCourses");
    }

    public void addToWaitingLists(WaitingList obj) {
        addToManyTarget("waitingLists", obj, true);
    }

    public void removeFromWaitingLists(WaitingList obj) {
        removeToManyTarget("waitingLists", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WaitingList> getWaitingLists() {
        return (List<WaitingList>)readProperty("waitingLists");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "allowWaitingList":
                return this.allowWaitingList;
            case "angelId":
                return this.angelId;
            case "code":
                return this.code;
            case "created":
                return this.created;
            case "detail":
                return this.detail;
            case "detailTextile":
                return this.detailTextile;
            case "enrolmentType":
                return this.enrolmentType;
            case "fieldOfEducation":
                return this.fieldOfEducation;
            case "isSufficientForQualification":
                return this.isSufficientForQualification;
            case "isVETCourse":
                return this.isVETCourse;
            case "isWebVisible":
                return this.isWebVisible;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "nominalHours":
                return this.nominalHours;
            case "searchText":
                return this.searchText;
            case "applications":
                return this.applications;
            case "college":
                return this.college;
            case "courseClasses":
                return this.courseClasses;
            case "courseModules":
                return this.courseModules;
            case "customFields":
                return this.customFields;
            case "fieldConfigurationScheme":
                return this.fieldConfigurationScheme;
            case "fromCourses":
                return this.fromCourses;
            case "qualification":
                return this.qualification;
            case "toCourses":
                return this.toCourses;
            case "voucherProductCourses":
                return this.voucherProductCourses;
            case "waitingLists":
                return this.waitingLists;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "allowWaitingList":
                this.allowWaitingList = (Boolean)val;
                break;
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "code":
                this.code = (String)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "detail":
                this.detail = (String)val;
                break;
            case "detailTextile":
                this.detailTextile = (String)val;
                break;
            case "enrolmentType":
                this.enrolmentType = (CourseEnrolmentType)val;
                break;
            case "fieldOfEducation":
                this.fieldOfEducation = (String)val;
                break;
            case "isSufficientForQualification":
                this.isSufficientForQualification = (Boolean)val;
                break;
            case "isVETCourse":
                this.isVETCourse = (Boolean)val;
                break;
            case "isWebVisible":
                this.isWebVisible = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nominalHours":
                this.nominalHours = (Float)val;
                break;
            case "searchText":
                this.searchText = (String)val;
                break;
            case "applications":
                this.applications = val;
                break;
            case "college":
                this.college = val;
                break;
            case "courseClasses":
                this.courseClasses = val;
                break;
            case "courseModules":
                this.courseModules = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            case "fieldConfigurationScheme":
                this.fieldConfigurationScheme = val;
                break;
            case "fromCourses":
                this.fromCourses = val;
                break;
            case "qualification":
                this.qualification = val;
                break;
            case "toCourses":
                this.toCourses = val;
                break;
            case "voucherProductCourses":
                this.voucherProductCourses = val;
                break;
            case "waitingLists":
                this.waitingLists = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.allowWaitingList);
        out.writeObject(this.angelId);
        out.writeObject(this.code);
        out.writeObject(this.created);
        out.writeObject(this.detail);
        out.writeObject(this.detailTextile);
        out.writeObject(this.enrolmentType);
        out.writeObject(this.fieldOfEducation);
        out.writeObject(this.isSufficientForQualification);
        out.writeObject(this.isVETCourse);
        out.writeObject(this.isWebVisible);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.nominalHours);
        out.writeObject(this.searchText);
        out.writeObject(this.applications);
        out.writeObject(this.college);
        out.writeObject(this.courseClasses);
        out.writeObject(this.courseModules);
        out.writeObject(this.customFields);
        out.writeObject(this.fieldConfigurationScheme);
        out.writeObject(this.fromCourses);
        out.writeObject(this.qualification);
        out.writeObject(this.toCourses);
        out.writeObject(this.voucherProductCourses);
        out.writeObject(this.waitingLists);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.allowWaitingList = (Boolean)in.readObject();
        this.angelId = (Long)in.readObject();
        this.code = (String)in.readObject();
        this.created = (Date)in.readObject();
        this.detail = (String)in.readObject();
        this.detailTextile = (String)in.readObject();
        this.enrolmentType = (CourseEnrolmentType)in.readObject();
        this.fieldOfEducation = (String)in.readObject();
        this.isSufficientForQualification = (Boolean)in.readObject();
        this.isVETCourse = (Boolean)in.readObject();
        this.isWebVisible = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.nominalHours = (Float)in.readObject();
        this.searchText = (String)in.readObject();
        this.applications = in.readObject();
        this.college = in.readObject();
        this.courseClasses = in.readObject();
        this.courseModules = in.readObject();
        this.customFields = in.readObject();
        this.fieldConfigurationScheme = in.readObject();
        this.fromCourses = in.readObject();
        this.qualification = in.readObject();
        this.toCourses = in.readObject();
        this.voucherProductCourses = in.readObject();
        this.waitingLists = in.readObject();
    }

}
