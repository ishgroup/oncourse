package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.EntityRelationCartAction;
import ish.oncourse.model.College;
import ish.oncourse.model.Discount;
import ish.oncourse.model.EntityRelation;

/**
 * Class _EntityRelationType was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EntityRelationType extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String CREATED_PROPERTY = "created";
    public static final String NAME_PROPERTY = "name";
    public static final String FROM_NAME_PROPERTY = "fromName";
    public static final String TO_NAME_PROPERTY = "toName";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String IS_SHOWN_ON_WEB_PROPERTY = "isShownOnWeb";
    public static final String SHOPPING_CART_PROPERTY = "shoppingCart";
    public static final String CONSIDER_HISTORY_PROPERTY = "considerHistory";
    public static final String ENTITY_RELATIONS_PROPERTY = "entityRelations";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String DISCOUNT_PROPERTY = "discount";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> FROM_NAME = Property.create("fromName", String.class);
    public static final Property<String> TO_NAME = Property.create("toName", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Boolean> IS_SHOWN_ON_WEB = Property.create("isShownOnWeb", Boolean.class);
    public static final Property<EntityRelationCartAction> SHOPPING_CART = Property.create("shoppingCart", EntityRelationCartAction.class);
    public static final Property<Boolean> CONSIDER_HISTORY = Property.create("considerHistory", Boolean.class);
    public static final Property<List<EntityRelation>> ENTITY_RELATIONS = Property.create("entityRelations", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Discount> DISCOUNT = Property.create("discount", Discount.class);

    protected Long angelId;
    protected Date modified;
    protected Date created;
    protected String name;
    protected String fromName;
    protected String toName;
    protected String description;
    protected Boolean isShownOnWeb;
    protected EntityRelationCartAction shoppingCart;
    protected Boolean considerHistory;

    protected Object entityRelations;
    protected Object college;
    protected Object discount;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setFromName(String fromName) {
        beforePropertyWrite("fromName", this.fromName, fromName);
        this.fromName = fromName;
    }

    public String getFromName() {
        beforePropertyRead("fromName");
        return this.fromName;
    }

    public void setToName(String toName) {
        beforePropertyWrite("toName", this.toName, toName);
        this.toName = toName;
    }

    public String getToName() {
        beforePropertyRead("toName");
        return this.toName;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setIsShownOnWeb(Boolean isShownOnWeb) {
        beforePropertyWrite("isShownOnWeb", this.isShownOnWeb, isShownOnWeb);
        this.isShownOnWeb = isShownOnWeb;
    }

    public Boolean getIsShownOnWeb() {
        beforePropertyRead("isShownOnWeb");
        return this.isShownOnWeb;
    }

    public void setShoppingCart(EntityRelationCartAction shoppingCart) {
        beforePropertyWrite("shoppingCart", this.shoppingCart, shoppingCart);
        this.shoppingCart = shoppingCart;
    }

    public EntityRelationCartAction getShoppingCart() {
        beforePropertyRead("shoppingCart");
        return this.shoppingCart;
    }

    public void setConsiderHistory(Boolean considerHistory) {
        beforePropertyWrite("considerHistory", this.considerHistory, considerHistory);
        this.considerHistory = considerHistory;
    }

    public Boolean getConsiderHistory() {
        beforePropertyRead("considerHistory");
        return this.considerHistory;
    }

    public void addToEntityRelations(EntityRelation obj) {
        addToManyTarget("entityRelations", obj, true);
    }

    public void removeFromEntityRelations(EntityRelation obj) {
        removeToManyTarget("entityRelations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EntityRelation> getEntityRelations() {
        return (List<EntityRelation>)readProperty("entityRelations");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setDiscount(Discount discount) {
        setToOneTarget("discount", discount, true);
    }

    public Discount getDiscount() {
        return (Discount)readProperty("discount");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "modified":
                return this.modified;
            case "created":
                return this.created;
            case "name":
                return this.name;
            case "fromName":
                return this.fromName;
            case "toName":
                return this.toName;
            case "description":
                return this.description;
            case "isShownOnWeb":
                return this.isShownOnWeb;
            case "shoppingCart":
                return this.shoppingCart;
            case "considerHistory":
                return this.considerHistory;
            case "entityRelations":
                return this.entityRelations;
            case "college":
                return this.college;
            case "discount":
                return this.discount;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "fromName":
                this.fromName = (String)val;
                break;
            case "toName":
                this.toName = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "isShownOnWeb":
                this.isShownOnWeb = (Boolean)val;
                break;
            case "shoppingCart":
                this.shoppingCart = (EntityRelationCartAction)val;
                break;
            case "considerHistory":
                this.considerHistory = (Boolean)val;
                break;
            case "entityRelations":
                this.entityRelations = val;
                break;
            case "college":
                this.college = val;
                break;
            case "discount":
                this.discount = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.modified);
        out.writeObject(this.created);
        out.writeObject(this.name);
        out.writeObject(this.fromName);
        out.writeObject(this.toName);
        out.writeObject(this.description);
        out.writeObject(this.isShownOnWeb);
        out.writeObject(this.shoppingCart);
        out.writeObject(this.considerHistory);
        out.writeObject(this.entityRelations);
        out.writeObject(this.college);
        out.writeObject(this.discount);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.modified = (Date)in.readObject();
        this.created = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.fromName = (String)in.readObject();
        this.toName = (String)in.readObject();
        this.description = (String)in.readObject();
        this.isShownOnWeb = (Boolean)in.readObject();
        this.shoppingCart = (EntityRelationCartAction)in.readObject();
        this.considerHistory = (Boolean)in.readObject();
        this.entityRelations = in.readObject();
        this.college = in.readObject();
        this.discount = in.readObject();
    }

}
