package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.AttachmentInfoVisibility;
import ish.oncourse.model.BinaryInfoRelation;
import ish.oncourse.model.College;

/**
 * Class _BinaryInfo was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _BinaryInfo extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String BYTE_SIZE_PROPERTY = "byteSize";
    public static final String CREATED_PROPERTY = "created";
    public static final String FILE_PATH_PROPERTY = "filePath";
    public static final String FILE_UUID_PROPERTY = "fileUUID";
    public static final String MIME_TYPE_PROPERTY = "mimeType";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String PIXEL_HEIGHT_PROPERTY = "pixelHeight";
    public static final String PIXEL_WIDTH_PROPERTY = "pixelWidth";
    public static final String REFERENCE_NUMBER_PROPERTY = "referenceNumber";
    public static final String WEB_VISIBLE_PROPERTY = "webVisible";
    public static final String BINARY_INFO_RELATIONS_PROPERTY = "binaryInfoRelations";
    public static final String COLLEGE_PROPERTY = "college";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Long> BYTE_SIZE = Property.create("byteSize", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> FILE_PATH = Property.create("filePath", String.class);
    public static final Property<String> FILE_UUID = Property.create("fileUUID", String.class);
    public static final Property<String> MIME_TYPE = Property.create("mimeType", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Integer> PIXEL_HEIGHT = Property.create("pixelHeight", Integer.class);
    public static final Property<Integer> PIXEL_WIDTH = Property.create("pixelWidth", Integer.class);
    public static final Property<Integer> REFERENCE_NUMBER = Property.create("referenceNumber", Integer.class);
    public static final Property<AttachmentInfoVisibility> WEB_VISIBLE = Property.create("webVisible", AttachmentInfoVisibility.class);
    public static final Property<List<BinaryInfoRelation>> BINARY_INFO_RELATIONS = Property.create("binaryInfoRelations", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);

    protected Long angelId;
    protected Long byteSize;
    protected Date created;
    protected String filePath;
    protected String fileUUID;
    protected String mimeType;
    protected Date modified;
    protected String name;
    protected Integer pixelHeight;
    protected Integer pixelWidth;
    protected Integer referenceNumber;
    protected AttachmentInfoVisibility webVisible;

    protected Object binaryInfoRelations;
    protected Object college;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setByteSize(Long byteSize) {
        beforePropertyWrite("byteSize", this.byteSize, byteSize);
        this.byteSize = byteSize;
    }

    public Long getByteSize() {
        beforePropertyRead("byteSize");
        return this.byteSize;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setFilePath(String filePath) {
        beforePropertyWrite("filePath", this.filePath, filePath);
        this.filePath = filePath;
    }

    public String getFilePath() {
        beforePropertyRead("filePath");
        return this.filePath;
    }

    public void setFileUUID(String fileUUID) {
        beforePropertyWrite("fileUUID", this.fileUUID, fileUUID);
        this.fileUUID = fileUUID;
    }

    public String getFileUUID() {
        beforePropertyRead("fileUUID");
        return this.fileUUID;
    }

    public void setMimeType(String mimeType) {
        beforePropertyWrite("mimeType", this.mimeType, mimeType);
        this.mimeType = mimeType;
    }

    public String getMimeType() {
        beforePropertyRead("mimeType");
        return this.mimeType;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPixelHeight(Integer pixelHeight) {
        beforePropertyWrite("pixelHeight", this.pixelHeight, pixelHeight);
        this.pixelHeight = pixelHeight;
    }

    public Integer getPixelHeight() {
        beforePropertyRead("pixelHeight");
        return this.pixelHeight;
    }

    public void setPixelWidth(Integer pixelWidth) {
        beforePropertyWrite("pixelWidth", this.pixelWidth, pixelWidth);
        this.pixelWidth = pixelWidth;
    }

    public Integer getPixelWidth() {
        beforePropertyRead("pixelWidth");
        return this.pixelWidth;
    }

    public void setReferenceNumber(Integer referenceNumber) {
        beforePropertyWrite("referenceNumber", this.referenceNumber, referenceNumber);
        this.referenceNumber = referenceNumber;
    }

    public Integer getReferenceNumber() {
        beforePropertyRead("referenceNumber");
        return this.referenceNumber;
    }

    public void setWebVisible(AttachmentInfoVisibility webVisible) {
        beforePropertyWrite("webVisible", this.webVisible, webVisible);
        this.webVisible = webVisible;
    }

    public AttachmentInfoVisibility getWebVisible() {
        beforePropertyRead("webVisible");
        return this.webVisible;
    }

    public void addToBinaryInfoRelations(BinaryInfoRelation obj) {
        addToManyTarget("binaryInfoRelations", obj, true);
    }

    public void removeFromBinaryInfoRelations(BinaryInfoRelation obj) {
        removeToManyTarget("binaryInfoRelations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<BinaryInfoRelation> getBinaryInfoRelations() {
        return (List<BinaryInfoRelation>)readProperty("binaryInfoRelations");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "byteSize":
                return this.byteSize;
            case "created":
                return this.created;
            case "filePath":
                return this.filePath;
            case "fileUUID":
                return this.fileUUID;
            case "mimeType":
                return this.mimeType;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "pixelHeight":
                return this.pixelHeight;
            case "pixelWidth":
                return this.pixelWidth;
            case "referenceNumber":
                return this.referenceNumber;
            case "webVisible":
                return this.webVisible;
            case "binaryInfoRelations":
                return this.binaryInfoRelations;
            case "college":
                return this.college;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "byteSize":
                this.byteSize = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "filePath":
                this.filePath = (String)val;
                break;
            case "fileUUID":
                this.fileUUID = (String)val;
                break;
            case "mimeType":
                this.mimeType = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "pixelHeight":
                this.pixelHeight = (Integer)val;
                break;
            case "pixelWidth":
                this.pixelWidth = (Integer)val;
                break;
            case "referenceNumber":
                this.referenceNumber = (Integer)val;
                break;
            case "webVisible":
                this.webVisible = (AttachmentInfoVisibility)val;
                break;
            case "binaryInfoRelations":
                this.binaryInfoRelations = val;
                break;
            case "college":
                this.college = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.byteSize);
        out.writeObject(this.created);
        out.writeObject(this.filePath);
        out.writeObject(this.fileUUID);
        out.writeObject(this.mimeType);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.pixelHeight);
        out.writeObject(this.pixelWidth);
        out.writeObject(this.referenceNumber);
        out.writeObject(this.webVisible);
        out.writeObject(this.binaryInfoRelations);
        out.writeObject(this.college);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.byteSize = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.filePath = (String)in.readObject();
        this.fileUUID = (String)in.readObject();
        this.mimeType = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.pixelHeight = (Integer)in.readObject();
        this.pixelWidth = (Integer)in.readObject();
        this.referenceNumber = (Integer)in.readObject();
        this.webVisible = (AttachmentInfoVisibility)in.readObject();
        this.binaryInfoRelations = in.readObject();
        this.college = in.readObject();
    }

}
