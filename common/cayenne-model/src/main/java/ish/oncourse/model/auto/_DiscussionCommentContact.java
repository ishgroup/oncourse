package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.Contact;
import ish.oncourse.model.DiscussionComment;

/**
 * Class _DiscussionCommentContact was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DiscussionCommentContact extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String IS_NEW_PROPERTY = "isNew";
    public static final String COMMENT_PROPERTY = "comment";
    public static final String CONTACT_PROPERTY = "contact";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> IS_NEW = Property.create("isNew", Boolean.class);
    public static final Property<DiscussionComment> COMMENT = Property.create("comment", DiscussionComment.class);
    public static final Property<Contact> CONTACT = Property.create("contact", Contact.class);

    protected Boolean isNew;

    protected Object comment;
    protected Object contact;

    public void setIsNew(Boolean isNew) {
        beforePropertyWrite("isNew", this.isNew, isNew);
        this.isNew = isNew;
    }

    public Boolean getIsNew() {
        beforePropertyRead("isNew");
        return this.isNew;
    }

    public void setComment(DiscussionComment comment) {
        setToOneTarget("comment", comment, true);
    }

    public DiscussionComment getComment() {
        return (DiscussionComment)readProperty("comment");
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "isNew":
                return this.isNew;
            case "comment":
                return this.comment;
            case "contact":
                return this.contact;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "isNew":
                this.isNew = (Boolean)val;
                break;
            case "comment":
                this.comment = val;
                break;
            case "contact":
                this.contact = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.isNew);
        out.writeObject(this.comment);
        out.writeObject(this.contact);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.isNew = (Boolean)in.readObject();
        this.comment = in.readObject();
        this.contact = in.readObject();
    }

}
