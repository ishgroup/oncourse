package ish.oncourse.model.auto;

import ish.oncourse.model.WebSiteLayout;
import ish.oncourse.model.WebSiteVersion;
import org.apache.cayenne.exp.Property;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

/**
 * Class _WebLayoutPath was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebLayoutPath extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String PATH_PROPERTY = "path";
    public static final String CREATED_PROPERTY = "created";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String WEB_SITE_VERSION_PROPERTY = "webSiteVersion";
    public static final String WEB_SITE_LAYOUT_PROPERTY = "webSiteLayout";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> PATH = Property.create("path", String.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<WebSiteVersion> WEB_SITE_VERSION = Property.create("webSiteVersion", WebSiteVersion.class);
    public static final Property<WebSiteLayout> WEB_SITE_LAYOUT = Property.create("webSiteLayout", WebSiteLayout.class);

    protected String path;
    protected Date created;
    protected Date modified;

    protected Object webSiteVersion;
    protected Object webSiteLayout;

    public void setPath(String path) {
        beforePropertyWrite("path", this.path, path);
        this.path = path;
    }

    public String getPath() {
        beforePropertyRead("path");
        return this.path;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setWebSiteVersion(WebSiteVersion webSiteVersion) {
        setToOneTarget("webSiteVersion", webSiteVersion, true);
    }

    public WebSiteVersion getWebSiteVersion() {
        return (WebSiteVersion)readProperty("webSiteVersion");
    }

    public void setWebSiteLayout(WebSiteLayout webSiteLayout) {
        setToOneTarget("webSiteLayout", webSiteLayout, true);
    }

    public WebSiteLayout getWebSiteLayout() {
        return (WebSiteLayout)readProperty("webSiteLayout");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "path":
                return this.path;
            case "created":
                return this.created;
            case "modified":
                return this.modified;
            case "webSiteVersion":
                return this.webSiteVersion;
            case "webSiteLayout":
                return this.webSiteLayout;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "path":
                this.path = (String)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "webSiteVersion":
                this.webSiteVersion = val;
                break;
            case "webSiteLayout":
                this.webSiteLayout = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.path);
        out.writeObject(this.created);
        out.writeObject(this.modified);
        out.writeObject(this.webSiteVersion);
        out.writeObject(this.webSiteLayout);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.path = (String)in.readObject();
        this.created = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.webSiteVersion = in.readObject();
        this.webSiteLayout = in.readObject();
    }

}
