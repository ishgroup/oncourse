package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.WebMenu;
import ish.oncourse.model.WebNode;
import ish.oncourse.model.WebSiteVersion;

/**
 * Class _WebMenu was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebMenu extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_PROPERTY = "created";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String URL_PROPERTY = "url";
    public static final String WEIGHT_PROPERTY = "weight";
    public static final String CHILDREN_MENUS_PROPERTY = "childrenMenus";
    public static final String PARENT_WEB_MENU_PROPERTY = "parentWebMenu";
    public static final String WEB_NODE_PROPERTY = "webNode";
    public static final String WEB_SITE_VERSION_PROPERTY = "webSiteVersion";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<Integer> WEIGHT = Property.create("weight", Integer.class);
    public static final Property<List<WebMenu>> CHILDREN_MENUS = Property.create("childrenMenus", List.class);
    public static final Property<WebMenu> PARENT_WEB_MENU = Property.create("parentWebMenu", WebMenu.class);
    public static final Property<WebNode> WEB_NODE = Property.create("webNode", WebNode.class);
    public static final Property<WebSiteVersion> WEB_SITE_VERSION = Property.create("webSiteVersion", WebSiteVersion.class);

    protected Date created;
    protected Date modified;
    protected String name;
    protected String url;
    protected Integer weight;

    protected Object childrenMenus;
    protected Object parentWebMenu;
    protected Object webNode;
    protected Object webSiteVersion;

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setWeight(Integer weight) {
        beforePropertyWrite("weight", this.weight, weight);
        this.weight = weight;
    }

    public Integer getWeight() {
        beforePropertyRead("weight");
        return this.weight;
    }

    public void addToChildrenMenus(WebMenu obj) {
        addToManyTarget("childrenMenus", obj, true);
    }

    public void removeFromChildrenMenus(WebMenu obj) {
        removeToManyTarget("childrenMenus", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebMenu> getChildrenMenus() {
        return (List<WebMenu>)readProperty("childrenMenus");
    }

    public void setParentWebMenu(WebMenu parentWebMenu) {
        setToOneTarget("parentWebMenu", parentWebMenu, true);
    }

    public WebMenu getParentWebMenu() {
        return (WebMenu)readProperty("parentWebMenu");
    }

    public void setWebNode(WebNode webNode) {
        setToOneTarget("webNode", webNode, true);
    }

    public WebNode getWebNode() {
        return (WebNode)readProperty("webNode");
    }

    public void setWebSiteVersion(WebSiteVersion webSiteVersion) {
        setToOneTarget("webSiteVersion", webSiteVersion, true);
    }

    public WebSiteVersion getWebSiteVersion() {
        return (WebSiteVersion)readProperty("webSiteVersion");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "created":
                return this.created;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "url":
                return this.url;
            case "weight":
                return this.weight;
            case "childrenMenus":
                return this.childrenMenus;
            case "parentWebMenu":
                return this.parentWebMenu;
            case "webNode":
                return this.webNode;
            case "webSiteVersion":
                return this.webSiteVersion;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "created":
                this.created = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "weight":
                this.weight = (Integer)val;
                break;
            case "childrenMenus":
                this.childrenMenus = val;
                break;
            case "parentWebMenu":
                this.parentWebMenu = val;
                break;
            case "webNode":
                this.webNode = val;
                break;
            case "webSiteVersion":
                this.webSiteVersion = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.created);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.url);
        out.writeObject(this.weight);
        out.writeObject(this.childrenMenus);
        out.writeObject(this.parentWebMenu);
        out.writeObject(this.webNode);
        out.writeObject(this.webSiteVersion);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.created = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.url = (String)in.readObject();
        this.weight = (Integer)in.readObject();
        this.childrenMenus = in.readObject();
        this.parentWebMenu = in.readObject();
        this.webNode = in.readObject();
        this.webSiteVersion = in.readObject();
    }

}
