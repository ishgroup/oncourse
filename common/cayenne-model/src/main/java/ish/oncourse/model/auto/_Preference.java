package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.WebSite;

/**
 * Class _Preference was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Preference extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String EXPLANATION_PROPERTY = "explanation";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String SQL_TYPE_PROPERTY = "sqlType";
    public static final String VALUE_PROPERTY = "value";
    public static final String VALUE_STRING_PROPERTY = "valueString";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String WEB_SITE_PROPERTY = "webSite";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> EXPLANATION = Property.create("explanation", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Integer> SQL_TYPE = Property.create("sqlType", Integer.class);
    public static final Property<byte[]> VALUE = Property.create("value", byte[].class);
    public static final Property<String> VALUE_STRING = Property.create("valueString", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<WebSite> WEB_SITE = Property.create("webSite", WebSite.class);

    protected Long angelId;
    protected Date created;
    protected String explanation;
    protected Date modified;
    protected String name;
    protected Integer sqlType;
    protected byte[] value;
    protected String valueString;

    protected Object college;
    protected Object webSite;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setExplanation(String explanation) {
        beforePropertyWrite("explanation", this.explanation, explanation);
        this.explanation = explanation;
    }

    public String getExplanation() {
        beforePropertyRead("explanation");
        return this.explanation;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setSqlType(Integer sqlType) {
        beforePropertyWrite("sqlType", this.sqlType, sqlType);
        this.sqlType = sqlType;
    }

    public Integer getSqlType() {
        beforePropertyRead("sqlType");
        return this.sqlType;
    }

    public void setValue(byte[] value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public byte[] getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    public void setValueString(String valueString) {
        beforePropertyWrite("valueString", this.valueString, valueString);
        this.valueString = valueString;
    }

    public String getValueString() {
        beforePropertyRead("valueString");
        return this.valueString;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setWebSite(WebSite webSite) {
        setToOneTarget("webSite", webSite, true);
    }

    public WebSite getWebSite() {
        return (WebSite)readProperty("webSite");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "explanation":
                return this.explanation;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "sqlType":
                return this.sqlType;
            case "value":
                return this.value;
            case "valueString":
                return this.valueString;
            case "college":
                return this.college;
            case "webSite":
                return this.webSite;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "explanation":
                this.explanation = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "sqlType":
                this.sqlType = (Integer)val;
                break;
            case "value":
                this.value = (byte[])val;
                break;
            case "valueString":
                this.valueString = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "webSite":
                this.webSite = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.explanation);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.sqlType);
        out.writeObject(this.value);
        out.writeObject(this.valueString);
        out.writeObject(this.college);
        out.writeObject(this.webSite);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.explanation = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.sqlType = (Integer)in.readObject();
        this.value = (byte[])in.readObject();
        this.valueString = (String)in.readObject();
        this.college = in.readObject();
        this.webSite = in.readObject();
    }

}
