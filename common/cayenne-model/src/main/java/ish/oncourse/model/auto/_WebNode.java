package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.WebContentVisibility;
import ish.oncourse.model.WebMenu;
import ish.oncourse.model.WebNodeType;
import ish.oncourse.model.WebSiteVersion;
import ish.oncourse.model.WebUrlAlias;

/**
 * Class _WebNode was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WebNode extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_PROPERTY = "created";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String NODE_NUMBER_PROPERTY = "nodeNumber";
    public static final String PUBLISHED_PROPERTY = "published";
    public static final String SUPPRESS_ON_SITEMAP_PROPERTY = "suppressOnSitemap";
    public static final String WEB_CONTENT_VISIBILITY_PROPERTY = "webContentVisibility";
    public static final String WEB_MENUS_PROPERTY = "webMenus";
    public static final String WEB_NODE_TYPE_PROPERTY = "webNodeType";
    public static final String WEB_SITE_VERSION_PROPERTY = "webSiteVersion";
    public static final String WEB_URL_ALIASES_PROPERTY = "webUrlAliases";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<Integer> NODE_NUMBER = Property.create("nodeNumber", Integer.class);
    public static final Property<Boolean> PUBLISHED = Property.create("published", Boolean.class);
    public static final Property<Boolean> SUPPRESS_ON_SITEMAP = Property.create("suppressOnSitemap", Boolean.class);
    public static final Property<List<WebContentVisibility>> WEB_CONTENT_VISIBILITY = Property.create("webContentVisibility", List.class);
    public static final Property<List<WebMenu>> WEB_MENUS = Property.create("webMenus", List.class);
    public static final Property<WebNodeType> WEB_NODE_TYPE = Property.create("webNodeType", WebNodeType.class);
    public static final Property<WebSiteVersion> WEB_SITE_VERSION = Property.create("webSiteVersion", WebSiteVersion.class);
    public static final Property<List<WebUrlAlias>> WEB_URL_ALIASES = Property.create("webUrlAliases", List.class);

    protected Date created;
    protected Date modified;
    protected String name;
    protected Integer nodeNumber;
    protected boolean published;
    protected boolean suppressOnSitemap;

    protected Object webContentVisibility;
    protected Object webMenus;
    protected Object webNodeType;
    protected Object webSiteVersion;
    protected Object webUrlAliases;

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setNodeNumber(Integer nodeNumber) {
        beforePropertyWrite("nodeNumber", this.nodeNumber, nodeNumber);
        this.nodeNumber = nodeNumber;
    }

    public Integer getNodeNumber() {
        beforePropertyRead("nodeNumber");
        return this.nodeNumber;
    }

    public void setPublished(boolean published) {
        beforePropertyWrite("published", this.published, published);
        this.published = published;
    }

	public boolean isPublished() {
        beforePropertyRead("published");
        return this.published;
    }

    public void setSuppressOnSitemap(boolean suppressOnSitemap) {
        beforePropertyWrite("suppressOnSitemap", this.suppressOnSitemap, suppressOnSitemap);
        this.suppressOnSitemap = suppressOnSitemap;
    }

	public boolean isSuppressOnSitemap() {
        beforePropertyRead("suppressOnSitemap");
        return this.suppressOnSitemap;
    }

    public void addToWebContentVisibility(WebContentVisibility obj) {
        addToManyTarget("webContentVisibility", obj, true);
    }

    public void removeFromWebContentVisibility(WebContentVisibility obj) {
        removeToManyTarget("webContentVisibility", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebContentVisibility> getWebContentVisibility() {
        return (List<WebContentVisibility>)readProperty("webContentVisibility");
    }

    public void addToWebMenus(WebMenu obj) {
        addToManyTarget("webMenus", obj, true);
    }

    public void removeFromWebMenus(WebMenu obj) {
        removeToManyTarget("webMenus", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebMenu> getWebMenus() {
        return (List<WebMenu>)readProperty("webMenus");
    }

    public void setWebNodeType(WebNodeType webNodeType) {
        setToOneTarget("webNodeType", webNodeType, true);
    }

    public WebNodeType getWebNodeType() {
        return (WebNodeType)readProperty("webNodeType");
    }

    public void setWebSiteVersion(WebSiteVersion webSiteVersion) {
        setToOneTarget("webSiteVersion", webSiteVersion, true);
    }

    public WebSiteVersion getWebSiteVersion() {
        return (WebSiteVersion)readProperty("webSiteVersion");
    }

    public void addToWebUrlAliases(WebUrlAlias obj) {
        addToManyTarget("webUrlAliases", obj, true);
    }

    public void removeFromWebUrlAliases(WebUrlAlias obj) {
        removeToManyTarget("webUrlAliases", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<WebUrlAlias> getWebUrlAliases() {
        return (List<WebUrlAlias>)readProperty("webUrlAliases");
    }

    protected abstract void onPostAdd();

    protected abstract void onPreUpdate();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "created":
                return this.created;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "nodeNumber":
                return this.nodeNumber;
            case "published":
                return this.published;
            case "suppressOnSitemap":
                return this.suppressOnSitemap;
            case "webContentVisibility":
                return this.webContentVisibility;
            case "webMenus":
                return this.webMenus;
            case "webNodeType":
                return this.webNodeType;
            case "webSiteVersion":
                return this.webSiteVersion;
            case "webUrlAliases":
                return this.webUrlAliases;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "created":
                this.created = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "nodeNumber":
                this.nodeNumber = (Integer)val;
                break;
            case "published":
                this.published = val == null ? false : (boolean)val;
                break;
            case "suppressOnSitemap":
                this.suppressOnSitemap = val == null ? false : (boolean)val;
                break;
            case "webContentVisibility":
                this.webContentVisibility = val;
                break;
            case "webMenus":
                this.webMenus = val;
                break;
            case "webNodeType":
                this.webNodeType = val;
                break;
            case "webSiteVersion":
                this.webSiteVersion = val;
                break;
            case "webUrlAliases":
                this.webUrlAliases = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.created);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.nodeNumber);
        out.writeBoolean(this.published);
        out.writeBoolean(this.suppressOnSitemap);
        out.writeObject(this.webContentVisibility);
        out.writeObject(this.webMenus);
        out.writeObject(this.webNodeType);
        out.writeObject(this.webSiteVersion);
        out.writeObject(this.webUrlAliases);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.created = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.nodeNumber = (Integer)in.readObject();
        this.published = in.readBoolean();
        this.suppressOnSitemap = in.readBoolean();
        this.webContentVisibility = in.readObject();
        this.webMenus = in.readObject();
        this.webNodeType = in.readObject();
        this.webSiteVersion = in.readObject();
        this.webUrlAliases = in.readObject();
    }

}
