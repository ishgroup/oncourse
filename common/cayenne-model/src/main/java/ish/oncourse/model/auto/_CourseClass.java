package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.ClassFundingSource;
import ish.common.types.CourseClassAttendanceType;
import ish.math.Money;
import ish.oncourse.model.AssessmentClass;
import ish.oncourse.model.College;
import ish.oncourse.model.Course;
import ish.oncourse.model.CourseClassCustomField;
import ish.oncourse.model.CourseClassPaymentPlanLine;
import ish.oncourse.model.DiscountCourseClass;
import ish.oncourse.model.Discussion;
import ish.oncourse.model.Enrolment;
import ish.oncourse.model.ExpandableCayenneDataObject;
import ish.oncourse.model.InvoiceLine;
import ish.oncourse.model.Room;
import ish.oncourse.model.Session;
import ish.oncourse.model.TutorRole;

/**
 * Class _CourseClass was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CourseClass extends ExpandableCayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String ATTENDANCE_TYPE_PROPERTY = "attendanceType";
    public static final String CANCELLED_PROPERTY = "cancelled";
    public static final String CENSUS_DATE_PROPERTY = "censusDate";
    public static final String CODE_PROPERTY = "code";
    public static final String COUNT_OF_SESSIONS_PROPERTY = "countOfSessions";
    public static final String CREATED_PROPERTY = "created";
    public static final String DELIVERY_MODE_PROPERTY = "deliveryMode";
    public static final String DETAIL_PROPERTY = "detail";
    public static final String DETAIL_TEXTILE_PROPERTY = "detailTextile";
    public static final String END_DATE_PROPERTY = "endDate";
    public static final String EXPECTED_HOURS_PROPERTY = "expectedHours";
    public static final String FEE_EX_GST_PROPERTY = "feeExGst";
    public static final String FEE_GST_PROPERTY = "feeGst";
    public static final String FEE_HELP_CLASS_PROPERTY = "feeHelpClass";
    public static final String FULL_TIME_LOAD_PROPERTY = "fullTimeLoad";
    public static final String FUNDING_SOURCE_PROPERTY = "fundingSource";
    public static final String IS_ACTIVE_PROPERTY = "isActive";
    public static final String IS_DISTANT_LEARNING_COURSE_PROPERTY = "isDistantLearningCourse";
    public static final String IS_WEB_VISIBLE_PROPERTY = "isWebVisible";
    public static final String MATERIALS_PROPERTY = "materials";
    public static final String MATERIALS_TEXTILE_PROPERTY = "materialsTextile";
    public static final String MAX_STUDENT_AGE_PROPERTY = "maxStudentAge";
    public static final String MAXIMUM_DAYS_PROPERTY = "maximumDays";
    public static final String MAXIMUM_PLACES_PROPERTY = "maximumPlaces";
    public static final String MIN_STUDENT_AGE_PROPERTY = "minStudentAge";
    public static final String MINIMUM_PLACES_PROPERTY = "minimumPlaces";
    public static final String MINUTES_PER_SESSION_PROPERTY = "minutesPerSession";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String REPORTING_PERIOD_PROPERTY = "reportingPeriod";
    public static final String SESSION_DETAIL_PROPERTY = "sessionDetail";
    public static final String SESSION_DETAIL_TEXTILE_PROPERTY = "sessionDetailTextile";
    public static final String START_DATE_PROPERTY = "startDate";
    public static final String STARTING_MINUTE_PER_SESSION_PROPERTY = "startingMinutePerSession";
    public static final String TIME_ZONE_PROPERTY = "timeZone";
    public static final String ASSESSMENT_CLASSES_PROPERTY = "assessmentClasses";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_PROPERTY = "course";
    public static final String DISCOUNT_COURSE_CLASSES_PROPERTY = "discountCourseClasses";
    public static final String DISCUSSIONS_PROPERTY = "discussions";
    public static final String ENROLMENTS_PROPERTY = "enrolments";
    public static final String INVOICE_LINES_PROPERTY = "invoiceLines";
    public static final String PAYMENT_PLAN_LINES_PROPERTY = "paymentPlanLines";
    public static final String ROOM_PROPERTY = "room";
    public static final String SESSIONS_PROPERTY = "sessions";
    public static final String TUTOR_ROLES_PROPERTY = "tutorRoles";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<CourseClassAttendanceType> ATTENDANCE_TYPE = Property.create("attendanceType", CourseClassAttendanceType.class);
    public static final Property<Boolean> CANCELLED = Property.create("cancelled", Boolean.class);
    public static final Property<Date> CENSUS_DATE = Property.create("censusDate", Date.class);
    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<Integer> COUNT_OF_SESSIONS = Property.create("countOfSessions", Integer.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Integer> DELIVERY_MODE = Property.create("deliveryMode", Integer.class);
    public static final Property<String> DETAIL = Property.create("detail", String.class);
    public static final Property<String> DETAIL_TEXTILE = Property.create("detailTextile", String.class);
    public static final Property<Date> END_DATE = Property.create("endDate", Date.class);
    public static final Property<BigDecimal> EXPECTED_HOURS = Property.create("expectedHours", BigDecimal.class);
    public static final Property<Money> FEE_EX_GST = Property.create("feeExGst", Money.class);
    public static final Property<Money> FEE_GST = Property.create("feeGst", Money.class);
    public static final Property<Boolean> FEE_HELP_CLASS = Property.create("feeHelpClass", Boolean.class);
    public static final Property<String> FULL_TIME_LOAD = Property.create("fullTimeLoad", String.class);
    public static final Property<ClassFundingSource> FUNDING_SOURCE = Property.create("fundingSource", ClassFundingSource.class);
    public static final Property<Boolean> IS_ACTIVE = Property.create("isActive", Boolean.class);
    public static final Property<Boolean> IS_DISTANT_LEARNING_COURSE = Property.create("isDistantLearningCourse", Boolean.class);
    public static final Property<Boolean> IS_WEB_VISIBLE = Property.create("isWebVisible", Boolean.class);
    public static final Property<String> MATERIALS = Property.create("materials", String.class);
    public static final Property<String> MATERIALS_TEXTILE = Property.create("materialsTextile", String.class);
    public static final Property<Integer> MAX_STUDENT_AGE = Property.create("maxStudentAge", Integer.class);
    public static final Property<Integer> MAXIMUM_DAYS = Property.create("maximumDays", Integer.class);
    public static final Property<Integer> MAXIMUM_PLACES = Property.create("maximumPlaces", Integer.class);
    public static final Property<Integer> MIN_STUDENT_AGE = Property.create("minStudentAge", Integer.class);
    public static final Property<Integer> MINIMUM_PLACES = Property.create("minimumPlaces", Integer.class);
    public static final Property<Integer> MINUTES_PER_SESSION = Property.create("minutesPerSession", Integer.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Integer> REPORTING_PERIOD = Property.create("reportingPeriod", Integer.class);
    public static final Property<String> SESSION_DETAIL = Property.create("sessionDetail", String.class);
    public static final Property<String> SESSION_DETAIL_TEXTILE = Property.create("sessionDetailTextile", String.class);
    public static final Property<Date> START_DATE = Property.create("startDate", Date.class);
    public static final Property<Integer> STARTING_MINUTE_PER_SESSION = Property.create("startingMinutePerSession", Integer.class);
    public static final Property<String> TIME_ZONE = Property.create("timeZone", String.class);
    public static final Property<List<AssessmentClass>> ASSESSMENT_CLASSES = Property.create("assessmentClasses", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Course> COURSE = Property.create("course", Course.class);
    public static final Property<List<DiscountCourseClass>> DISCOUNT_COURSE_CLASSES = Property.create("discountCourseClasses", List.class);
    public static final Property<List<Discussion>> DISCUSSIONS = Property.create("discussions", List.class);
    public static final Property<List<Enrolment>> ENROLMENTS = Property.create("enrolments", List.class);
    public static final Property<List<InvoiceLine>> INVOICE_LINES = Property.create("invoiceLines", List.class);
    public static final Property<List<CourseClassPaymentPlanLine>> PAYMENT_PLAN_LINES = Property.create("paymentPlanLines", List.class);
    public static final Property<Room> ROOM = Property.create("room", Room.class);
    public static final Property<List<Session>> SESSIONS = Property.create("sessions", List.class);
    public static final Property<List<TutorRole>> TUTOR_ROLES = Property.create("tutorRoles", List.class);
    public static final Property<List<CourseClassCustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);

    protected Long angelId;
    protected CourseClassAttendanceType attendanceType;
    protected boolean cancelled;
    protected Date censusDate;
    protected String code;
    protected Integer countOfSessions;
    protected Date created;
    protected Integer deliveryMode;
    protected String detail;
    protected String detailTextile;
    protected Date endDate;
    protected BigDecimal expectedHours;
    protected Money feeExGst;
    protected Money feeGst;
    protected Boolean feeHelpClass;
    protected String fullTimeLoad;
    protected ClassFundingSource fundingSource;
    protected Boolean isActive;
    protected Boolean isDistantLearningCourse;
    protected Boolean isWebVisible;
    protected String materials;
    protected String materialsTextile;
    protected Integer maxStudentAge;
    protected Integer maximumDays;
    protected Integer maximumPlaces;
    protected Integer minStudentAge;
    protected Integer minimumPlaces;
    protected Integer minutesPerSession;
    protected Date modified;
    protected Integer reportingPeriod;
    protected String sessionDetail;
    protected String sessionDetailTextile;
    protected Date startDate;
    protected Integer startingMinutePerSession;
    protected String timeZone;

    protected Object assessmentClasses;
    protected Object college;
    protected Object course;
    protected Object discountCourseClasses;
    protected Object discussions;
    protected Object enrolments;
    protected Object invoiceLines;
    protected Object paymentPlanLines;
    protected Object room;
    protected Object sessions;
    protected Object tutorRoles;
    protected Object customFields;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setAttendanceType(CourseClassAttendanceType attendanceType) {
        beforePropertyWrite("attendanceType", this.attendanceType, attendanceType);
        this.attendanceType = attendanceType;
    }

    public CourseClassAttendanceType getAttendanceType() {
        beforePropertyRead("attendanceType");
        return this.attendanceType;
    }

    public void setCancelled(boolean cancelled) {
        beforePropertyWrite("cancelled", this.cancelled, cancelled);
        this.cancelled = cancelled;
    }

	public boolean isCancelled() {
        beforePropertyRead("cancelled");
        return this.cancelled;
    }

    public void setCensusDate(Date censusDate) {
        beforePropertyWrite("censusDate", this.censusDate, censusDate);
        this.censusDate = censusDate;
    }

    public Date getCensusDate() {
        beforePropertyRead("censusDate");
        return this.censusDate;
    }

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setCountOfSessions(Integer countOfSessions) {
        beforePropertyWrite("countOfSessions", this.countOfSessions, countOfSessions);
        this.countOfSessions = countOfSessions;
    }

    public Integer getCountOfSessions() {
        beforePropertyRead("countOfSessions");
        return this.countOfSessions;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDeliveryMode(Integer deliveryMode) {
        beforePropertyWrite("deliveryMode", this.deliveryMode, deliveryMode);
        this.deliveryMode = deliveryMode;
    }

    public Integer getDeliveryMode() {
        beforePropertyRead("deliveryMode");
        return this.deliveryMode;
    }

    public void setDetail(String detail) {
        beforePropertyWrite("detail", this.detail, detail);
        this.detail = detail;
    }

    public String getDetail() {
        beforePropertyRead("detail");
        return this.detail;
    }

    public void setDetailTextile(String detailTextile) {
        beforePropertyWrite("detailTextile", this.detailTextile, detailTextile);
        this.detailTextile = detailTextile;
    }

    public String getDetailTextile() {
        beforePropertyRead("detailTextile");
        return this.detailTextile;
    }

    public void setEndDate(Date endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public Date getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setExpectedHours(BigDecimal expectedHours) {
        beforePropertyWrite("expectedHours", this.expectedHours, expectedHours);
        this.expectedHours = expectedHours;
    }

    public BigDecimal getExpectedHours() {
        beforePropertyRead("expectedHours");
        return this.expectedHours;
    }

    public void setFeeExGst(Money feeExGst) {
        beforePropertyWrite("feeExGst", this.feeExGst, feeExGst);
        this.feeExGst = feeExGst;
    }

    public Money getFeeExGst() {
        beforePropertyRead("feeExGst");
        return this.feeExGst;
    }

    public void setFeeGst(Money feeGst) {
        beforePropertyWrite("feeGst", this.feeGst, feeGst);
        this.feeGst = feeGst;
    }

    public Money getFeeGst() {
        beforePropertyRead("feeGst");
        return this.feeGst;
    }

    public void setFeeHelpClass(Boolean feeHelpClass) {
        beforePropertyWrite("feeHelpClass", this.feeHelpClass, feeHelpClass);
        this.feeHelpClass = feeHelpClass;
    }

    public Boolean getFeeHelpClass() {
        beforePropertyRead("feeHelpClass");
        return this.feeHelpClass;
    }

    public void setFullTimeLoad(String fullTimeLoad) {
        beforePropertyWrite("fullTimeLoad", this.fullTimeLoad, fullTimeLoad);
        this.fullTimeLoad = fullTimeLoad;
    }

    public String getFullTimeLoad() {
        beforePropertyRead("fullTimeLoad");
        return this.fullTimeLoad;
    }

    public void setFundingSource(ClassFundingSource fundingSource) {
        beforePropertyWrite("fundingSource", this.fundingSource, fundingSource);
        this.fundingSource = fundingSource;
    }

    public ClassFundingSource getFundingSource() {
        beforePropertyRead("fundingSource");
        return this.fundingSource;
    }

    public void setIsActive(Boolean isActive) {
        beforePropertyWrite("isActive", this.isActive, isActive);
        this.isActive = isActive;
    }

    public Boolean getIsActive() {
        beforePropertyRead("isActive");
        return this.isActive;
    }

    public void setIsDistantLearningCourse(Boolean isDistantLearningCourse) {
        beforePropertyWrite("isDistantLearningCourse", this.isDistantLearningCourse, isDistantLearningCourse);
        this.isDistantLearningCourse = isDistantLearningCourse;
    }

    public Boolean getIsDistantLearningCourse() {
        beforePropertyRead("isDistantLearningCourse");
        return this.isDistantLearningCourse;
    }

    public void setIsWebVisible(Boolean isWebVisible) {
        beforePropertyWrite("isWebVisible", this.isWebVisible, isWebVisible);
        this.isWebVisible = isWebVisible;
    }

    public Boolean getIsWebVisible() {
        beforePropertyRead("isWebVisible");
        return this.isWebVisible;
    }

    public void setMaterials(String materials) {
        beforePropertyWrite("materials", this.materials, materials);
        this.materials = materials;
    }

    public String getMaterials() {
        beforePropertyRead("materials");
        return this.materials;
    }

    public void setMaterialsTextile(String materialsTextile) {
        beforePropertyWrite("materialsTextile", this.materialsTextile, materialsTextile);
        this.materialsTextile = materialsTextile;
    }

    public String getMaterialsTextile() {
        beforePropertyRead("materialsTextile");
        return this.materialsTextile;
    }

    public void setMaxStudentAge(Integer maxStudentAge) {
        beforePropertyWrite("maxStudentAge", this.maxStudentAge, maxStudentAge);
        this.maxStudentAge = maxStudentAge;
    }

    public Integer getMaxStudentAge() {
        beforePropertyRead("maxStudentAge");
        return this.maxStudentAge;
    }

    public void setMaximumDays(Integer maximumDays) {
        beforePropertyWrite("maximumDays", this.maximumDays, maximumDays);
        this.maximumDays = maximumDays;
    }

    public Integer getMaximumDays() {
        beforePropertyRead("maximumDays");
        return this.maximumDays;
    }

    public void setMaximumPlaces(Integer maximumPlaces) {
        beforePropertyWrite("maximumPlaces", this.maximumPlaces, maximumPlaces);
        this.maximumPlaces = maximumPlaces;
    }

    public Integer getMaximumPlaces() {
        beforePropertyRead("maximumPlaces");
        return this.maximumPlaces;
    }

    public void setMinStudentAge(Integer minStudentAge) {
        beforePropertyWrite("minStudentAge", this.minStudentAge, minStudentAge);
        this.minStudentAge = minStudentAge;
    }

    public Integer getMinStudentAge() {
        beforePropertyRead("minStudentAge");
        return this.minStudentAge;
    }

    public void setMinimumPlaces(Integer minimumPlaces) {
        beforePropertyWrite("minimumPlaces", this.minimumPlaces, minimumPlaces);
        this.minimumPlaces = minimumPlaces;
    }

    public Integer getMinimumPlaces() {
        beforePropertyRead("minimumPlaces");
        return this.minimumPlaces;
    }

    public void setMinutesPerSession(Integer minutesPerSession) {
        beforePropertyWrite("minutesPerSession", this.minutesPerSession, minutesPerSession);
        this.minutesPerSession = minutesPerSession;
    }

    public Integer getMinutesPerSession() {
        beforePropertyRead("minutesPerSession");
        return this.minutesPerSession;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setReportingPeriod(Integer reportingPeriod) {
        beforePropertyWrite("reportingPeriod", this.reportingPeriod, reportingPeriod);
        this.reportingPeriod = reportingPeriod;
    }

    public Integer getReportingPeriod() {
        beforePropertyRead("reportingPeriod");
        return this.reportingPeriod;
    }

    public void setSessionDetail(String sessionDetail) {
        beforePropertyWrite("sessionDetail", this.sessionDetail, sessionDetail);
        this.sessionDetail = sessionDetail;
    }

    public String getSessionDetail() {
        beforePropertyRead("sessionDetail");
        return this.sessionDetail;
    }

    public void setSessionDetailTextile(String sessionDetailTextile) {
        beforePropertyWrite("sessionDetailTextile", this.sessionDetailTextile, sessionDetailTextile);
        this.sessionDetailTextile = sessionDetailTextile;
    }

    public String getSessionDetailTextile() {
        beforePropertyRead("sessionDetailTextile");
        return this.sessionDetailTextile;
    }

    public void setStartDate(Date startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public Date getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setStartingMinutePerSession(Integer startingMinutePerSession) {
        beforePropertyWrite("startingMinutePerSession", this.startingMinutePerSession, startingMinutePerSession);
        this.startingMinutePerSession = startingMinutePerSession;
    }

    public Integer getStartingMinutePerSession() {
        beforePropertyRead("startingMinutePerSession");
        return this.startingMinutePerSession;
    }

    public void setTimeZone(String timeZone) {
        beforePropertyWrite("timeZone", this.timeZone, timeZone);
        this.timeZone = timeZone;
    }

    public String getTimeZone() {
        beforePropertyRead("timeZone");
        return this.timeZone;
    }

    public void addToAssessmentClasses(AssessmentClass obj) {
        addToManyTarget("assessmentClasses", obj, true);
    }

    public void removeFromAssessmentClasses(AssessmentClass obj) {
        removeToManyTarget("assessmentClasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AssessmentClass> getAssessmentClasses() {
        return (List<AssessmentClass>)readProperty("assessmentClasses");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCourse(Course course) {
        setToOneTarget("course", course, true);
    }

    public Course getCourse() {
        return (Course)readProperty("course");
    }

    public void addToDiscountCourseClasses(DiscountCourseClass obj) {
        addToManyTarget("discountCourseClasses", obj, true);
    }

    public void removeFromDiscountCourseClasses(DiscountCourseClass obj) {
        removeToManyTarget("discountCourseClasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscountCourseClass> getDiscountCourseClasses() {
        return (List<DiscountCourseClass>)readProperty("discountCourseClasses");
    }

    public void addToDiscussions(Discussion obj) {
        addToManyTarget("discussions", obj, true);
    }

    public void removeFromDiscussions(Discussion obj) {
        removeToManyTarget("discussions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Discussion> getDiscussions() {
        return (List<Discussion>)readProperty("discussions");
    }

    public void addToEnrolments(Enrolment obj) {
        addToManyTarget("enrolments", obj, true);
    }

    public void removeFromEnrolments(Enrolment obj) {
        removeToManyTarget("enrolments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Enrolment> getEnrolments() {
        return (List<Enrolment>)readProperty("enrolments");
    }

    public void addToInvoiceLines(InvoiceLine obj) {
        addToManyTarget("invoiceLines", obj, true);
    }

    public void removeFromInvoiceLines(InvoiceLine obj) {
        removeToManyTarget("invoiceLines", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<InvoiceLine> getInvoiceLines() {
        return (List<InvoiceLine>)readProperty("invoiceLines");
    }

    public void addToPaymentPlanLines(CourseClassPaymentPlanLine obj) {
        addToManyTarget("paymentPlanLines", obj, true);
    }

    public void removeFromPaymentPlanLines(CourseClassPaymentPlanLine obj) {
        removeToManyTarget("paymentPlanLines", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseClassPaymentPlanLine> getPaymentPlanLines() {
        return (List<CourseClassPaymentPlanLine>)readProperty("paymentPlanLines");
    }

    public void setRoom(Room room) {
        setToOneTarget("room", room, true);
    }

    public Room getRoom() {
        return (Room)readProperty("room");
    }

    public void addToSessions(Session obj) {
        addToManyTarget("sessions", obj, true);
    }

    public void removeFromSessions(Session obj) {
        removeToManyTarget("sessions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Session> getSessions() {
        return (List<Session>)readProperty("sessions");
    }

    public void addToTutorRoles(TutorRole obj) {
        addToManyTarget("tutorRoles", obj, true);
    }

    public void removeFromTutorRoles(TutorRole obj) {
        removeToManyTarget("tutorRoles", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TutorRole> getTutorRoles() {
        return (List<TutorRole>)readProperty("tutorRoles");
    }

    public void addToCustomFields(CourseClassCustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(CourseClassCustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseClassCustomField> getCustomFields() {
        return (List<CourseClassCustomField>)readProperty("customFields");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "attendanceType":
                return this.attendanceType;
            case "cancelled":
                return this.cancelled;
            case "censusDate":
                return this.censusDate;
            case "code":
                return this.code;
            case "countOfSessions":
                return this.countOfSessions;
            case "created":
                return this.created;
            case "deliveryMode":
                return this.deliveryMode;
            case "detail":
                return this.detail;
            case "detailTextile":
                return this.detailTextile;
            case "endDate":
                return this.endDate;
            case "expectedHours":
                return this.expectedHours;
            case "feeExGst":
                return this.feeExGst;
            case "feeGst":
                return this.feeGst;
            case "feeHelpClass":
                return this.feeHelpClass;
            case "fullTimeLoad":
                return this.fullTimeLoad;
            case "fundingSource":
                return this.fundingSource;
            case "isActive":
                return this.isActive;
            case "isDistantLearningCourse":
                return this.isDistantLearningCourse;
            case "isWebVisible":
                return this.isWebVisible;
            case "materials":
                return this.materials;
            case "materialsTextile":
                return this.materialsTextile;
            case "maxStudentAge":
                return this.maxStudentAge;
            case "maximumDays":
                return this.maximumDays;
            case "maximumPlaces":
                return this.maximumPlaces;
            case "minStudentAge":
                return this.minStudentAge;
            case "minimumPlaces":
                return this.minimumPlaces;
            case "minutesPerSession":
                return this.minutesPerSession;
            case "modified":
                return this.modified;
            case "reportingPeriod":
                return this.reportingPeriod;
            case "sessionDetail":
                return this.sessionDetail;
            case "sessionDetailTextile":
                return this.sessionDetailTextile;
            case "startDate":
                return this.startDate;
            case "startingMinutePerSession":
                return this.startingMinutePerSession;
            case "timeZone":
                return this.timeZone;
            case "assessmentClasses":
                return this.assessmentClasses;
            case "college":
                return this.college;
            case "course":
                return this.course;
            case "discountCourseClasses":
                return this.discountCourseClasses;
            case "discussions":
                return this.discussions;
            case "enrolments":
                return this.enrolments;
            case "invoiceLines":
                return this.invoiceLines;
            case "paymentPlanLines":
                return this.paymentPlanLines;
            case "room":
                return this.room;
            case "sessions":
                return this.sessions;
            case "tutorRoles":
                return this.tutorRoles;
            case "customFields":
                return this.customFields;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "attendanceType":
                this.attendanceType = (CourseClassAttendanceType)val;
                break;
            case "cancelled":
                this.cancelled = val == null ? false : (boolean)val;
                break;
            case "censusDate":
                this.censusDate = (Date)val;
                break;
            case "code":
                this.code = (String)val;
                break;
            case "countOfSessions":
                this.countOfSessions = (Integer)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "deliveryMode":
                this.deliveryMode = (Integer)val;
                break;
            case "detail":
                this.detail = (String)val;
                break;
            case "detailTextile":
                this.detailTextile = (String)val;
                break;
            case "endDate":
                this.endDate = (Date)val;
                break;
            case "expectedHours":
                this.expectedHours = (BigDecimal)val;
                break;
            case "feeExGst":
                this.feeExGst = (Money)val;
                break;
            case "feeGst":
                this.feeGst = (Money)val;
                break;
            case "feeHelpClass":
                this.feeHelpClass = (Boolean)val;
                break;
            case "fullTimeLoad":
                this.fullTimeLoad = (String)val;
                break;
            case "fundingSource":
                this.fundingSource = (ClassFundingSource)val;
                break;
            case "isActive":
                this.isActive = (Boolean)val;
                break;
            case "isDistantLearningCourse":
                this.isDistantLearningCourse = (Boolean)val;
                break;
            case "isWebVisible":
                this.isWebVisible = (Boolean)val;
                break;
            case "materials":
                this.materials = (String)val;
                break;
            case "materialsTextile":
                this.materialsTextile = (String)val;
                break;
            case "maxStudentAge":
                this.maxStudentAge = (Integer)val;
                break;
            case "maximumDays":
                this.maximumDays = (Integer)val;
                break;
            case "maximumPlaces":
                this.maximumPlaces = (Integer)val;
                break;
            case "minStudentAge":
                this.minStudentAge = (Integer)val;
                break;
            case "minimumPlaces":
                this.minimumPlaces = (Integer)val;
                break;
            case "minutesPerSession":
                this.minutesPerSession = (Integer)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "reportingPeriod":
                this.reportingPeriod = (Integer)val;
                break;
            case "sessionDetail":
                this.sessionDetail = (String)val;
                break;
            case "sessionDetailTextile":
                this.sessionDetailTextile = (String)val;
                break;
            case "startDate":
                this.startDate = (Date)val;
                break;
            case "startingMinutePerSession":
                this.startingMinutePerSession = (Integer)val;
                break;
            case "timeZone":
                this.timeZone = (String)val;
                break;
            case "assessmentClasses":
                this.assessmentClasses = val;
                break;
            case "college":
                this.college = val;
                break;
            case "course":
                this.course = val;
                break;
            case "discountCourseClasses":
                this.discountCourseClasses = val;
                break;
            case "discussions":
                this.discussions = val;
                break;
            case "enrolments":
                this.enrolments = val;
                break;
            case "invoiceLines":
                this.invoiceLines = val;
                break;
            case "paymentPlanLines":
                this.paymentPlanLines = val;
                break;
            case "room":
                this.room = val;
                break;
            case "sessions":
                this.sessions = val;
                break;
            case "tutorRoles":
                this.tutorRoles = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.attendanceType);
        out.writeBoolean(this.cancelled);
        out.writeObject(this.censusDate);
        out.writeObject(this.code);
        out.writeObject(this.countOfSessions);
        out.writeObject(this.created);
        out.writeObject(this.deliveryMode);
        out.writeObject(this.detail);
        out.writeObject(this.detailTextile);
        out.writeObject(this.endDate);
        out.writeObject(this.expectedHours);
        out.writeObject(this.feeExGst);
        out.writeObject(this.feeGst);
        out.writeObject(this.feeHelpClass);
        out.writeObject(this.fullTimeLoad);
        out.writeObject(this.fundingSource);
        out.writeObject(this.isActive);
        out.writeObject(this.isDistantLearningCourse);
        out.writeObject(this.isWebVisible);
        out.writeObject(this.materials);
        out.writeObject(this.materialsTextile);
        out.writeObject(this.maxStudentAge);
        out.writeObject(this.maximumDays);
        out.writeObject(this.maximumPlaces);
        out.writeObject(this.minStudentAge);
        out.writeObject(this.minimumPlaces);
        out.writeObject(this.minutesPerSession);
        out.writeObject(this.modified);
        out.writeObject(this.reportingPeriod);
        out.writeObject(this.sessionDetail);
        out.writeObject(this.sessionDetailTextile);
        out.writeObject(this.startDate);
        out.writeObject(this.startingMinutePerSession);
        out.writeObject(this.timeZone);
        out.writeObject(this.assessmentClasses);
        out.writeObject(this.college);
        out.writeObject(this.course);
        out.writeObject(this.discountCourseClasses);
        out.writeObject(this.discussions);
        out.writeObject(this.enrolments);
        out.writeObject(this.invoiceLines);
        out.writeObject(this.paymentPlanLines);
        out.writeObject(this.room);
        out.writeObject(this.sessions);
        out.writeObject(this.tutorRoles);
        out.writeObject(this.customFields);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.attendanceType = (CourseClassAttendanceType)in.readObject();
        this.cancelled = in.readBoolean();
        this.censusDate = (Date)in.readObject();
        this.code = (String)in.readObject();
        this.countOfSessions = (Integer)in.readObject();
        this.created = (Date)in.readObject();
        this.deliveryMode = (Integer)in.readObject();
        this.detail = (String)in.readObject();
        this.detailTextile = (String)in.readObject();
        this.endDate = (Date)in.readObject();
        this.expectedHours = (BigDecimal)in.readObject();
        this.feeExGst = (Money)in.readObject();
        this.feeGst = (Money)in.readObject();
        this.feeHelpClass = (Boolean)in.readObject();
        this.fullTimeLoad = (String)in.readObject();
        this.fundingSource = (ClassFundingSource)in.readObject();
        this.isActive = (Boolean)in.readObject();
        this.isDistantLearningCourse = (Boolean)in.readObject();
        this.isWebVisible = (Boolean)in.readObject();
        this.materials = (String)in.readObject();
        this.materialsTextile = (String)in.readObject();
        this.maxStudentAge = (Integer)in.readObject();
        this.maximumDays = (Integer)in.readObject();
        this.maximumPlaces = (Integer)in.readObject();
        this.minStudentAge = (Integer)in.readObject();
        this.minimumPlaces = (Integer)in.readObject();
        this.minutesPerSession = (Integer)in.readObject();
        this.modified = (Date)in.readObject();
        this.reportingPeriod = (Integer)in.readObject();
        this.sessionDetail = (String)in.readObject();
        this.sessionDetailTextile = (String)in.readObject();
        this.startDate = (Date)in.readObject();
        this.startingMinutePerSession = (Integer)in.readObject();
        this.timeZone = (String)in.readObject();
        this.assessmentClasses = in.readObject();
        this.college = in.readObject();
        this.course = in.readObject();
        this.discountCourseClasses = in.readObject();
        this.discussions = in.readObject();
        this.enrolments = in.readObject();
        this.invoiceLines = in.readObject();
        this.paymentPlanLines = in.readObject();
        this.room = in.readObject();
        this.sessions = in.readObject();
        this.tutorRoles = in.readObject();
        this.customFields = in.readObject();
    }

}
