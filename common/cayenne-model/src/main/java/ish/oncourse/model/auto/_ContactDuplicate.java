package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.common.types.ContactDuplicateStatus;
import ish.oncourse.model.College;
import ish.oncourse.model.Contact;
import ish.oncourse.model.SystemUser;

/**
 * Class _ContactDuplicate was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ContactDuplicate extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CONTACT_TO_DELETE_ANGEL_ID_PROPERTY = "contactToDeleteAngelId";
    public static final String CONTACT_TO_DELETE_ID_PROPERTY = "contactToDeleteId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String STATUS_PROPERTY = "status";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONTACT_TO_UPDATE_PROPERTY = "contactToUpdate";
    public static final String CREATED_BY_USER_PROPERTY = "createdByUser";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Long> CONTACT_TO_DELETE_ANGEL_ID = Property.create("contactToDeleteAngelId", Long.class);
    public static final Property<Long> CONTACT_TO_DELETE_ID = Property.create("contactToDeleteId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<ContactDuplicateStatus> STATUS = Property.create("status", ContactDuplicateStatus.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Contact> CONTACT_TO_UPDATE = Property.create("contactToUpdate", Contact.class);
    public static final Property<SystemUser> CREATED_BY_USER = Property.create("createdByUser", SystemUser.class);

    protected Long angelId;
    protected Long contactToDeleteAngelId;
    protected Long contactToDeleteId;
    protected Date created;
    protected String description;
    protected Date modified;
    protected ContactDuplicateStatus status;

    protected Object college;
    protected Object contactToUpdate;
    protected Object createdByUser;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setContactToDeleteAngelId(Long contactToDeleteAngelId) {
        beforePropertyWrite("contactToDeleteAngelId", this.contactToDeleteAngelId, contactToDeleteAngelId);
        this.contactToDeleteAngelId = contactToDeleteAngelId;
    }

    public Long getContactToDeleteAngelId() {
        beforePropertyRead("contactToDeleteAngelId");
        return this.contactToDeleteAngelId;
    }

    public void setContactToDeleteId(Long contactToDeleteId) {
        beforePropertyWrite("contactToDeleteId", this.contactToDeleteId, contactToDeleteId);
        this.contactToDeleteId = contactToDeleteId;
    }

    public Long getContactToDeleteId() {
        beforePropertyRead("contactToDeleteId");
        return this.contactToDeleteId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setStatus(ContactDuplicateStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public ContactDuplicateStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setContactToUpdate(Contact contactToUpdate) {
        setToOneTarget("contactToUpdate", contactToUpdate, true);
    }

    public Contact getContactToUpdate() {
        return (Contact)readProperty("contactToUpdate");
    }

    public void setCreatedByUser(SystemUser createdByUser) {
        setToOneTarget("createdByUser", createdByUser, true);
    }

    public SystemUser getCreatedByUser() {
        return (SystemUser)readProperty("createdByUser");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "contactToDeleteAngelId":
                return this.contactToDeleteAngelId;
            case "contactToDeleteId":
                return this.contactToDeleteId;
            case "created":
                return this.created;
            case "description":
                return this.description;
            case "modified":
                return this.modified;
            case "status":
                return this.status;
            case "college":
                return this.college;
            case "contactToUpdate":
                return this.contactToUpdate;
            case "createdByUser":
                return this.createdByUser;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "contactToDeleteAngelId":
                this.contactToDeleteAngelId = (Long)val;
                break;
            case "contactToDeleteId":
                this.contactToDeleteId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "status":
                this.status = (ContactDuplicateStatus)val;
                break;
            case "college":
                this.college = val;
                break;
            case "contactToUpdate":
                this.contactToUpdate = val;
                break;
            case "createdByUser":
                this.createdByUser = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.contactToDeleteAngelId);
        out.writeObject(this.contactToDeleteId);
        out.writeObject(this.created);
        out.writeObject(this.description);
        out.writeObject(this.modified);
        out.writeObject(this.status);
        out.writeObject(this.college);
        out.writeObject(this.contactToUpdate);
        out.writeObject(this.createdByUser);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.contactToDeleteAngelId = (Long)in.readObject();
        this.contactToDeleteId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.status = (ContactDuplicateStatus)in.readObject();
        this.college = in.readObject();
        this.contactToUpdate = in.readObject();
        this.createdByUser = in.readObject();
    }

}
