package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.ClassFundingSource;
import ish.common.types.OutcomeStatus;
import ish.oncourse.model.CertificateOutcome;
import ish.oncourse.model.College;
import ish.oncourse.model.Enrolment;
import ish.oncourse.model.Module;
import ish.oncourse.model.PriorLearning;
import ish.oncourse.model.Tutor;

/**
 * Class _Outcome was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Outcome extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String DELIVERY_MODE_PROPERTY = "deliveryMode";
    public static final String END_DATE_PROPERTY = "endDate";
    public static final String FUNDING_SOURCE_PROPERTY = "fundingSource";
    public static final String MARKED_BY_TUTOR_DATE_PROPERTY = "markedByTutorDate";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String REPORTABLE_HOURS_PROPERTY = "reportableHours";
    public static final String START_DATE_PROPERTY = "startDate";
    public static final String STATUS_PROPERTY = "status";
    public static final String CERTIFICATE_OUTCOMES_PROPERTY = "certificateOutcomes";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String ENROLMENT_PROPERTY = "enrolment";
    public static final String MARKED_BY_TUTOR_PROPERTY = "markedByTutor";
    public static final String MODULE_PROPERTY = "module";
    public static final String PRIOR_LEARNING_PROPERTY = "priorLearning";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Integer> DELIVERY_MODE = Property.create("deliveryMode", Integer.class);
    public static final Property<Date> END_DATE = Property.create("endDate", Date.class);
    public static final Property<ClassFundingSource> FUNDING_SOURCE = Property.create("fundingSource", ClassFundingSource.class);
    public static final Property<Date> MARKED_BY_TUTOR_DATE = Property.create("markedByTutorDate", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Double> REPORTABLE_HOURS = Property.create("reportableHours", Double.class);
    public static final Property<Date> START_DATE = Property.create("startDate", Date.class);
    public static final Property<OutcomeStatus> STATUS = Property.create("status", OutcomeStatus.class);
    public static final Property<List<CertificateOutcome>> CERTIFICATE_OUTCOMES = Property.create("certificateOutcomes", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Enrolment> ENROLMENT = Property.create("enrolment", Enrolment.class);
    public static final Property<Tutor> MARKED_BY_TUTOR = Property.create("markedByTutor", Tutor.class);
    public static final Property<Module> MODULE = Property.create("module", Module.class);
    public static final Property<PriorLearning> PRIOR_LEARNING = Property.create("priorLearning", PriorLearning.class);

    protected Long angelId;
    protected Date created;
    protected Integer deliveryMode;
    protected Date endDate;
    protected ClassFundingSource fundingSource;
    protected Date markedByTutorDate;
    protected Date modified;
    protected Double reportableHours;
    protected Date startDate;
    protected OutcomeStatus status;

    protected Object certificateOutcomes;
    protected Object college;
    protected Object enrolment;
    protected Object markedByTutor;
    protected Object module;
    protected Object priorLearning;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDeliveryMode(Integer deliveryMode) {
        beforePropertyWrite("deliveryMode", this.deliveryMode, deliveryMode);
        this.deliveryMode = deliveryMode;
    }

    public Integer getDeliveryMode() {
        beforePropertyRead("deliveryMode");
        return this.deliveryMode;
    }

    public void setEndDate(Date endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public Date getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setFundingSource(ClassFundingSource fundingSource) {
        beforePropertyWrite("fundingSource", this.fundingSource, fundingSource);
        this.fundingSource = fundingSource;
    }

    public ClassFundingSource getFundingSource() {
        beforePropertyRead("fundingSource");
        return this.fundingSource;
    }

    public void setMarkedByTutorDate(Date markedByTutorDate) {
        beforePropertyWrite("markedByTutorDate", this.markedByTutorDate, markedByTutorDate);
        this.markedByTutorDate = markedByTutorDate;
    }

    public Date getMarkedByTutorDate() {
        beforePropertyRead("markedByTutorDate");
        return this.markedByTutorDate;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setReportableHours(Double reportableHours) {
        beforePropertyWrite("reportableHours", this.reportableHours, reportableHours);
        this.reportableHours = reportableHours;
    }

    public Double getReportableHours() {
        beforePropertyRead("reportableHours");
        return this.reportableHours;
    }

    public void setStartDate(Date startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public Date getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setStatus(OutcomeStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public OutcomeStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void addToCertificateOutcomes(CertificateOutcome obj) {
        addToManyTarget("certificateOutcomes", obj, true);
    }

    public void removeFromCertificateOutcomes(CertificateOutcome obj) {
        removeToManyTarget("certificateOutcomes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CertificateOutcome> getCertificateOutcomes() {
        return (List<CertificateOutcome>)readProperty("certificateOutcomes");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setEnrolment(Enrolment enrolment) {
        setToOneTarget("enrolment", enrolment, true);
    }

    public Enrolment getEnrolment() {
        return (Enrolment)readProperty("enrolment");
    }

    public void setMarkedByTutor(Tutor markedByTutor) {
        setToOneTarget("markedByTutor", markedByTutor, true);
    }

    public Tutor getMarkedByTutor() {
        return (Tutor)readProperty("markedByTutor");
    }

    public void setModule(Module module) {
        setToOneTarget("module", module, true);
    }

    public Module getModule() {
        return (Module)readProperty("module");
    }

    public void setPriorLearning(PriorLearning priorLearning) {
        setToOneTarget("priorLearning", priorLearning, true);
    }

    public PriorLearning getPriorLearning() {
        return (PriorLearning)readProperty("priorLearning");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "deliveryMode":
                return this.deliveryMode;
            case "endDate":
                return this.endDate;
            case "fundingSource":
                return this.fundingSource;
            case "markedByTutorDate":
                return this.markedByTutorDate;
            case "modified":
                return this.modified;
            case "reportableHours":
                return this.reportableHours;
            case "startDate":
                return this.startDate;
            case "status":
                return this.status;
            case "certificateOutcomes":
                return this.certificateOutcomes;
            case "college":
                return this.college;
            case "enrolment":
                return this.enrolment;
            case "markedByTutor":
                return this.markedByTutor;
            case "module":
                return this.module;
            case "priorLearning":
                return this.priorLearning;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "deliveryMode":
                this.deliveryMode = (Integer)val;
                break;
            case "endDate":
                this.endDate = (Date)val;
                break;
            case "fundingSource":
                this.fundingSource = (ClassFundingSource)val;
                break;
            case "markedByTutorDate":
                this.markedByTutorDate = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "reportableHours":
                this.reportableHours = (Double)val;
                break;
            case "startDate":
                this.startDate = (Date)val;
                break;
            case "status":
                this.status = (OutcomeStatus)val;
                break;
            case "certificateOutcomes":
                this.certificateOutcomes = val;
                break;
            case "college":
                this.college = val;
                break;
            case "enrolment":
                this.enrolment = val;
                break;
            case "markedByTutor":
                this.markedByTutor = val;
                break;
            case "module":
                this.module = val;
                break;
            case "priorLearning":
                this.priorLearning = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.deliveryMode);
        out.writeObject(this.endDate);
        out.writeObject(this.fundingSource);
        out.writeObject(this.markedByTutorDate);
        out.writeObject(this.modified);
        out.writeObject(this.reportableHours);
        out.writeObject(this.startDate);
        out.writeObject(this.status);
        out.writeObject(this.certificateOutcomes);
        out.writeObject(this.college);
        out.writeObject(this.enrolment);
        out.writeObject(this.markedByTutor);
        out.writeObject(this.module);
        out.writeObject(this.priorLearning);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.deliveryMode = (Integer)in.readObject();
        this.endDate = (Date)in.readObject();
        this.fundingSource = (ClassFundingSource)in.readObject();
        this.markedByTutorDate = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.reportableHours = (Double)in.readObject();
        this.startDate = (Date)in.readObject();
        this.status = (OutcomeStatus)in.readObject();
        this.certificateOutcomes = in.readObject();
        this.college = in.readObject();
        this.enrolment = in.readObject();
        this.markedByTutor = in.readObject();
        this.module = in.readObject();
        this.priorLearning = in.readObject();
    }

}
