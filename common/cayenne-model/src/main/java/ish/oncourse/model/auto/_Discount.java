package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.DiscountType;
import ish.math.Money;
import ish.math.MoneyRounding;
import ish.oncourse.model.College;
import ish.oncourse.model.CorporatePassDiscount;
import ish.oncourse.model.DiscountConcessionType;
import ish.oncourse.model.DiscountCourseClass;
import ish.oncourse.model.DiscountMembership;
import ish.oncourse.model.InvoiceLineDiscount;

/**
 * Class _Discount was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Discount extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CODE_PROPERTY = "code";
    public static final String COMBINATION_TYPE_PROPERTY = "combinationType";
    public static final String CREATED_PROPERTY = "created";
    public static final String DETAIL_PROPERTY = "detail";
    public static final String DISCOUNT_AMOUNT_PROPERTY = "discountAmount";
    public static final String DISCOUNT_RATE_PROPERTY = "discountRate";
    public static final String DISCOUNT_TYPE_PROPERTY = "discountType";
    public static final String HIDE_ON_WEB_PROPERTY = "hideOnWeb";
    public static final String IS_AVAILABLE_ON_WEB_PROPERTY = "isAvailableOnWeb";
    public static final String MAXIMUM_DISCOUNT_PROPERTY = "maximumDiscount";
    public static final String MIN_ENROLMENTS_PROPERTY = "minEnrolments";
    public static final String MIN_VALUE_PROPERTY = "minValue";
    public static final String MINIMUM_DISCOUNT_PROPERTY = "minimumDiscount";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String ROUNDING_MODE_PROPERTY = "roundingMode";
    public static final String STUDENT_AGE_PROPERTY = "studentAge";
    public static final String STUDENT_AGE_OPERATOR_PROPERTY = "studentAgeOperator";
    public static final String STUDENT_ENROLLED_WITHIN_DAYS_PROPERTY = "studentEnrolledWithinDays";
    public static final String STUDENT_POSTCODES_PROPERTY = "studentPostcodes";
    public static final String STUDENTS_QUALIFIER_PROPERTY = "studentsQualifier";
    public static final String TIME_ZONE_PROPERTY = "timeZone";
    public static final String VALID_FROM_PROPERTY = "validFrom";
    public static final String VALID_FROM_OFFSET_PROPERTY = "validFromOffset";
    public static final String VALID_TO_PROPERTY = "validTo";
    public static final String VALID_TO_OFFSET_PROPERTY = "validToOffset";
    public static final String LIMIT_PREVIOUS_ENROLMENT_PROPERTY = "limitPreviousEnrolment";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CORPORATE_PASS_DISCOUNTS_PROPERTY = "corporatePassDiscounts";
    public static final String DISCOUNT_CONCESSION_TYPES_PROPERTY = "discountConcessionTypes";
    public static final String DISCOUNT_COURSE_CLASSES_PROPERTY = "discountCourseClasses";
    public static final String DISCOUNT_MEMBERSHIP_PRODUCTS_PROPERTY = "discountMembershipProducts";
    public static final String INVOICE_LINE_DISCOUNTS_PROPERTY = "invoiceLineDiscounts";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<Boolean> COMBINATION_TYPE = Property.create("combinationType", Boolean.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DETAIL = Property.create("detail", String.class);
    public static final Property<Money> DISCOUNT_AMOUNT = Property.create("discountAmount", Money.class);
    public static final Property<BigDecimal> DISCOUNT_RATE = Property.create("discountRate", BigDecimal.class);
    public static final Property<DiscountType> DISCOUNT_TYPE = Property.create("discountType", DiscountType.class);
    public static final Property<Boolean> HIDE_ON_WEB = Property.create("hideOnWeb", Boolean.class);
    public static final Property<Boolean> IS_AVAILABLE_ON_WEB = Property.create("isAvailableOnWeb", Boolean.class);
    public static final Property<Money> MAXIMUM_DISCOUNT = Property.create("maximumDiscount", Money.class);
    public static final Property<Integer> MIN_ENROLMENTS = Property.create("minEnrolments", Integer.class);
    public static final Property<Money> MIN_VALUE = Property.create("minValue", Money.class);
    public static final Property<Money> MINIMUM_DISCOUNT = Property.create("minimumDiscount", Money.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<MoneyRounding> ROUNDING_MODE = Property.create("roundingMode", MoneyRounding.class);
    public static final Property<Integer> STUDENT_AGE = Property.create("studentAge", Integer.class);
    public static final Property<String> STUDENT_AGE_OPERATOR = Property.create("studentAgeOperator", String.class);
    public static final Property<Integer> STUDENT_ENROLLED_WITHIN_DAYS = Property.create("studentEnrolledWithinDays", Integer.class);
    public static final Property<String> STUDENT_POSTCODES = Property.create("studentPostcodes", String.class);
    public static final Property<byte[]> STUDENTS_QUALIFIER = Property.create("studentsQualifier", byte[].class);
    public static final Property<String> TIME_ZONE = Property.create("timeZone", String.class);
    public static final Property<Date> VALID_FROM = Property.create("validFrom", Date.class);
    public static final Property<Integer> VALID_FROM_OFFSET = Property.create("validFromOffset", Integer.class);
    public static final Property<Date> VALID_TO = Property.create("validTo", Date.class);
    public static final Property<Integer> VALID_TO_OFFSET = Property.create("validToOffset", Integer.class);
    public static final Property<Boolean> LIMIT_PREVIOUS_ENROLMENT = Property.create("limitPreviousEnrolment", Boolean.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<CorporatePassDiscount>> CORPORATE_PASS_DISCOUNTS = Property.create("corporatePassDiscounts", List.class);
    public static final Property<List<DiscountConcessionType>> DISCOUNT_CONCESSION_TYPES = Property.create("discountConcessionTypes", List.class);
    public static final Property<List<DiscountCourseClass>> DISCOUNT_COURSE_CLASSES = Property.create("discountCourseClasses", List.class);
    public static final Property<List<DiscountMembership>> DISCOUNT_MEMBERSHIP_PRODUCTS = Property.create("discountMembershipProducts", List.class);
    public static final Property<List<InvoiceLineDiscount>> INVOICE_LINE_DISCOUNTS = Property.create("invoiceLineDiscounts", List.class);

    protected Long angelId;
    protected String code;
    protected Boolean combinationType;
    protected Date created;
    protected String detail;
    protected Money discountAmount;
    protected BigDecimal discountRate;
    protected DiscountType discountType;
    protected Boolean hideOnWeb;
    protected Boolean isAvailableOnWeb;
    protected Money maximumDiscount;
    protected Integer minEnrolments;
    protected Money minValue;
    protected Money minimumDiscount;
    protected Date modified;
    protected String name;
    protected MoneyRounding roundingMode;
    protected Integer studentAge;
    protected String studentAgeOperator;
    protected Integer studentEnrolledWithinDays;
    protected String studentPostcodes;
    protected byte[] studentsQualifier;
    protected String timeZone;
    protected Date validFrom;
    protected Integer validFromOffset;
    protected Date validTo;
    protected Integer validToOffset;
    protected Boolean limitPreviousEnrolment;

    protected Object college;
    protected Object corporatePassDiscounts;
    protected Object discountConcessionTypes;
    protected Object discountCourseClasses;
    protected Object discountMembershipProducts;
    protected Object invoiceLineDiscounts;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setCombinationType(Boolean combinationType) {
        beforePropertyWrite("combinationType", this.combinationType, combinationType);
        this.combinationType = combinationType;
    }

    public Boolean getCombinationType() {
        beforePropertyRead("combinationType");
        return this.combinationType;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDetail(String detail) {
        beforePropertyWrite("detail", this.detail, detail);
        this.detail = detail;
    }

    public String getDetail() {
        beforePropertyRead("detail");
        return this.detail;
    }

    public void setDiscountAmount(Money discountAmount) {
        beforePropertyWrite("discountAmount", this.discountAmount, discountAmount);
        this.discountAmount = discountAmount;
    }

    public Money getDiscountAmount() {
        beforePropertyRead("discountAmount");
        return this.discountAmount;
    }

    public void setDiscountRate(BigDecimal discountRate) {
        beforePropertyWrite("discountRate", this.discountRate, discountRate);
        this.discountRate = discountRate;
    }

    public BigDecimal getDiscountRate() {
        beforePropertyRead("discountRate");
        return this.discountRate;
    }

    public void setDiscountType(DiscountType discountType) {
        beforePropertyWrite("discountType", this.discountType, discountType);
        this.discountType = discountType;
    }

    public DiscountType getDiscountType() {
        beforePropertyRead("discountType");
        return this.discountType;
    }

    public void setHideOnWeb(Boolean hideOnWeb) {
        beforePropertyWrite("hideOnWeb", this.hideOnWeb, hideOnWeb);
        this.hideOnWeb = hideOnWeb;
    }

    public Boolean getHideOnWeb() {
        beforePropertyRead("hideOnWeb");
        return this.hideOnWeb;
    }

    public void setIsAvailableOnWeb(Boolean isAvailableOnWeb) {
        beforePropertyWrite("isAvailableOnWeb", this.isAvailableOnWeb, isAvailableOnWeb);
        this.isAvailableOnWeb = isAvailableOnWeb;
    }

    public Boolean getIsAvailableOnWeb() {
        beforePropertyRead("isAvailableOnWeb");
        return this.isAvailableOnWeb;
    }

    public void setMaximumDiscount(Money maximumDiscount) {
        beforePropertyWrite("maximumDiscount", this.maximumDiscount, maximumDiscount);
        this.maximumDiscount = maximumDiscount;
    }

    public Money getMaximumDiscount() {
        beforePropertyRead("maximumDiscount");
        return this.maximumDiscount;
    }

    public void setMinEnrolments(Integer minEnrolments) {
        beforePropertyWrite("minEnrolments", this.minEnrolments, minEnrolments);
        this.minEnrolments = minEnrolments;
    }

    public Integer getMinEnrolments() {
        beforePropertyRead("minEnrolments");
        return this.minEnrolments;
    }

    public void setMinValue(Money minValue) {
        beforePropertyWrite("minValue", this.minValue, minValue);
        this.minValue = minValue;
    }

    public Money getMinValue() {
        beforePropertyRead("minValue");
        return this.minValue;
    }

    public void setMinimumDiscount(Money minimumDiscount) {
        beforePropertyWrite("minimumDiscount", this.minimumDiscount, minimumDiscount);
        this.minimumDiscount = minimumDiscount;
    }

    public Money getMinimumDiscount() {
        beforePropertyRead("minimumDiscount");
        return this.minimumDiscount;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setRoundingMode(MoneyRounding roundingMode) {
        beforePropertyWrite("roundingMode", this.roundingMode, roundingMode);
        this.roundingMode = roundingMode;
    }

    public MoneyRounding getRoundingMode() {
        beforePropertyRead("roundingMode");
        return this.roundingMode;
    }

    public void setStudentAge(Integer studentAge) {
        beforePropertyWrite("studentAge", this.studentAge, studentAge);
        this.studentAge = studentAge;
    }

    public Integer getStudentAge() {
        beforePropertyRead("studentAge");
        return this.studentAge;
    }

    public void setStudentAgeOperator(String studentAgeOperator) {
        beforePropertyWrite("studentAgeOperator", this.studentAgeOperator, studentAgeOperator);
        this.studentAgeOperator = studentAgeOperator;
    }

    public String getStudentAgeOperator() {
        beforePropertyRead("studentAgeOperator");
        return this.studentAgeOperator;
    }

    public void setStudentEnrolledWithinDays(Integer studentEnrolledWithinDays) {
        beforePropertyWrite("studentEnrolledWithinDays", this.studentEnrolledWithinDays, studentEnrolledWithinDays);
        this.studentEnrolledWithinDays = studentEnrolledWithinDays;
    }

    public Integer getStudentEnrolledWithinDays() {
        beforePropertyRead("studentEnrolledWithinDays");
        return this.studentEnrolledWithinDays;
    }

    public void setStudentPostcodes(String studentPostcodes) {
        beforePropertyWrite("studentPostcodes", this.studentPostcodes, studentPostcodes);
        this.studentPostcodes = studentPostcodes;
    }

    public String getStudentPostcodes() {
        beforePropertyRead("studentPostcodes");
        return this.studentPostcodes;
    }

    public void setStudentsQualifier(byte[] studentsQualifier) {
        beforePropertyWrite("studentsQualifier", this.studentsQualifier, studentsQualifier);
        this.studentsQualifier = studentsQualifier;
    }

    public byte[] getStudentsQualifier() {
        beforePropertyRead("studentsQualifier");
        return this.studentsQualifier;
    }

    public void setTimeZone(String timeZone) {
        beforePropertyWrite("timeZone", this.timeZone, timeZone);
        this.timeZone = timeZone;
    }

    public String getTimeZone() {
        beforePropertyRead("timeZone");
        return this.timeZone;
    }

    public void setValidFrom(Date validFrom) {
        beforePropertyWrite("validFrom", this.validFrom, validFrom);
        this.validFrom = validFrom;
    }

    public Date getValidFrom() {
        beforePropertyRead("validFrom");
        return this.validFrom;
    }

    public void setValidFromOffset(Integer validFromOffset) {
        beforePropertyWrite("validFromOffset", this.validFromOffset, validFromOffset);
        this.validFromOffset = validFromOffset;
    }

    public Integer getValidFromOffset() {
        beforePropertyRead("validFromOffset");
        return this.validFromOffset;
    }

    public void setValidTo(Date validTo) {
        beforePropertyWrite("validTo", this.validTo, validTo);
        this.validTo = validTo;
    }

    public Date getValidTo() {
        beforePropertyRead("validTo");
        return this.validTo;
    }

    public void setValidToOffset(Integer validToOffset) {
        beforePropertyWrite("validToOffset", this.validToOffset, validToOffset);
        this.validToOffset = validToOffset;
    }

    public Integer getValidToOffset() {
        beforePropertyRead("validToOffset");
        return this.validToOffset;
    }

    public void setLimitPreviousEnrolment(Boolean limitPreviousEnrolment) {
        beforePropertyWrite("limitPreviousEnrolment", this.limitPreviousEnrolment, limitPreviousEnrolment);
        this.limitPreviousEnrolment = limitPreviousEnrolment;
    }

    public Boolean getLimitPreviousEnrolment() {
        beforePropertyRead("limitPreviousEnrolment");
        return this.limitPreviousEnrolment;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToCorporatePassDiscounts(CorporatePassDiscount obj) {
        addToManyTarget("corporatePassDiscounts", obj, true);
    }

    public void removeFromCorporatePassDiscounts(CorporatePassDiscount obj) {
        removeToManyTarget("corporatePassDiscounts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CorporatePassDiscount> getCorporatePassDiscounts() {
        return (List<CorporatePassDiscount>)readProperty("corporatePassDiscounts");
    }

    public void addToDiscountConcessionTypes(DiscountConcessionType obj) {
        addToManyTarget("discountConcessionTypes", obj, true);
    }

    public void removeFromDiscountConcessionTypes(DiscountConcessionType obj) {
        removeToManyTarget("discountConcessionTypes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscountConcessionType> getDiscountConcessionTypes() {
        return (List<DiscountConcessionType>)readProperty("discountConcessionTypes");
    }

    public void addToDiscountCourseClasses(DiscountCourseClass obj) {
        addToManyTarget("discountCourseClasses", obj, true);
    }

    public void removeFromDiscountCourseClasses(DiscountCourseClass obj) {
        removeToManyTarget("discountCourseClasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscountCourseClass> getDiscountCourseClasses() {
        return (List<DiscountCourseClass>)readProperty("discountCourseClasses");
    }

    public void addToDiscountMembershipProducts(DiscountMembership obj) {
        addToManyTarget("discountMembershipProducts", obj, true);
    }

    public void removeFromDiscountMembershipProducts(DiscountMembership obj) {
        removeToManyTarget("discountMembershipProducts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscountMembership> getDiscountMembershipProducts() {
        return (List<DiscountMembership>)readProperty("discountMembershipProducts");
    }

    public void addToInvoiceLineDiscounts(InvoiceLineDiscount obj) {
        addToManyTarget("invoiceLineDiscounts", obj, true);
    }

    public void removeFromInvoiceLineDiscounts(InvoiceLineDiscount obj) {
        removeToManyTarget("invoiceLineDiscounts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<InvoiceLineDiscount> getInvoiceLineDiscounts() {
        return (List<InvoiceLineDiscount>)readProperty("invoiceLineDiscounts");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "code":
                return this.code;
            case "combinationType":
                return this.combinationType;
            case "created":
                return this.created;
            case "detail":
                return this.detail;
            case "discountAmount":
                return this.discountAmount;
            case "discountRate":
                return this.discountRate;
            case "discountType":
                return this.discountType;
            case "hideOnWeb":
                return this.hideOnWeb;
            case "isAvailableOnWeb":
                return this.isAvailableOnWeb;
            case "maximumDiscount":
                return this.maximumDiscount;
            case "minEnrolments":
                return this.minEnrolments;
            case "minValue":
                return this.minValue;
            case "minimumDiscount":
                return this.minimumDiscount;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "roundingMode":
                return this.roundingMode;
            case "studentAge":
                return this.studentAge;
            case "studentAgeOperator":
                return this.studentAgeOperator;
            case "studentEnrolledWithinDays":
                return this.studentEnrolledWithinDays;
            case "studentPostcodes":
                return this.studentPostcodes;
            case "studentsQualifier":
                return this.studentsQualifier;
            case "timeZone":
                return this.timeZone;
            case "validFrom":
                return this.validFrom;
            case "validFromOffset":
                return this.validFromOffset;
            case "validTo":
                return this.validTo;
            case "validToOffset":
                return this.validToOffset;
            case "limitPreviousEnrolment":
                return this.limitPreviousEnrolment;
            case "college":
                return this.college;
            case "corporatePassDiscounts":
                return this.corporatePassDiscounts;
            case "discountConcessionTypes":
                return this.discountConcessionTypes;
            case "discountCourseClasses":
                return this.discountCourseClasses;
            case "discountMembershipProducts":
                return this.discountMembershipProducts;
            case "invoiceLineDiscounts":
                return this.invoiceLineDiscounts;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "code":
                this.code = (String)val;
                break;
            case "combinationType":
                this.combinationType = (Boolean)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "detail":
                this.detail = (String)val;
                break;
            case "discountAmount":
                this.discountAmount = (Money)val;
                break;
            case "discountRate":
                this.discountRate = (BigDecimal)val;
                break;
            case "discountType":
                this.discountType = (DiscountType)val;
                break;
            case "hideOnWeb":
                this.hideOnWeb = (Boolean)val;
                break;
            case "isAvailableOnWeb":
                this.isAvailableOnWeb = (Boolean)val;
                break;
            case "maximumDiscount":
                this.maximumDiscount = (Money)val;
                break;
            case "minEnrolments":
                this.minEnrolments = (Integer)val;
                break;
            case "minValue":
                this.minValue = (Money)val;
                break;
            case "minimumDiscount":
                this.minimumDiscount = (Money)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "roundingMode":
                this.roundingMode = (MoneyRounding)val;
                break;
            case "studentAge":
                this.studentAge = (Integer)val;
                break;
            case "studentAgeOperator":
                this.studentAgeOperator = (String)val;
                break;
            case "studentEnrolledWithinDays":
                this.studentEnrolledWithinDays = (Integer)val;
                break;
            case "studentPostcodes":
                this.studentPostcodes = (String)val;
                break;
            case "studentsQualifier":
                this.studentsQualifier = (byte[])val;
                break;
            case "timeZone":
                this.timeZone = (String)val;
                break;
            case "validFrom":
                this.validFrom = (Date)val;
                break;
            case "validFromOffset":
                this.validFromOffset = (Integer)val;
                break;
            case "validTo":
                this.validTo = (Date)val;
                break;
            case "validToOffset":
                this.validToOffset = (Integer)val;
                break;
            case "limitPreviousEnrolment":
                this.limitPreviousEnrolment = (Boolean)val;
                break;
            case "college":
                this.college = val;
                break;
            case "corporatePassDiscounts":
                this.corporatePassDiscounts = val;
                break;
            case "discountConcessionTypes":
                this.discountConcessionTypes = val;
                break;
            case "discountCourseClasses":
                this.discountCourseClasses = val;
                break;
            case "discountMembershipProducts":
                this.discountMembershipProducts = val;
                break;
            case "invoiceLineDiscounts":
                this.invoiceLineDiscounts = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.code);
        out.writeObject(this.combinationType);
        out.writeObject(this.created);
        out.writeObject(this.detail);
        out.writeObject(this.discountAmount);
        out.writeObject(this.discountRate);
        out.writeObject(this.discountType);
        out.writeObject(this.hideOnWeb);
        out.writeObject(this.isAvailableOnWeb);
        out.writeObject(this.maximumDiscount);
        out.writeObject(this.minEnrolments);
        out.writeObject(this.minValue);
        out.writeObject(this.minimumDiscount);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.roundingMode);
        out.writeObject(this.studentAge);
        out.writeObject(this.studentAgeOperator);
        out.writeObject(this.studentEnrolledWithinDays);
        out.writeObject(this.studentPostcodes);
        out.writeObject(this.studentsQualifier);
        out.writeObject(this.timeZone);
        out.writeObject(this.validFrom);
        out.writeObject(this.validFromOffset);
        out.writeObject(this.validTo);
        out.writeObject(this.validToOffset);
        out.writeObject(this.limitPreviousEnrolment);
        out.writeObject(this.college);
        out.writeObject(this.corporatePassDiscounts);
        out.writeObject(this.discountConcessionTypes);
        out.writeObject(this.discountCourseClasses);
        out.writeObject(this.discountMembershipProducts);
        out.writeObject(this.invoiceLineDiscounts);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.code = (String)in.readObject();
        this.combinationType = (Boolean)in.readObject();
        this.created = (Date)in.readObject();
        this.detail = (String)in.readObject();
        this.discountAmount = (Money)in.readObject();
        this.discountRate = (BigDecimal)in.readObject();
        this.discountType = (DiscountType)in.readObject();
        this.hideOnWeb = (Boolean)in.readObject();
        this.isAvailableOnWeb = (Boolean)in.readObject();
        this.maximumDiscount = (Money)in.readObject();
        this.minEnrolments = (Integer)in.readObject();
        this.minValue = (Money)in.readObject();
        this.minimumDiscount = (Money)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.roundingMode = (MoneyRounding)in.readObject();
        this.studentAge = (Integer)in.readObject();
        this.studentAgeOperator = (String)in.readObject();
        this.studentEnrolledWithinDays = (Integer)in.readObject();
        this.studentPostcodes = (String)in.readObject();
        this.studentsQualifier = (byte[])in.readObject();
        this.timeZone = (String)in.readObject();
        this.validFrom = (Date)in.readObject();
        this.validFromOffset = (Integer)in.readObject();
        this.validTo = (Date)in.readObject();
        this.validToOffset = (Integer)in.readObject();
        this.limitPreviousEnrolment = (Boolean)in.readObject();
        this.college = in.readObject();
        this.corporatePassDiscounts = in.readObject();
        this.discountConcessionTypes = in.readObject();
        this.discountCourseClasses = in.readObject();
        this.discountMembershipProducts = in.readObject();
        this.invoiceLineDiscounts = in.readObject();
    }

}
