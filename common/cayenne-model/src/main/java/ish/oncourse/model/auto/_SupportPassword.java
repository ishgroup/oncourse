package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.Contact;

/**
 * Class _SupportPassword was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SupportPassword extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_ON_PROPERTY = "createdOn";
    public static final String EXPIRES_ON_PROPERTY = "expiresOn";
    public static final String MODIFIED_ON_PROPERTY = "modifiedOn";
    public static final String PASSWORD_PROPERTY = "password";
    public static final String CONTACT_PROPERTY = "contact";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED_ON = Property.create("createdOn", Date.class);
    public static final Property<Date> EXPIRES_ON = Property.create("expiresOn", Date.class);
    public static final Property<Date> MODIFIED_ON = Property.create("modifiedOn", Date.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<Contact> CONTACT = Property.create("contact", Contact.class);

    protected Date createdOn;
    protected Date expiresOn;
    protected Date modifiedOn;
    protected String password;

    protected Object contact;

    public void setCreatedOn(Date createdOn) {
        beforePropertyWrite("createdOn", this.createdOn, createdOn);
        this.createdOn = createdOn;
    }

    public Date getCreatedOn() {
        beforePropertyRead("createdOn");
        return this.createdOn;
    }

    public void setExpiresOn(Date expiresOn) {
        beforePropertyWrite("expiresOn", this.expiresOn, expiresOn);
        this.expiresOn = expiresOn;
    }

    public Date getExpiresOn() {
        beforePropertyRead("expiresOn");
        return this.expiresOn;
    }

    public void setModifiedOn(Date modifiedOn) {
        beforePropertyWrite("modifiedOn", this.modifiedOn, modifiedOn);
        this.modifiedOn = modifiedOn;
    }

    public Date getModifiedOn() {
        beforePropertyRead("modifiedOn");
        return this.modifiedOn;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createdOn":
                return this.createdOn;
            case "expiresOn":
                return this.expiresOn;
            case "modifiedOn":
                return this.modifiedOn;
            case "password":
                return this.password;
            case "contact":
                return this.contact;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createdOn":
                this.createdOn = (Date)val;
                break;
            case "expiresOn":
                this.expiresOn = (Date)val;
                break;
            case "modifiedOn":
                this.modifiedOn = (Date)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "contact":
                this.contact = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createdOn);
        out.writeObject(this.expiresOn);
        out.writeObject(this.modifiedOn);
        out.writeObject(this.password);
        out.writeObject(this.contact);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createdOn = (Date)in.readObject();
        this.expiresOn = (Date)in.readObject();
        this.modifiedOn = (Date)in.readObject();
        this.password = (String)in.readObject();
        this.contact = in.readObject();
    }

}
