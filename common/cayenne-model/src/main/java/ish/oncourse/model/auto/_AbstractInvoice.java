package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.common.types.ConfirmationStatus;
import ish.common.types.InvoiceType;
import ish.common.types.PaymentSource;
import ish.math.Money;

/**
 * Class _AbstractInvoice was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AbstractInvoice extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ALLOW_AUTO_PAY_PROPERTY = "allowAutoPay";
    public static final String AMOUNT_OWING_PROPERTY = "amountOwing";
    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String BILL_TO_ADDRESS_PROPERTY = "billToAddress";
    public static final String CONFIRMATION_STATUS_PROPERTY = "confirmationStatus";
    public static final String CREATED_PROPERTY = "created";
    public static final String CUSTOMER_REFERENCE_PROPERTY = "customerReference";
    public static final String DATE_DUE_PROPERTY = "dateDue";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String INVOICE_DATE_PROPERTY = "invoiceDate";
    public static final String INVOICE_NUMBER_PROPERTY = "invoiceNumber";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PUBLIC_NOTES_PROPERTY = "publicNotes";
    public static final String SESSION_ID_PROPERTY = "sessionId";
    public static final String SHIPPING_ADDRESS_PROPERTY = "shippingAddress";
    public static final String SOURCE_PROPERTY = "source";
    public static final String TOTAL_EX_GST_PROPERTY = "totalExGst";
    public static final String TOTAL_GST_PROPERTY = "totalGst";
    public static final String TYPE_PROPERTY = "type";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ALLOW_AUTO_PAY = Property.create("allowAutoPay", Boolean.class);
    public static final Property<Money> AMOUNT_OWING = Property.create("amountOwing", Money.class);
    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> BILL_TO_ADDRESS = Property.create("billToAddress", String.class);
    public static final Property<ConfirmationStatus> CONFIRMATION_STATUS = Property.create("confirmationStatus", ConfirmationStatus.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> CUSTOMER_REFERENCE = Property.create("customerReference", String.class);
    public static final Property<Date> DATE_DUE = Property.create("dateDue", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Date> INVOICE_DATE = Property.create("invoiceDate", Date.class);
    public static final Property<Long> INVOICE_NUMBER = Property.create("invoiceNumber", Long.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> PUBLIC_NOTES = Property.create("publicNotes", String.class);
    public static final Property<String> SESSION_ID = Property.create("sessionId", String.class);
    public static final Property<String> SHIPPING_ADDRESS = Property.create("shippingAddress", String.class);
    public static final Property<PaymentSource> SOURCE = Property.create("source", PaymentSource.class);
    public static final Property<Money> TOTAL_EX_GST = Property.create("totalExGst", Money.class);
    public static final Property<Money> TOTAL_GST = Property.create("totalGst", Money.class);
    public static final Property<InvoiceType> TYPE = Property.create("type", InvoiceType.class);

    protected Boolean allowAutoPay;
    protected Money amountOwing;
    protected Long angelId;
    protected String billToAddress;
    protected ConfirmationStatus confirmationStatus;
    protected Date created;
    protected String customerReference;
    protected Date dateDue;
    protected String description;
    protected Date invoiceDate;
    protected Long invoiceNumber;
    protected Date modified;
    protected String publicNotes;
    protected String sessionId;
    protected String shippingAddress;
    protected PaymentSource source;
    protected Money totalExGst;
    protected Money totalGst;
    protected InvoiceType type;


    public void setAllowAutoPay(Boolean allowAutoPay) {
        beforePropertyWrite("allowAutoPay", this.allowAutoPay, allowAutoPay);
        this.allowAutoPay = allowAutoPay;
    }

    public Boolean getAllowAutoPay() {
        beforePropertyRead("allowAutoPay");
        return this.allowAutoPay;
    }

    public void setAmountOwing(Money amountOwing) {
        beforePropertyWrite("amountOwing", this.amountOwing, amountOwing);
        this.amountOwing = amountOwing;
    }

    public Money getAmountOwing() {
        beforePropertyRead("amountOwing");
        return this.amountOwing;
    }

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setBillToAddress(String billToAddress) {
        beforePropertyWrite("billToAddress", this.billToAddress, billToAddress);
        this.billToAddress = billToAddress;
    }

    public String getBillToAddress() {
        beforePropertyRead("billToAddress");
        return this.billToAddress;
    }

    public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
        beforePropertyWrite("confirmationStatus", this.confirmationStatus, confirmationStatus);
        this.confirmationStatus = confirmationStatus;
    }

    public ConfirmationStatus getConfirmationStatus() {
        beforePropertyRead("confirmationStatus");
        return this.confirmationStatus;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setCustomerReference(String customerReference) {
        beforePropertyWrite("customerReference", this.customerReference, customerReference);
        this.customerReference = customerReference;
    }

    public String getCustomerReference() {
        beforePropertyRead("customerReference");
        return this.customerReference;
    }

    public void setDateDue(Date dateDue) {
        beforePropertyWrite("dateDue", this.dateDue, dateDue);
        this.dateDue = dateDue;
    }

    public Date getDateDue() {
        beforePropertyRead("dateDue");
        return this.dateDue;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setInvoiceDate(Date invoiceDate) {
        beforePropertyWrite("invoiceDate", this.invoiceDate, invoiceDate);
        this.invoiceDate = invoiceDate;
    }

    public Date getInvoiceDate() {
        beforePropertyRead("invoiceDate");
        return this.invoiceDate;
    }

    public void setInvoiceNumber(Long invoiceNumber) {
        beforePropertyWrite("invoiceNumber", this.invoiceNumber, invoiceNumber);
        this.invoiceNumber = invoiceNumber;
    }

    public Long getInvoiceNumber() {
        beforePropertyRead("invoiceNumber");
        return this.invoiceNumber;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPublicNotes(String publicNotes) {
        beforePropertyWrite("publicNotes", this.publicNotes, publicNotes);
        this.publicNotes = publicNotes;
    }

    public String getPublicNotes() {
        beforePropertyRead("publicNotes");
        return this.publicNotes;
    }

    public void setSessionId(String sessionId) {
        beforePropertyWrite("sessionId", this.sessionId, sessionId);
        this.sessionId = sessionId;
    }

    public String getSessionId() {
        beforePropertyRead("sessionId");
        return this.sessionId;
    }

    public void setShippingAddress(String shippingAddress) {
        beforePropertyWrite("shippingAddress", this.shippingAddress, shippingAddress);
        this.shippingAddress = shippingAddress;
    }

    public String getShippingAddress() {
        beforePropertyRead("shippingAddress");
        return this.shippingAddress;
    }

    public void setSource(PaymentSource source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public PaymentSource getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setTotalExGst(Money totalExGst) {
        beforePropertyWrite("totalExGst", this.totalExGst, totalExGst);
        this.totalExGst = totalExGst;
    }

    public Money getTotalExGst() {
        beforePropertyRead("totalExGst");
        return this.totalExGst;
    }

    public void setTotalGst(Money totalGst) {
        beforePropertyWrite("totalGst", this.totalGst, totalGst);
        this.totalGst = totalGst;
    }

    public Money getTotalGst() {
        beforePropertyRead("totalGst");
        return this.totalGst;
    }

    public void setType(InvoiceType type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public InvoiceType getType() {
        beforePropertyRead("type");
        return this.type;
    }

    protected abstract void onPostAdd();

    protected abstract void onPreUpdate();

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "allowAutoPay":
                return this.allowAutoPay;
            case "amountOwing":
                return this.amountOwing;
            case "angelId":
                return this.angelId;
            case "billToAddress":
                return this.billToAddress;
            case "confirmationStatus":
                return this.confirmationStatus;
            case "created":
                return this.created;
            case "customerReference":
                return this.customerReference;
            case "dateDue":
                return this.dateDue;
            case "description":
                return this.description;
            case "invoiceDate":
                return this.invoiceDate;
            case "invoiceNumber":
                return this.invoiceNumber;
            case "modified":
                return this.modified;
            case "publicNotes":
                return this.publicNotes;
            case "sessionId":
                return this.sessionId;
            case "shippingAddress":
                return this.shippingAddress;
            case "source":
                return this.source;
            case "totalExGst":
                return this.totalExGst;
            case "totalGst":
                return this.totalGst;
            case "type":
                return this.type;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "allowAutoPay":
                this.allowAutoPay = (Boolean)val;
                break;
            case "amountOwing":
                this.amountOwing = (Money)val;
                break;
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "billToAddress":
                this.billToAddress = (String)val;
                break;
            case "confirmationStatus":
                this.confirmationStatus = (ConfirmationStatus)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "customerReference":
                this.customerReference = (String)val;
                break;
            case "dateDue":
                this.dateDue = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "invoiceDate":
                this.invoiceDate = (Date)val;
                break;
            case "invoiceNumber":
                this.invoiceNumber = (Long)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "publicNotes":
                this.publicNotes = (String)val;
                break;
            case "sessionId":
                this.sessionId = (String)val;
                break;
            case "shippingAddress":
                this.shippingAddress = (String)val;
                break;
            case "source":
                this.source = (PaymentSource)val;
                break;
            case "totalExGst":
                this.totalExGst = (Money)val;
                break;
            case "totalGst":
                this.totalGst = (Money)val;
                break;
            case "type":
                this.type = (InvoiceType)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.allowAutoPay);
        out.writeObject(this.amountOwing);
        out.writeObject(this.angelId);
        out.writeObject(this.billToAddress);
        out.writeObject(this.confirmationStatus);
        out.writeObject(this.created);
        out.writeObject(this.customerReference);
        out.writeObject(this.dateDue);
        out.writeObject(this.description);
        out.writeObject(this.invoiceDate);
        out.writeObject(this.invoiceNumber);
        out.writeObject(this.modified);
        out.writeObject(this.publicNotes);
        out.writeObject(this.sessionId);
        out.writeObject(this.shippingAddress);
        out.writeObject(this.source);
        out.writeObject(this.totalExGst);
        out.writeObject(this.totalGst);
        out.writeObject(this.type);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.allowAutoPay = (Boolean)in.readObject();
        this.amountOwing = (Money)in.readObject();
        this.angelId = (Long)in.readObject();
        this.billToAddress = (String)in.readObject();
        this.confirmationStatus = (ConfirmationStatus)in.readObject();
        this.created = (Date)in.readObject();
        this.customerReference = (String)in.readObject();
        this.dateDue = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.invoiceDate = (Date)in.readObject();
        this.invoiceNumber = (Long)in.readObject();
        this.modified = (Date)in.readObject();
        this.publicNotes = (String)in.readObject();
        this.sessionId = (String)in.readObject();
        this.shippingAddress = (String)in.readObject();
        this.source = (PaymentSource)in.readObject();
        this.totalExGst = (Money)in.readObject();
        this.totalGst = (Money)in.readObject();
        this.type = (InvoiceType)in.readObject();
    }

}
