package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.BinaryInfoRelation;
import ish.oncourse.model.College;
import ish.oncourse.model.Document;
import ish.oncourse.model.SystemUser;

/**
 * Class _DocumentVersion was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DocumentVersion extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String BYTE_SIZE_PROPERTY = "byteSize";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String FILE_NAME_PROPERTY = "fileName";
    public static final String FILE_PATH_PROPERTY = "filePath";
    public static final String MIME_TYPE_PROPERTY = "mimeType";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PIXEL_HEIGHT_PROPERTY = "pixelHeight";
    public static final String PIXEL_WIDTH_PROPERTY = "pixelWidth";
    public static final String THUMBNAIL_PROPERTY = "thumbnail";
    public static final String TIMESTAMP_PROPERTY = "timestamp";
    public static final String VERSION_ID_PROPERTY = "versionId";
    public static final String BINARY_INFO_RELATIONS_PROPERTY = "binaryInfoRelations";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CREATED_BY_USER_PROPERTY = "createdByUser";
    public static final String DOCUMENT_PROPERTY = "document";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Long> BYTE_SIZE = Property.create("byteSize", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> FILE_NAME = Property.create("fileName", String.class);
    public static final Property<String> FILE_PATH = Property.create("filePath", String.class);
    public static final Property<String> MIME_TYPE = Property.create("mimeType", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Integer> PIXEL_HEIGHT = Property.create("pixelHeight", Integer.class);
    public static final Property<Integer> PIXEL_WIDTH = Property.create("pixelWidth", Integer.class);
    public static final Property<byte[]> THUMBNAIL = Property.create("thumbnail", byte[].class);
    public static final Property<Date> TIMESTAMP = Property.create("timestamp", Date.class);
    public static final Property<String> VERSION_ID = Property.create("versionId", String.class);
    public static final Property<List<BinaryInfoRelation>> BINARY_INFO_RELATIONS = Property.create("binaryInfoRelations", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<SystemUser> CREATED_BY_USER = Property.create("createdByUser", SystemUser.class);
    public static final Property<Document> DOCUMENT = Property.create("document", Document.class);

    protected Long angelId;
    protected Long byteSize;
    protected Date created;
    protected String description;
    protected String fileName;
    protected String filePath;
    protected String mimeType;
    protected Date modified;
    protected Integer pixelHeight;
    protected Integer pixelWidth;
    protected byte[] thumbnail;
    protected Date timestamp;
    protected String versionId;

    protected Object binaryInfoRelations;
    protected Object college;
    protected Object createdByUser;
    protected Object document;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setByteSize(Long byteSize) {
        beforePropertyWrite("byteSize", this.byteSize, byteSize);
        this.byteSize = byteSize;
    }

    public Long getByteSize() {
        beforePropertyRead("byteSize");
        return this.byteSize;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setFileName(String fileName) {
        beforePropertyWrite("fileName", this.fileName, fileName);
        this.fileName = fileName;
    }

    public String getFileName() {
        beforePropertyRead("fileName");
        return this.fileName;
    }

    public void setFilePath(String filePath) {
        beforePropertyWrite("filePath", this.filePath, filePath);
        this.filePath = filePath;
    }

    public String getFilePath() {
        beforePropertyRead("filePath");
        return this.filePath;
    }

    public void setMimeType(String mimeType) {
        beforePropertyWrite("mimeType", this.mimeType, mimeType);
        this.mimeType = mimeType;
    }

    public String getMimeType() {
        beforePropertyRead("mimeType");
        return this.mimeType;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPixelHeight(Integer pixelHeight) {
        beforePropertyWrite("pixelHeight", this.pixelHeight, pixelHeight);
        this.pixelHeight = pixelHeight;
    }

    public Integer getPixelHeight() {
        beforePropertyRead("pixelHeight");
        return this.pixelHeight;
    }

    public void setPixelWidth(Integer pixelWidth) {
        beforePropertyWrite("pixelWidth", this.pixelWidth, pixelWidth);
        this.pixelWidth = pixelWidth;
    }

    public Integer getPixelWidth() {
        beforePropertyRead("pixelWidth");
        return this.pixelWidth;
    }

    public void setThumbnail(byte[] thumbnail) {
        beforePropertyWrite("thumbnail", this.thumbnail, thumbnail);
        this.thumbnail = thumbnail;
    }

    public byte[] getThumbnail() {
        beforePropertyRead("thumbnail");
        return this.thumbnail;
    }

    public void setTimestamp(Date timestamp) {
        beforePropertyWrite("timestamp", this.timestamp, timestamp);
        this.timestamp = timestamp;
    }

    public Date getTimestamp() {
        beforePropertyRead("timestamp");
        return this.timestamp;
    }

    public void setVersionId(String versionId) {
        beforePropertyWrite("versionId", this.versionId, versionId);
        this.versionId = versionId;
    }

    public String getVersionId() {
        beforePropertyRead("versionId");
        return this.versionId;
    }

    public void addToBinaryInfoRelations(BinaryInfoRelation obj) {
        addToManyTarget("binaryInfoRelations", obj, true);
    }

    public void removeFromBinaryInfoRelations(BinaryInfoRelation obj) {
        removeToManyTarget("binaryInfoRelations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<BinaryInfoRelation> getBinaryInfoRelations() {
        return (List<BinaryInfoRelation>)readProperty("binaryInfoRelations");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCreatedByUser(SystemUser createdByUser) {
        setToOneTarget("createdByUser", createdByUser, true);
    }

    public SystemUser getCreatedByUser() {
        return (SystemUser)readProperty("createdByUser");
    }

    public void setDocument(Document document) {
        setToOneTarget("document", document, true);
    }

    public Document getDocument() {
        return (Document)readProperty("document");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "byteSize":
                return this.byteSize;
            case "created":
                return this.created;
            case "description":
                return this.description;
            case "fileName":
                return this.fileName;
            case "filePath":
                return this.filePath;
            case "mimeType":
                return this.mimeType;
            case "modified":
                return this.modified;
            case "pixelHeight":
                return this.pixelHeight;
            case "pixelWidth":
                return this.pixelWidth;
            case "thumbnail":
                return this.thumbnail;
            case "timestamp":
                return this.timestamp;
            case "versionId":
                return this.versionId;
            case "binaryInfoRelations":
                return this.binaryInfoRelations;
            case "college":
                return this.college;
            case "createdByUser":
                return this.createdByUser;
            case "document":
                return this.document;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "byteSize":
                this.byteSize = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "fileName":
                this.fileName = (String)val;
                break;
            case "filePath":
                this.filePath = (String)val;
                break;
            case "mimeType":
                this.mimeType = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "pixelHeight":
                this.pixelHeight = (Integer)val;
                break;
            case "pixelWidth":
                this.pixelWidth = (Integer)val;
                break;
            case "thumbnail":
                this.thumbnail = (byte[])val;
                break;
            case "timestamp":
                this.timestamp = (Date)val;
                break;
            case "versionId":
                this.versionId = (String)val;
                break;
            case "binaryInfoRelations":
                this.binaryInfoRelations = val;
                break;
            case "college":
                this.college = val;
                break;
            case "createdByUser":
                this.createdByUser = val;
                break;
            case "document":
                this.document = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.byteSize);
        out.writeObject(this.created);
        out.writeObject(this.description);
        out.writeObject(this.fileName);
        out.writeObject(this.filePath);
        out.writeObject(this.mimeType);
        out.writeObject(this.modified);
        out.writeObject(this.pixelHeight);
        out.writeObject(this.pixelWidth);
        out.writeObject(this.thumbnail);
        out.writeObject(this.timestamp);
        out.writeObject(this.versionId);
        out.writeObject(this.binaryInfoRelations);
        out.writeObject(this.college);
        out.writeObject(this.createdByUser);
        out.writeObject(this.document);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.byteSize = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.fileName = (String)in.readObject();
        this.filePath = (String)in.readObject();
        this.mimeType = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.pixelHeight = (Integer)in.readObject();
        this.pixelWidth = (Integer)in.readObject();
        this.thumbnail = (byte[])in.readObject();
        this.timestamp = (Date)in.readObject();
        this.versionId = (String)in.readObject();
        this.binaryInfoRelations = in.readObject();
        this.college = in.readObject();
        this.createdByUser = in.readObject();
        this.document = in.readObject();
    }

}
