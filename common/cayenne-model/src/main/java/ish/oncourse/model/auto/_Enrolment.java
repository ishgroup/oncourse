package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.ClassFundingSource;
import ish.common.types.ConfirmationStatus;
import ish.common.types.CreditLevel;
import ish.common.types.CreditProviderType;
import ish.common.types.CreditType;
import ish.common.types.EnrolmentStatus;
import ish.common.types.EnrolmentVETFeeHelpStatus;
import ish.common.types.PaymentSource;
import ish.common.types.RecognitionOfPriorLearningIndicator;
import ish.common.types.StudentStatusForUnitOfStudy;
import ish.math.Money;
import ish.oncourse.model.AssessmentSubmission;
import ish.oncourse.model.College;
import ish.oncourse.model.CourseClass;
import ish.oncourse.model.EnrolmentCustomField;
import ish.oncourse.model.ExpandableCayenneDataObject;
import ish.oncourse.model.InvoiceLine;
import ish.oncourse.model.Outcome;
import ish.oncourse.model.Student;
import ish.oncourse.model.Survey;

/**
 * Class _Enrolment was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Enrolment extends ExpandableCayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CONFIRMATION_STATUS_PROPERTY = "confirmationStatus";
    public static final String CREATED_PROPERTY = "created";
    public static final String CREDIT_FOEID_PROPERTY = "creditFOEId";
    public static final String CREDIT_LEVEL_PROPERTY = "creditLevel";
    public static final String CREDIT_OFFERED_VALUE_PROPERTY = "creditOfferedValue";
    public static final String CREDIT_PROVIDER_PROPERTY = "creditProvider";
    public static final String CREDIT_PROVIDER_TYPE_PROPERTY = "creditProviderType";
    public static final String CREDIT_TOTAL_PROPERTY = "creditTotal";
    public static final String CREDIT_TYPE_PROPERTY = "creditType";
    public static final String CREDIT_USED_VALUE_PROPERTY = "creditUsedValue";
    public static final String FEE_HELP_AMOUNT_PROPERTY = "feeHelpAmount";
    public static final String FEE_HELP_STATUS_PROPERTY = "feeHelpStatus";
    public static final String FEE_STATUS_PROPERTY = "feeStatus";
    public static final String FUNDING_SOURCE_PROPERTY = "fundingSource";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String REASON_FOR_STUDY_PROPERTY = "reasonForStudy";
    public static final String SOURCE_PROPERTY = "source";
    public static final String STATUS_PROPERTY = "status";
    public static final String ASSESSMENT_SUBMISSIONS_PROPERTY = "assessmentSubmissions";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_CLASS_PROPERTY = "courseClass";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";
    public static final String INVOICE_LINES_PROPERTY = "invoiceLines";
    public static final String OUTCOMES_PROPERTY = "outcomes";
    public static final String STUDENT_PROPERTY = "student";
    public static final String SURVEYS_PROPERTY = "surveys";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<ConfirmationStatus> CONFIRMATION_STATUS = Property.create("confirmationStatus", ConfirmationStatus.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> CREDIT_FOEID = Property.create("creditFOEId", String.class);
    public static final Property<CreditLevel> CREDIT_LEVEL = Property.create("creditLevel", CreditLevel.class);
    public static final Property<String> CREDIT_OFFERED_VALUE = Property.create("creditOfferedValue", String.class);
    public static final Property<String> CREDIT_PROVIDER = Property.create("creditProvider", String.class);
    public static final Property<CreditProviderType> CREDIT_PROVIDER_TYPE = Property.create("creditProviderType", CreditProviderType.class);
    public static final Property<RecognitionOfPriorLearningIndicator> CREDIT_TOTAL = Property.create("creditTotal", RecognitionOfPriorLearningIndicator.class);
    public static final Property<CreditType> CREDIT_TYPE = Property.create("creditType", CreditType.class);
    public static final Property<String> CREDIT_USED_VALUE = Property.create("creditUsedValue", String.class);
    public static final Property<Money> FEE_HELP_AMOUNT = Property.create("feeHelpAmount", Money.class);
    public static final Property<EnrolmentVETFeeHelpStatus> FEE_HELP_STATUS = Property.create("feeHelpStatus", EnrolmentVETFeeHelpStatus.class);
    public static final Property<StudentStatusForUnitOfStudy> FEE_STATUS = Property.create("feeStatus", StudentStatusForUnitOfStudy.class);
    public static final Property<ClassFundingSource> FUNDING_SOURCE = Property.create("fundingSource", ClassFundingSource.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Integer> REASON_FOR_STUDY = Property.create("reasonForStudy", Integer.class);
    public static final Property<PaymentSource> SOURCE = Property.create("source", PaymentSource.class);
    public static final Property<EnrolmentStatus> STATUS = Property.create("status", EnrolmentStatus.class);
    public static final Property<List<AssessmentSubmission>> ASSESSMENT_SUBMISSIONS = Property.create("assessmentSubmissions", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<CourseClass> COURSE_CLASS = Property.create("courseClass", CourseClass.class);
    public static final Property<List<EnrolmentCustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);
    public static final Property<List<InvoiceLine>> INVOICE_LINES = Property.create("invoiceLines", List.class);
    public static final Property<List<Outcome>> OUTCOMES = Property.create("outcomes", List.class);
    public static final Property<Student> STUDENT = Property.create("student", Student.class);
    public static final Property<List<Survey>> SURVEYS = Property.create("surveys", List.class);

    protected Long angelId;
    protected ConfirmationStatus confirmationStatus;
    protected Date created;
    protected String creditFOEId;
    protected CreditLevel creditLevel;
    protected String creditOfferedValue;
    protected String creditProvider;
    protected CreditProviderType creditProviderType;
    protected RecognitionOfPriorLearningIndicator creditTotal;
    protected CreditType creditType;
    protected String creditUsedValue;
    protected Money feeHelpAmount;
    protected EnrolmentVETFeeHelpStatus feeHelpStatus;
    protected StudentStatusForUnitOfStudy feeStatus;
    protected ClassFundingSource fundingSource;
    protected Date modified;
    protected Integer reasonForStudy;
    protected PaymentSource source;
    protected EnrolmentStatus status;

    protected Object assessmentSubmissions;
    protected Object college;
    protected Object courseClass;
    protected Object customFields;
    protected Object invoiceLines;
    protected Object outcomes;
    protected Object student;
    protected Object surveys;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
        beforePropertyWrite("confirmationStatus", this.confirmationStatus, confirmationStatus);
        this.confirmationStatus = confirmationStatus;
    }

    public ConfirmationStatus getConfirmationStatus() {
        beforePropertyRead("confirmationStatus");
        return this.confirmationStatus;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setCreditFOEId(String creditFOEId) {
        beforePropertyWrite("creditFOEId", this.creditFOEId, creditFOEId);
        this.creditFOEId = creditFOEId;
    }

    public String getCreditFOEId() {
        beforePropertyRead("creditFOEId");
        return this.creditFOEId;
    }

    public void setCreditLevel(CreditLevel creditLevel) {
        beforePropertyWrite("creditLevel", this.creditLevel, creditLevel);
        this.creditLevel = creditLevel;
    }

    public CreditLevel getCreditLevel() {
        beforePropertyRead("creditLevel");
        return this.creditLevel;
    }

    public void setCreditOfferedValue(String creditOfferedValue) {
        beforePropertyWrite("creditOfferedValue", this.creditOfferedValue, creditOfferedValue);
        this.creditOfferedValue = creditOfferedValue;
    }

    public String getCreditOfferedValue() {
        beforePropertyRead("creditOfferedValue");
        return this.creditOfferedValue;
    }

    public void setCreditProvider(String creditProvider) {
        beforePropertyWrite("creditProvider", this.creditProvider, creditProvider);
        this.creditProvider = creditProvider;
    }

    public String getCreditProvider() {
        beforePropertyRead("creditProvider");
        return this.creditProvider;
    }

    public void setCreditProviderType(CreditProviderType creditProviderType) {
        beforePropertyWrite("creditProviderType", this.creditProviderType, creditProviderType);
        this.creditProviderType = creditProviderType;
    }

    public CreditProviderType getCreditProviderType() {
        beforePropertyRead("creditProviderType");
        return this.creditProviderType;
    }

    public void setCreditTotal(RecognitionOfPriorLearningIndicator creditTotal) {
        beforePropertyWrite("creditTotal", this.creditTotal, creditTotal);
        this.creditTotal = creditTotal;
    }

    public RecognitionOfPriorLearningIndicator getCreditTotal() {
        beforePropertyRead("creditTotal");
        return this.creditTotal;
    }

    public void setCreditType(CreditType creditType) {
        beforePropertyWrite("creditType", this.creditType, creditType);
        this.creditType = creditType;
    }

    public CreditType getCreditType() {
        beforePropertyRead("creditType");
        return this.creditType;
    }

    public void setCreditUsedValue(String creditUsedValue) {
        beforePropertyWrite("creditUsedValue", this.creditUsedValue, creditUsedValue);
        this.creditUsedValue = creditUsedValue;
    }

    public String getCreditUsedValue() {
        beforePropertyRead("creditUsedValue");
        return this.creditUsedValue;
    }

    public void setFeeHelpAmount(Money feeHelpAmount) {
        beforePropertyWrite("feeHelpAmount", this.feeHelpAmount, feeHelpAmount);
        this.feeHelpAmount = feeHelpAmount;
    }

    public Money getFeeHelpAmount() {
        beforePropertyRead("feeHelpAmount");
        return this.feeHelpAmount;
    }

    public void setFeeHelpStatus(EnrolmentVETFeeHelpStatus feeHelpStatus) {
        beforePropertyWrite("feeHelpStatus", this.feeHelpStatus, feeHelpStatus);
        this.feeHelpStatus = feeHelpStatus;
    }

    public EnrolmentVETFeeHelpStatus getFeeHelpStatus() {
        beforePropertyRead("feeHelpStatus");
        return this.feeHelpStatus;
    }

    public void setFeeStatus(StudentStatusForUnitOfStudy feeStatus) {
        beforePropertyWrite("feeStatus", this.feeStatus, feeStatus);
        this.feeStatus = feeStatus;
    }

    public StudentStatusForUnitOfStudy getFeeStatus() {
        beforePropertyRead("feeStatus");
        return this.feeStatus;
    }

    public void setFundingSource(ClassFundingSource fundingSource) {
        beforePropertyWrite("fundingSource", this.fundingSource, fundingSource);
        this.fundingSource = fundingSource;
    }

    public ClassFundingSource getFundingSource() {
        beforePropertyRead("fundingSource");
        return this.fundingSource;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setReasonForStudy(Integer reasonForStudy) {
        beforePropertyWrite("reasonForStudy", this.reasonForStudy, reasonForStudy);
        this.reasonForStudy = reasonForStudy;
    }

    public Integer getReasonForStudy() {
        beforePropertyRead("reasonForStudy");
        return this.reasonForStudy;
    }

    public void setSource(PaymentSource source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public PaymentSource getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setStatus(EnrolmentStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public EnrolmentStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void addToAssessmentSubmissions(AssessmentSubmission obj) {
        addToManyTarget("assessmentSubmissions", obj, true);
    }

    public void removeFromAssessmentSubmissions(AssessmentSubmission obj) {
        removeToManyTarget("assessmentSubmissions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AssessmentSubmission> getAssessmentSubmissions() {
        return (List<AssessmentSubmission>)readProperty("assessmentSubmissions");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCourseClass(CourseClass courseClass) {
        setToOneTarget("courseClass", courseClass, true);
    }

    public CourseClass getCourseClass() {
        return (CourseClass)readProperty("courseClass");
    }

    public void addToCustomFields(EnrolmentCustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(EnrolmentCustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<EnrolmentCustomField> getCustomFields() {
        return (List<EnrolmentCustomField>)readProperty("customFields");
    }

    public void addToInvoiceLines(InvoiceLine obj) {
        addToManyTarget("invoiceLines", obj, true);
    }

    public void removeFromInvoiceLines(InvoiceLine obj) {
        removeToManyTarget("invoiceLines", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<InvoiceLine> getInvoiceLines() {
        return (List<InvoiceLine>)readProperty("invoiceLines");
    }

    public void addToOutcomes(Outcome obj) {
        addToManyTarget("outcomes", obj, true);
    }

    public void removeFromOutcomes(Outcome obj) {
        removeToManyTarget("outcomes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Outcome> getOutcomes() {
        return (List<Outcome>)readProperty("outcomes");
    }

    public void setStudent(Student student) {
        setToOneTarget("student", student, true);
    }

    public Student getStudent() {
        return (Student)readProperty("student");
    }

    public void addToSurveys(Survey obj) {
        addToManyTarget("surveys", obj, true);
    }

    public void removeFromSurveys(Survey obj) {
        removeToManyTarget("surveys", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Survey> getSurveys() {
        return (List<Survey>)readProperty("surveys");
    }

    protected abstract void onPostAdd();

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "confirmationStatus":
                return this.confirmationStatus;
            case "created":
                return this.created;
            case "creditFOEId":
                return this.creditFOEId;
            case "creditLevel":
                return this.creditLevel;
            case "creditOfferedValue":
                return this.creditOfferedValue;
            case "creditProvider":
                return this.creditProvider;
            case "creditProviderType":
                return this.creditProviderType;
            case "creditTotal":
                return this.creditTotal;
            case "creditType":
                return this.creditType;
            case "creditUsedValue":
                return this.creditUsedValue;
            case "feeHelpAmount":
                return this.feeHelpAmount;
            case "feeHelpStatus":
                return this.feeHelpStatus;
            case "feeStatus":
                return this.feeStatus;
            case "fundingSource":
                return this.fundingSource;
            case "modified":
                return this.modified;
            case "reasonForStudy":
                return this.reasonForStudy;
            case "source":
                return this.source;
            case "status":
                return this.status;
            case "assessmentSubmissions":
                return this.assessmentSubmissions;
            case "college":
                return this.college;
            case "courseClass":
                return this.courseClass;
            case "customFields":
                return this.customFields;
            case "invoiceLines":
                return this.invoiceLines;
            case "outcomes":
                return this.outcomes;
            case "student":
                return this.student;
            case "surveys":
                return this.surveys;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "confirmationStatus":
                this.confirmationStatus = (ConfirmationStatus)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "creditFOEId":
                this.creditFOEId = (String)val;
                break;
            case "creditLevel":
                this.creditLevel = (CreditLevel)val;
                break;
            case "creditOfferedValue":
                this.creditOfferedValue = (String)val;
                break;
            case "creditProvider":
                this.creditProvider = (String)val;
                break;
            case "creditProviderType":
                this.creditProviderType = (CreditProviderType)val;
                break;
            case "creditTotal":
                this.creditTotal = (RecognitionOfPriorLearningIndicator)val;
                break;
            case "creditType":
                this.creditType = (CreditType)val;
                break;
            case "creditUsedValue":
                this.creditUsedValue = (String)val;
                break;
            case "feeHelpAmount":
                this.feeHelpAmount = (Money)val;
                break;
            case "feeHelpStatus":
                this.feeHelpStatus = (EnrolmentVETFeeHelpStatus)val;
                break;
            case "feeStatus":
                this.feeStatus = (StudentStatusForUnitOfStudy)val;
                break;
            case "fundingSource":
                this.fundingSource = (ClassFundingSource)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "reasonForStudy":
                this.reasonForStudy = (Integer)val;
                break;
            case "source":
                this.source = (PaymentSource)val;
                break;
            case "status":
                this.status = (EnrolmentStatus)val;
                break;
            case "assessmentSubmissions":
                this.assessmentSubmissions = val;
                break;
            case "college":
                this.college = val;
                break;
            case "courseClass":
                this.courseClass = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            case "invoiceLines":
                this.invoiceLines = val;
                break;
            case "outcomes":
                this.outcomes = val;
                break;
            case "student":
                this.student = val;
                break;
            case "surveys":
                this.surveys = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.confirmationStatus);
        out.writeObject(this.created);
        out.writeObject(this.creditFOEId);
        out.writeObject(this.creditLevel);
        out.writeObject(this.creditOfferedValue);
        out.writeObject(this.creditProvider);
        out.writeObject(this.creditProviderType);
        out.writeObject(this.creditTotal);
        out.writeObject(this.creditType);
        out.writeObject(this.creditUsedValue);
        out.writeObject(this.feeHelpAmount);
        out.writeObject(this.feeHelpStatus);
        out.writeObject(this.feeStatus);
        out.writeObject(this.fundingSource);
        out.writeObject(this.modified);
        out.writeObject(this.reasonForStudy);
        out.writeObject(this.source);
        out.writeObject(this.status);
        out.writeObject(this.assessmentSubmissions);
        out.writeObject(this.college);
        out.writeObject(this.courseClass);
        out.writeObject(this.customFields);
        out.writeObject(this.invoiceLines);
        out.writeObject(this.outcomes);
        out.writeObject(this.student);
        out.writeObject(this.surveys);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.confirmationStatus = (ConfirmationStatus)in.readObject();
        this.created = (Date)in.readObject();
        this.creditFOEId = (String)in.readObject();
        this.creditLevel = (CreditLevel)in.readObject();
        this.creditOfferedValue = (String)in.readObject();
        this.creditProvider = (String)in.readObject();
        this.creditProviderType = (CreditProviderType)in.readObject();
        this.creditTotal = (RecognitionOfPriorLearningIndicator)in.readObject();
        this.creditType = (CreditType)in.readObject();
        this.creditUsedValue = (String)in.readObject();
        this.feeHelpAmount = (Money)in.readObject();
        this.feeHelpStatus = (EnrolmentVETFeeHelpStatus)in.readObject();
        this.feeStatus = (StudentStatusForUnitOfStudy)in.readObject();
        this.fundingSource = (ClassFundingSource)in.readObject();
        this.modified = (Date)in.readObject();
        this.reasonForStudy = (Integer)in.readObject();
        this.source = (PaymentSource)in.readObject();
        this.status = (EnrolmentStatus)in.readObject();
        this.assessmentSubmissions = in.readObject();
        this.college = in.readObject();
        this.courseClass = in.readObject();
        this.customFields = in.readObject();
        this.invoiceLines = in.readObject();
        this.outcomes = in.readObject();
        this.student = in.readObject();
        this.surveys = in.readObject();
    }

}
