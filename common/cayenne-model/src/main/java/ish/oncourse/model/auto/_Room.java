package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.CourseClass;
import ish.oncourse.model.Session;
import ish.oncourse.model.Site;

/**
 * Class _Room was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Room extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CAPACITY_PROPERTY = "capacity";
    public static final String CREATED_PROPERTY = "created";
    public static final String DIRECTIONS_PROPERTY = "directions";
    public static final String DIRECTIONS_TEXTILE_PROPERTY = "directionsTextile";
    public static final String FACILITIES_PROPERTY = "facilities";
    public static final String FACILITIES_TEXTILE_PROPERTY = "facilitiesTextile";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NAME_PROPERTY = "name";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_CLASSES_PROPERTY = "courseClasses";
    public static final String SESSIONS_PROPERTY = "sessions";
    public static final String SITE_PROPERTY = "site";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Integer> CAPACITY = Property.create("capacity", Integer.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DIRECTIONS = Property.create("directions", String.class);
    public static final Property<String> DIRECTIONS_TEXTILE = Property.create("directionsTextile", String.class);
    public static final Property<String> FACILITIES = Property.create("facilities", String.class);
    public static final Property<String> FACILITIES_TEXTILE = Property.create("facilitiesTextile", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<CourseClass>> COURSE_CLASSES = Property.create("courseClasses", List.class);
    public static final Property<List<Session>> SESSIONS = Property.create("sessions", List.class);
    public static final Property<Site> SITE = Property.create("site", Site.class);

    protected Long angelId;
    protected Integer capacity;
    protected Date created;
    protected String directions;
    protected String directionsTextile;
    protected String facilities;
    protected String facilitiesTextile;
    protected Date modified;
    protected String name;

    protected Object college;
    protected Object courseClasses;
    protected Object sessions;
    protected Object site;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCapacity(Integer capacity) {
        beforePropertyWrite("capacity", this.capacity, capacity);
        this.capacity = capacity;
    }

    public Integer getCapacity() {
        beforePropertyRead("capacity");
        return this.capacity;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDirections(String directions) {
        beforePropertyWrite("directions", this.directions, directions);
        this.directions = directions;
    }

    public String getDirections() {
        beforePropertyRead("directions");
        return this.directions;
    }

    public void setDirectionsTextile(String directionsTextile) {
        beforePropertyWrite("directionsTextile", this.directionsTextile, directionsTextile);
        this.directionsTextile = directionsTextile;
    }

    public String getDirectionsTextile() {
        beforePropertyRead("directionsTextile");
        return this.directionsTextile;
    }

    public void setFacilities(String facilities) {
        beforePropertyWrite("facilities", this.facilities, facilities);
        this.facilities = facilities;
    }

    public String getFacilities() {
        beforePropertyRead("facilities");
        return this.facilities;
    }

    public void setFacilitiesTextile(String facilitiesTextile) {
        beforePropertyWrite("facilitiesTextile", this.facilitiesTextile, facilitiesTextile);
        this.facilitiesTextile = facilitiesTextile;
    }

    public String getFacilitiesTextile() {
        beforePropertyRead("facilitiesTextile");
        return this.facilitiesTextile;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToCourseClasses(CourseClass obj) {
        addToManyTarget("courseClasses", obj, true);
    }

    public void removeFromCourseClasses(CourseClass obj) {
        removeToManyTarget("courseClasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CourseClass> getCourseClasses() {
        return (List<CourseClass>)readProperty("courseClasses");
    }

    public void addToSessions(Session obj) {
        addToManyTarget("sessions", obj, true);
    }

    public void removeFromSessions(Session obj) {
        removeToManyTarget("sessions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Session> getSessions() {
        return (List<Session>)readProperty("sessions");
    }

    public void setSite(Site site) {
        setToOneTarget("site", site, true);
    }

    public Site getSite() {
        return (Site)readProperty("site");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "capacity":
                return this.capacity;
            case "created":
                return this.created;
            case "directions":
                return this.directions;
            case "directionsTextile":
                return this.directionsTextile;
            case "facilities":
                return this.facilities;
            case "facilitiesTextile":
                return this.facilitiesTextile;
            case "modified":
                return this.modified;
            case "name":
                return this.name;
            case "college":
                return this.college;
            case "courseClasses":
                return this.courseClasses;
            case "sessions":
                return this.sessions;
            case "site":
                return this.site;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "capacity":
                this.capacity = (Integer)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "directions":
                this.directions = (String)val;
                break;
            case "directionsTextile":
                this.directionsTextile = (String)val;
                break;
            case "facilities":
                this.facilities = (String)val;
                break;
            case "facilitiesTextile":
                this.facilitiesTextile = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "college":
                this.college = val;
                break;
            case "courseClasses":
                this.courseClasses = val;
                break;
            case "sessions":
                this.sessions = val;
                break;
            case "site":
                this.site = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.capacity);
        out.writeObject(this.created);
        out.writeObject(this.directions);
        out.writeObject(this.directionsTextile);
        out.writeObject(this.facilities);
        out.writeObject(this.facilitiesTextile);
        out.writeObject(this.modified);
        out.writeObject(this.name);
        out.writeObject(this.college);
        out.writeObject(this.courseClasses);
        out.writeObject(this.sessions);
        out.writeObject(this.site);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.capacity = (Integer)in.readObject();
        this.created = (Date)in.readObject();
        this.directions = (String)in.readObject();
        this.directionsTextile = (String)in.readObject();
        this.facilities = (String)in.readObject();
        this.facilitiesTextile = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.name = (String)in.readObject();
        this.college = in.readObject();
        this.courseClasses = in.readObject();
        this.sessions = in.readObject();
        this.site = in.readObject();
    }

}
