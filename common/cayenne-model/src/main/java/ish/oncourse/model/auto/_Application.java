package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.ApplicationStatus;
import ish.common.types.ConfirmationStatus;
import ish.common.types.PaymentSource;
import ish.math.Money;
import ish.oncourse.model.ApplicationCustomField;
import ish.oncourse.model.College;
import ish.oncourse.model.Course;
import ish.oncourse.model.ExpandableCayenneDataObject;
import ish.oncourse.model.Student;

/**
 * Class _Application was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Application extends ExpandableCayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CONFIRMATION_STATUS_PROPERTY = "confirmationStatus";
    public static final String CREATED_PROPERTY = "created";
    public static final String ENROL_BY_PROPERTY = "enrolBy";
    public static final String FEE_OVERRIDE_PROPERTY = "feeOverride";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String REASON_PROPERTY = "reason";
    public static final String SOURCE_PROPERTY = "source";
    public static final String STATUS_PROPERTY = "status";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String COURSE_PROPERTY = "course";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";
    public static final String STUDENT_PROPERTY = "student";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<ConfirmationStatus> CONFIRMATION_STATUS = Property.create("confirmationStatus", ConfirmationStatus.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> ENROL_BY = Property.create("enrolBy", Date.class);
    public static final Property<Money> FEE_OVERRIDE = Property.create("feeOverride", Money.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> REASON = Property.create("reason", String.class);
    public static final Property<PaymentSource> SOURCE = Property.create("source", PaymentSource.class);
    public static final Property<ApplicationStatus> STATUS = Property.create("status", ApplicationStatus.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Course> COURSE = Property.create("course", Course.class);
    public static final Property<List<ApplicationCustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);
    public static final Property<Student> STUDENT = Property.create("student", Student.class);

    protected Long angelId;
    protected ConfirmationStatus confirmationStatus;
    protected Date created;
    protected Date enrolBy;
    protected Money feeOverride;
    protected Date modified;
    protected String reason;
    protected PaymentSource source;
    protected ApplicationStatus status;

    protected Object college;
    protected Object course;
    protected Object customFields;
    protected Object student;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
        beforePropertyWrite("confirmationStatus", this.confirmationStatus, confirmationStatus);
        this.confirmationStatus = confirmationStatus;
    }

    public ConfirmationStatus getConfirmationStatus() {
        beforePropertyRead("confirmationStatus");
        return this.confirmationStatus;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setEnrolBy(Date enrolBy) {
        beforePropertyWrite("enrolBy", this.enrolBy, enrolBy);
        this.enrolBy = enrolBy;
    }

    public Date getEnrolBy() {
        beforePropertyRead("enrolBy");
        return this.enrolBy;
    }

    public void setFeeOverride(Money feeOverride) {
        beforePropertyWrite("feeOverride", this.feeOverride, feeOverride);
        this.feeOverride = feeOverride;
    }

    public Money getFeeOverride() {
        beforePropertyRead("feeOverride");
        return this.feeOverride;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setReason(String reason) {
        beforePropertyWrite("reason", this.reason, reason);
        this.reason = reason;
    }

    public String getReason() {
        beforePropertyRead("reason");
        return this.reason;
    }

    public void setSource(PaymentSource source) {
        beforePropertyWrite("source", this.source, source);
        this.source = source;
    }

    public PaymentSource getSource() {
        beforePropertyRead("source");
        return this.source;
    }

    public void setStatus(ApplicationStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public ApplicationStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCourse(Course course) {
        setToOneTarget("course", course, true);
    }

    public Course getCourse() {
        return (Course)readProperty("course");
    }

    public void addToCustomFields(ApplicationCustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(ApplicationCustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ApplicationCustomField> getCustomFields() {
        return (List<ApplicationCustomField>)readProperty("customFields");
    }

    public void setStudent(Student student) {
        setToOneTarget("student", student, true);
    }

    public Student getStudent() {
        return (Student)readProperty("student");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "confirmationStatus":
                return this.confirmationStatus;
            case "created":
                return this.created;
            case "enrolBy":
                return this.enrolBy;
            case "feeOverride":
                return this.feeOverride;
            case "modified":
                return this.modified;
            case "reason":
                return this.reason;
            case "source":
                return this.source;
            case "status":
                return this.status;
            case "college":
                return this.college;
            case "course":
                return this.course;
            case "customFields":
                return this.customFields;
            case "student":
                return this.student;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "confirmationStatus":
                this.confirmationStatus = (ConfirmationStatus)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "enrolBy":
                this.enrolBy = (Date)val;
                break;
            case "feeOverride":
                this.feeOverride = (Money)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "reason":
                this.reason = (String)val;
                break;
            case "source":
                this.source = (PaymentSource)val;
                break;
            case "status":
                this.status = (ApplicationStatus)val;
                break;
            case "college":
                this.college = val;
                break;
            case "course":
                this.course = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            case "student":
                this.student = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.confirmationStatus);
        out.writeObject(this.created);
        out.writeObject(this.enrolBy);
        out.writeObject(this.feeOverride);
        out.writeObject(this.modified);
        out.writeObject(this.reason);
        out.writeObject(this.source);
        out.writeObject(this.status);
        out.writeObject(this.college);
        out.writeObject(this.course);
        out.writeObject(this.customFields);
        out.writeObject(this.student);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.confirmationStatus = (ConfirmationStatus)in.readObject();
        this.created = (Date)in.readObject();
        this.enrolBy = (Date)in.readObject();
        this.feeOverride = (Money)in.readObject();
        this.modified = (Date)in.readObject();
        this.reason = (String)in.readObject();
        this.source = (PaymentSource)in.readObject();
        this.status = (ApplicationStatus)in.readObject();
        this.college = in.readObject();
        this.course = in.readObject();
        this.customFields = in.readObject();
        this.student = in.readObject();
    }

}
