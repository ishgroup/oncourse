package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;

/**
 * Class _QueuedStatistic was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QueuedStatistic extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ENTITY_IDENTIFIER_PROPERTY = "entityIdentifier";
    public static final String RECEIVED_TIMESTAMP_PROPERTY = "receivedTimestamp";
    public static final String STACKED_COUNT_PROPERTY = "stackedCount";
    public static final String STACKED_TRANSACTIONS_COUNT_PROPERTY = "stackedTransactionsCount";
    public static final String COLLEGE_PROPERTY = "college";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> ENTITY_IDENTIFIER = Property.create("entityIdentifier", String.class);
    public static final Property<Date> RECEIVED_TIMESTAMP = Property.create("receivedTimestamp", Date.class);
    public static final Property<Integer> STACKED_COUNT = Property.create("stackedCount", Integer.class);
    public static final Property<Integer> STACKED_TRANSACTIONS_COUNT = Property.create("stackedTransactionsCount", Integer.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);

    protected String entityIdentifier;
    protected Date receivedTimestamp;
    protected Integer stackedCount;
    protected Integer stackedTransactionsCount;

    protected Object college;

    public void setEntityIdentifier(String entityIdentifier) {
        beforePropertyWrite("entityIdentifier", this.entityIdentifier, entityIdentifier);
        this.entityIdentifier = entityIdentifier;
    }

    public String getEntityIdentifier() {
        beforePropertyRead("entityIdentifier");
        return this.entityIdentifier;
    }

    public void setReceivedTimestamp(Date receivedTimestamp) {
        beforePropertyWrite("receivedTimestamp", this.receivedTimestamp, receivedTimestamp);
        this.receivedTimestamp = receivedTimestamp;
    }

    public Date getReceivedTimestamp() {
        beforePropertyRead("receivedTimestamp");
        return this.receivedTimestamp;
    }

    public void setStackedCount(Integer stackedCount) {
        beforePropertyWrite("stackedCount", this.stackedCount, stackedCount);
        this.stackedCount = stackedCount;
    }

    public Integer getStackedCount() {
        beforePropertyRead("stackedCount");
        return this.stackedCount;
    }

    public void setStackedTransactionsCount(Integer stackedTransactionsCount) {
        beforePropertyWrite("stackedTransactionsCount", this.stackedTransactionsCount, stackedTransactionsCount);
        this.stackedTransactionsCount = stackedTransactionsCount;
    }

    public Integer getStackedTransactionsCount() {
        beforePropertyRead("stackedTransactionsCount");
        return this.stackedTransactionsCount;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "entityIdentifier":
                return this.entityIdentifier;
            case "receivedTimestamp":
                return this.receivedTimestamp;
            case "stackedCount":
                return this.stackedCount;
            case "stackedTransactionsCount":
                return this.stackedTransactionsCount;
            case "college":
                return this.college;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "entityIdentifier":
                this.entityIdentifier = (String)val;
                break;
            case "receivedTimestamp":
                this.receivedTimestamp = (Date)val;
                break;
            case "stackedCount":
                this.stackedCount = (Integer)val;
                break;
            case "stackedTransactionsCount":
                this.stackedTransactionsCount = (Integer)val;
                break;
            case "college":
                this.college = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.entityIdentifier);
        out.writeObject(this.receivedTimestamp);
        out.writeObject(this.stackedCount);
        out.writeObject(this.stackedTransactionsCount);
        out.writeObject(this.college);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.entityIdentifier = (String)in.readObject();
        this.receivedTimestamp = (Date)in.readObject();
        this.stackedCount = (Integer)in.readObject();
        this.stackedTransactionsCount = (Integer)in.readObject();
        this.college = in.readObject();
    }

}
