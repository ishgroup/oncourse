package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;

/**
 * Class _Postcode was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Postcode extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String B_SPNAME_PROPERTY = "bSPname";
    public static final String B_SPNUMBER_PROPERTY = "bSPnumber";
    public static final String CATEGORY_PROPERTY = "category";
    public static final String COMMENTS_PROPERTY = "comments";
    public static final String DELIVERY_OFFICE_PROPERTY = "deliveryOffice";
    public static final String ISH_VERSION_PROPERTY = "ishVersion";
    public static final String LOCALITY_PROPERTY = "locality";
    public static final String PARCEL_ZONE_PROPERTY = "parcelZone";
    public static final String POSTCODE_PROPERTY = "postcode";
    public static final String PRESORT_INDICATOR_PROPERTY = "presortIndicator";
    public static final String STATE_PROPERTY = "state";

    public static final String POSTCODE_PK_COLUMN = "postcode";

    public static final Property<String> B_SPNAME = Property.create("bSPname", String.class);
    public static final Property<Short> B_SPNUMBER = Property.create("bSPnumber", Short.class);
    public static final Property<String> CATEGORY = Property.create("category", String.class);
    public static final Property<String> COMMENTS = Property.create("comments", String.class);
    public static final Property<String> DELIVERY_OFFICE = Property.create("deliveryOffice", String.class);
    public static final Property<Long> ISH_VERSION = Property.create("ishVersion", Long.class);
    public static final Property<String> LOCALITY = Property.create("locality", String.class);
    public static final Property<String> PARCEL_ZONE = Property.create("parcelZone", String.class);
    public static final Property<Short> POSTCODE = Property.create("postcode", Short.class);
    public static final Property<Short> PRESORT_INDICATOR = Property.create("presortIndicator", Short.class);
    public static final Property<String> STATE = Property.create("state", String.class);

    protected String bSPname;
    protected Short bSPnumber;
    protected String category;
    protected String comments;
    protected String deliveryOffice;
    protected Long ishVersion;
    protected String locality;
    protected String parcelZone;
    protected Short postcode;
    protected Short presortIndicator;
    protected String state;


    public void setBSPname(String bSPname) {
        beforePropertyWrite("bSPname", this.bSPname, bSPname);
        this.bSPname = bSPname;
    }

    public String getBSPname() {
        beforePropertyRead("bSPname");
        return this.bSPname;
    }

    public void setBSPnumber(Short bSPnumber) {
        beforePropertyWrite("bSPnumber", this.bSPnumber, bSPnumber);
        this.bSPnumber = bSPnumber;
    }

    public Short getBSPnumber() {
        beforePropertyRead("bSPnumber");
        return this.bSPnumber;
    }

    public void setCategory(String category) {
        beforePropertyWrite("category", this.category, category);
        this.category = category;
    }

    public String getCategory() {
        beforePropertyRead("category");
        return this.category;
    }

    public void setComments(String comments) {
        beforePropertyWrite("comments", this.comments, comments);
        this.comments = comments;
    }

    public String getComments() {
        beforePropertyRead("comments");
        return this.comments;
    }

    public void setDeliveryOffice(String deliveryOffice) {
        beforePropertyWrite("deliveryOffice", this.deliveryOffice, deliveryOffice);
        this.deliveryOffice = deliveryOffice;
    }

    public String getDeliveryOffice() {
        beforePropertyRead("deliveryOffice");
        return this.deliveryOffice;
    }

    public void setIshVersion(Long ishVersion) {
        beforePropertyWrite("ishVersion", this.ishVersion, ishVersion);
        this.ishVersion = ishVersion;
    }

    public Long getIshVersion() {
        beforePropertyRead("ishVersion");
        return this.ishVersion;
    }

    public void setLocality(String locality) {
        beforePropertyWrite("locality", this.locality, locality);
        this.locality = locality;
    }

    public String getLocality() {
        beforePropertyRead("locality");
        return this.locality;
    }

    public void setParcelZone(String parcelZone) {
        beforePropertyWrite("parcelZone", this.parcelZone, parcelZone);
        this.parcelZone = parcelZone;
    }

    public String getParcelZone() {
        beforePropertyRead("parcelZone");
        return this.parcelZone;
    }

    public void setPostcode(Short postcode) {
        beforePropertyWrite("postcode", this.postcode, postcode);
        this.postcode = postcode;
    }

    public Short getPostcode() {
        beforePropertyRead("postcode");
        return this.postcode;
    }

    public void setPresortIndicator(Short presortIndicator) {
        beforePropertyWrite("presortIndicator", this.presortIndicator, presortIndicator);
        this.presortIndicator = presortIndicator;
    }

    public Short getPresortIndicator() {
        beforePropertyRead("presortIndicator");
        return this.presortIndicator;
    }

    public void setState(String state) {
        beforePropertyWrite("state", this.state, state);
        this.state = state;
    }

    public String getState() {
        beforePropertyRead("state");
        return this.state;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "bSPname":
                return this.bSPname;
            case "bSPnumber":
                return this.bSPnumber;
            case "category":
                return this.category;
            case "comments":
                return this.comments;
            case "deliveryOffice":
                return this.deliveryOffice;
            case "ishVersion":
                return this.ishVersion;
            case "locality":
                return this.locality;
            case "parcelZone":
                return this.parcelZone;
            case "postcode":
                return this.postcode;
            case "presortIndicator":
                return this.presortIndicator;
            case "state":
                return this.state;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "bSPname":
                this.bSPname = (String)val;
                break;
            case "bSPnumber":
                this.bSPnumber = (Short)val;
                break;
            case "category":
                this.category = (String)val;
                break;
            case "comments":
                this.comments = (String)val;
                break;
            case "deliveryOffice":
                this.deliveryOffice = (String)val;
                break;
            case "ishVersion":
                this.ishVersion = (Long)val;
                break;
            case "locality":
                this.locality = (String)val;
                break;
            case "parcelZone":
                this.parcelZone = (String)val;
                break;
            case "postcode":
                this.postcode = (Short)val;
                break;
            case "presortIndicator":
                this.presortIndicator = (Short)val;
                break;
            case "state":
                this.state = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.bSPname);
        out.writeObject(this.bSPnumber);
        out.writeObject(this.category);
        out.writeObject(this.comments);
        out.writeObject(this.deliveryOffice);
        out.writeObject(this.ishVersion);
        out.writeObject(this.locality);
        out.writeObject(this.parcelZone);
        out.writeObject(this.postcode);
        out.writeObject(this.presortIndicator);
        out.writeObject(this.state);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.bSPname = (String)in.readObject();
        this.bSPnumber = (Short)in.readObject();
        this.category = (String)in.readObject();
        this.comments = (String)in.readObject();
        this.deliveryOffice = (String)in.readObject();
        this.ishVersion = (Long)in.readObject();
        this.locality = (String)in.readObject();
        this.parcelZone = (String)in.readObject();
        this.postcode = (Short)in.readObject();
        this.presortIndicator = (Short)in.readObject();
        this.state = (String)in.readObject();
    }

}
