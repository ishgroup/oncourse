package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.Gender;
import ish.oncourse.model.AssessmentSubmission;
import ish.oncourse.model.College;
import ish.oncourse.model.ContactCustomField;
import ish.oncourse.model.ContactRelation;
import ish.oncourse.model.CorporatePass;
import ish.oncourse.model.Country;
import ish.oncourse.model.DiscussionCommentContact;
import ish.oncourse.model.ExpandableCayenneDataObject;
import ish.oncourse.model.Invoice;
import ish.oncourse.model.MessagePerson;
import ish.oncourse.model.PaymentIn;
import ish.oncourse.model.PaymentOut;
import ish.oncourse.model.ProductItem;
import ish.oncourse.model.Student;
import ish.oncourse.model.SupportPassword;
import ish.oncourse.model.Tax;
import ish.oncourse.model.Tutor;

/**
 * Class _Contact was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Contact extends ExpandableCayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ABN_PROPERTY = "abn";
    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String BUSINESS_PHONE_NUMBER_PROPERTY = "businessPhoneNumber";
    public static final String COOKIE_HASH_PROPERTY = "cookieHash";
    public static final String CREATED_PROPERTY = "created";
    public static final String DATE_OF_BIRTH_PROPERTY = "dateOfBirth";
    public static final String EMAIL_ADDRESS_PROPERTY = "emailAddress";
    public static final String FAMILY_NAME_PROPERTY = "familyName";
    public static final String FAX_NUMBER_PROPERTY = "faxNumber";
    public static final String GIVEN_NAME_PROPERTY = "givenName";
    public static final String HOME_PHONE_NUMBER_PROPERTY = "homePhoneNumber";
    public static final String HONORIFIC_PROPERTY = "honorific";
    public static final String INVOICE_TERMS_PROPERTY = "invoiceTerms";
    public static final String IS_COMPANY_PROPERTY = "isCompany";
    public static final String GENDER_PROPERTY = "gender";
    public static final String IS_MARKETING_VIA_EMAIL_ALLOWED_PROPERTY = "isMarketingViaEmailAllowed";
    public static final String IS_MARKETING_VIA_POST_ALLOWED_PROPERTY = "isMarketingViaPostAllowed";
    public static final String IS_MARKETING_VIA_SMSALLOWED_PROPERTY = "isMarketingViaSMSAllowed";
    public static final String LAST_LOGIN_TIME_PROPERTY = "lastLoginTime";
    public static final String MIDDLE_NAME_PROPERTY = "middleName";
    public static final String MOBILE_PHONE_NUMBER_PROPERTY = "mobilePhoneNumber";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PASSWORD_PROPERTY = "password";
    public static final String PASSWORD_HASH_PROPERTY = "passwordHash";
    public static final String PASSWORD_RECOVER_EXPIRE_PROPERTY = "passwordRecoverExpire";
    public static final String PASSWORD_RECOVERY_KEY_PROPERTY = "passwordRecoveryKey";
    public static final String POSTCODE_PROPERTY = "postcode";
    public static final String STATE_PROPERTY = "state";
    public static final String STREET_PROPERTY = "street";
    public static final String SUBURB_PROPERTY = "suburb";
    public static final String TAX_FILE_NUMBER_PROPERTY = "taxFileNumber";
    public static final String TITLE_PROPERTY = "title";
    public static final String UNIQUE_CODE_PROPERTY = "uniqueCode";
    public static final String ASSESSMENT_SUBMISSIONS_PROPERTY = "assessmentSubmissions";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONTACT_COMMENTS_PROPERTY = "contactComments";
    public static final String CORPORATE_PASSES_PROPERTY = "corporatePasses";
    public static final String COUNTRY_PROPERTY = "country";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";
    public static final String FROM_CONTACTS_PROPERTY = "fromContacts";
    public static final String INVOICES_PROPERTY = "invoices";
    public static final String MESSAGE_PEOPLE_PROPERTY = "messagePeople";
    public static final String PAYMENTS_IN_PROPERTY = "paymentsIn";
    public static final String PAYMENTS_OUT_PROPERTY = "paymentsOut";
    public static final String PRODUCTS_PROPERTY = "products";
    public static final String STUDENT_PROPERTY = "student";
    public static final String SUPPORT_PASSWORD_PROPERTY = "supportPassword";
    public static final String TAX_OVERRIDE_PROPERTY = "taxOverride";
    public static final String TO_CONTACTS_PROPERTY = "toContacts";
    public static final String TUTOR_PROPERTY = "tutor";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> ABN = Property.create("abn", String.class);
    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> BUSINESS_PHONE_NUMBER = Property.create("businessPhoneNumber", String.class);
    public static final Property<String> COOKIE_HASH = Property.create("cookieHash", String.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> DATE_OF_BIRTH = Property.create("dateOfBirth", Date.class);
    public static final Property<String> EMAIL_ADDRESS = Property.create("emailAddress", String.class);
    public static final Property<String> FAMILY_NAME = Property.create("familyName", String.class);
    public static final Property<String> FAX_NUMBER = Property.create("faxNumber", String.class);
    public static final Property<String> GIVEN_NAME = Property.create("givenName", String.class);
    public static final Property<String> HOME_PHONE_NUMBER = Property.create("homePhoneNumber", String.class);
    public static final Property<String> HONORIFIC = Property.create("honorific", String.class);
    public static final Property<Integer> INVOICE_TERMS = Property.create("invoiceTerms", Integer.class);
    public static final Property<Boolean> IS_COMPANY = Property.create("isCompany", Boolean.class);
    public static final Property<Gender> GENDER = Property.create("gender", Gender.class);
    public static final Property<Boolean> IS_MARKETING_VIA_EMAIL_ALLOWED = Property.create("isMarketingViaEmailAllowed", Boolean.class);
    public static final Property<Boolean> IS_MARKETING_VIA_POST_ALLOWED = Property.create("isMarketingViaPostAllowed", Boolean.class);
    public static final Property<Boolean> IS_MARKETING_VIA_SMSALLOWED = Property.create("isMarketingViaSMSAllowed", Boolean.class);
    public static final Property<Date> LAST_LOGIN_TIME = Property.create("lastLoginTime", Date.class);
    public static final Property<String> MIDDLE_NAME = Property.create("middleName", String.class);
    public static final Property<String> MOBILE_PHONE_NUMBER = Property.create("mobilePhoneNumber", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<String> PASSWORD_HASH = Property.create("passwordHash", String.class);
    public static final Property<Date> PASSWORD_RECOVER_EXPIRE = Property.create("passwordRecoverExpire", Date.class);
    public static final Property<String> PASSWORD_RECOVERY_KEY = Property.create("passwordRecoveryKey", String.class);
    public static final Property<String> POSTCODE = Property.create("postcode", String.class);
    public static final Property<String> STATE = Property.create("state", String.class);
    public static final Property<String> STREET = Property.create("street", String.class);
    public static final Property<String> SUBURB = Property.create("suburb", String.class);
    public static final Property<String> TAX_FILE_NUMBER = Property.create("taxFileNumber", String.class);
    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> UNIQUE_CODE = Property.create("uniqueCode", String.class);
    public static final Property<List<AssessmentSubmission>> ASSESSMENT_SUBMISSIONS = Property.create("assessmentSubmissions", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<DiscussionCommentContact>> CONTACT_COMMENTS = Property.create("contactComments", List.class);
    public static final Property<List<CorporatePass>> CORPORATE_PASSES = Property.create("corporatePasses", List.class);
    public static final Property<Country> COUNTRY = Property.create("country", Country.class);
    public static final Property<List<ContactCustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);
    public static final Property<List<ContactRelation>> FROM_CONTACTS = Property.create("fromContacts", List.class);
    public static final Property<List<Invoice>> INVOICES = Property.create("invoices", List.class);
    public static final Property<List<MessagePerson>> MESSAGE_PEOPLE = Property.create("messagePeople", List.class);
    public static final Property<List<PaymentIn>> PAYMENTS_IN = Property.create("paymentsIn", List.class);
    public static final Property<List<PaymentOut>> PAYMENTS_OUT = Property.create("paymentsOut", List.class);
    public static final Property<List<ProductItem>> PRODUCTS = Property.create("products", List.class);
    public static final Property<Student> STUDENT = Property.create("student", Student.class);
    public static final Property<SupportPassword> SUPPORT_PASSWORD = Property.create("supportPassword", SupportPassword.class);
    public static final Property<Tax> TAX_OVERRIDE = Property.create("taxOverride", Tax.class);
    public static final Property<List<ContactRelation>> TO_CONTACTS = Property.create("toContacts", List.class);
    public static final Property<Tutor> TUTOR = Property.create("tutor", Tutor.class);

    protected String abn;
    protected Long angelId;
    protected String businessPhoneNumber;
    protected String cookieHash;
    protected Date created;
    protected Date dateOfBirth;
    protected String emailAddress;
    protected String familyName;
    protected String faxNumber;
    protected String givenName;
    protected String homePhoneNumber;
    protected String honorific;
    protected Integer invoiceTerms;
    protected Boolean isCompany;
    protected Gender gender;
    protected Boolean isMarketingViaEmailAllowed;
    protected Boolean isMarketingViaPostAllowed;
    protected Boolean isMarketingViaSMSAllowed;
    protected Date lastLoginTime;
    protected String middleName;
    protected String mobilePhoneNumber;
    protected Date modified;
    protected String password;
    protected String passwordHash;
    protected Date passwordRecoverExpire;
    protected String passwordRecoveryKey;
    protected String postcode;
    protected String state;
    protected String street;
    protected String suburb;
    protected String taxFileNumber;
    protected String title;
    protected String uniqueCode;

    protected Object assessmentSubmissions;
    protected Object college;
    protected Object contactComments;
    protected Object corporatePasses;
    protected Object country;
    protected Object customFields;
    protected Object fromContacts;
    protected Object invoices;
    protected Object messagePeople;
    protected Object paymentsIn;
    protected Object paymentsOut;
    protected Object products;
    protected Object student;
    protected Object supportPassword;
    protected Object taxOverride;
    protected Object toContacts;
    protected Object tutor;

    public void setAbn(String abn) {
        beforePropertyWrite("abn", this.abn, abn);
        this.abn = abn;
    }

    public String getAbn() {
        beforePropertyRead("abn");
        return this.abn;
    }

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setBusinessPhoneNumber(String businessPhoneNumber) {
        beforePropertyWrite("businessPhoneNumber", this.businessPhoneNumber, businessPhoneNumber);
        this.businessPhoneNumber = businessPhoneNumber;
    }

    public String getBusinessPhoneNumber() {
        beforePropertyRead("businessPhoneNumber");
        return this.businessPhoneNumber;
    }

    public void setCookieHash(String cookieHash) {
        beforePropertyWrite("cookieHash", this.cookieHash, cookieHash);
        this.cookieHash = cookieHash;
    }

    public String getCookieHash() {
        beforePropertyRead("cookieHash");
        return this.cookieHash;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        beforePropertyWrite("dateOfBirth", this.dateOfBirth, dateOfBirth);
        this.dateOfBirth = dateOfBirth;
    }

    public Date getDateOfBirth() {
        beforePropertyRead("dateOfBirth");
        return this.dateOfBirth;
    }

    public void setEmailAddress(String emailAddress) {
        beforePropertyWrite("emailAddress", this.emailAddress, emailAddress);
        this.emailAddress = emailAddress;
    }

    public String getEmailAddress() {
        beforePropertyRead("emailAddress");
        return this.emailAddress;
    }

    public void setFamilyName(String familyName) {
        beforePropertyWrite("familyName", this.familyName, familyName);
        this.familyName = familyName;
    }

    public String getFamilyName() {
        beforePropertyRead("familyName");
        return this.familyName;
    }

    public void setFaxNumber(String faxNumber) {
        beforePropertyWrite("faxNumber", this.faxNumber, faxNumber);
        this.faxNumber = faxNumber;
    }

    public String getFaxNumber() {
        beforePropertyRead("faxNumber");
        return this.faxNumber;
    }

    public void setGivenName(String givenName) {
        beforePropertyWrite("givenName", this.givenName, givenName);
        this.givenName = givenName;
    }

    public String getGivenName() {
        beforePropertyRead("givenName");
        return this.givenName;
    }

    public void setHomePhoneNumber(String homePhoneNumber) {
        beforePropertyWrite("homePhoneNumber", this.homePhoneNumber, homePhoneNumber);
        this.homePhoneNumber = homePhoneNumber;
    }

    public String getHomePhoneNumber() {
        beforePropertyRead("homePhoneNumber");
        return this.homePhoneNumber;
    }

    public void setHonorific(String honorific) {
        beforePropertyWrite("honorific", this.honorific, honorific);
        this.honorific = honorific;
    }

    public String getHonorific() {
        beforePropertyRead("honorific");
        return this.honorific;
    }

    public void setInvoiceTerms(Integer invoiceTerms) {
        beforePropertyWrite("invoiceTerms", this.invoiceTerms, invoiceTerms);
        this.invoiceTerms = invoiceTerms;
    }

    public Integer getInvoiceTerms() {
        beforePropertyRead("invoiceTerms");
        return this.invoiceTerms;
    }

    public void setIsCompany(Boolean isCompany) {
        beforePropertyWrite("isCompany", this.isCompany, isCompany);
        this.isCompany = isCompany;
    }

    public Boolean getIsCompany() {
        beforePropertyRead("isCompany");
        return this.isCompany;
    }

    public void setGender(Gender gender) {
        beforePropertyWrite("gender", this.gender, gender);
        this.gender = gender;
    }

    public Gender getGender() {
        beforePropertyRead("gender");
        return this.gender;
    }

    public void setIsMarketingViaEmailAllowed(Boolean isMarketingViaEmailAllowed) {
        beforePropertyWrite("isMarketingViaEmailAllowed", this.isMarketingViaEmailAllowed, isMarketingViaEmailAllowed);
        this.isMarketingViaEmailAllowed = isMarketingViaEmailAllowed;
    }

    public Boolean getIsMarketingViaEmailAllowed() {
        beforePropertyRead("isMarketingViaEmailAllowed");
        return this.isMarketingViaEmailAllowed;
    }

    public void setIsMarketingViaPostAllowed(Boolean isMarketingViaPostAllowed) {
        beforePropertyWrite("isMarketingViaPostAllowed", this.isMarketingViaPostAllowed, isMarketingViaPostAllowed);
        this.isMarketingViaPostAllowed = isMarketingViaPostAllowed;
    }

    public Boolean getIsMarketingViaPostAllowed() {
        beforePropertyRead("isMarketingViaPostAllowed");
        return this.isMarketingViaPostAllowed;
    }

    public void setIsMarketingViaSMSAllowed(Boolean isMarketingViaSMSAllowed) {
        beforePropertyWrite("isMarketingViaSMSAllowed", this.isMarketingViaSMSAllowed, isMarketingViaSMSAllowed);
        this.isMarketingViaSMSAllowed = isMarketingViaSMSAllowed;
    }

    public Boolean getIsMarketingViaSMSAllowed() {
        beforePropertyRead("isMarketingViaSMSAllowed");
        return this.isMarketingViaSMSAllowed;
    }

    public void setLastLoginTime(Date lastLoginTime) {
        beforePropertyWrite("lastLoginTime", this.lastLoginTime, lastLoginTime);
        this.lastLoginTime = lastLoginTime;
    }

    public Date getLastLoginTime() {
        beforePropertyRead("lastLoginTime");
        return this.lastLoginTime;
    }

    public void setMiddleName(String middleName) {
        beforePropertyWrite("middleName", this.middleName, middleName);
        this.middleName = middleName;
    }

    public String getMiddleName() {
        beforePropertyRead("middleName");
        return this.middleName;
    }

    public void setMobilePhoneNumber(String mobilePhoneNumber) {
        beforePropertyWrite("mobilePhoneNumber", this.mobilePhoneNumber, mobilePhoneNumber);
        this.mobilePhoneNumber = mobilePhoneNumber;
    }

    public String getMobilePhoneNumber() {
        beforePropertyRead("mobilePhoneNumber");
        return this.mobilePhoneNumber;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setPasswordHash(String passwordHash) {
        beforePropertyWrite("passwordHash", this.passwordHash, passwordHash);
        this.passwordHash = passwordHash;
    }

    public String getPasswordHash() {
        beforePropertyRead("passwordHash");
        return this.passwordHash;
    }

    public void setPasswordRecoverExpire(Date passwordRecoverExpire) {
        beforePropertyWrite("passwordRecoverExpire", this.passwordRecoverExpire, passwordRecoverExpire);
        this.passwordRecoverExpire = passwordRecoverExpire;
    }

    public Date getPasswordRecoverExpire() {
        beforePropertyRead("passwordRecoverExpire");
        return this.passwordRecoverExpire;
    }

    public void setPasswordRecoveryKey(String passwordRecoveryKey) {
        beforePropertyWrite("passwordRecoveryKey", this.passwordRecoveryKey, passwordRecoveryKey);
        this.passwordRecoveryKey = passwordRecoveryKey;
    }

    public String getPasswordRecoveryKey() {
        beforePropertyRead("passwordRecoveryKey");
        return this.passwordRecoveryKey;
    }

    public void setPostcode(String postcode) {
        beforePropertyWrite("postcode", this.postcode, postcode);
        this.postcode = postcode;
    }

    public String getPostcode() {
        beforePropertyRead("postcode");
        return this.postcode;
    }

    public void setState(String state) {
        beforePropertyWrite("state", this.state, state);
        this.state = state;
    }

    public String getState() {
        beforePropertyRead("state");
        return this.state;
    }

    public void setStreet(String street) {
        beforePropertyWrite("street", this.street, street);
        this.street = street;
    }

    public String getStreet() {
        beforePropertyRead("street");
        return this.street;
    }

    public void setSuburb(String suburb) {
        beforePropertyWrite("suburb", this.suburb, suburb);
        this.suburb = suburb;
    }

    public String getSuburb() {
        beforePropertyRead("suburb");
        return this.suburb;
    }

    public void setTaxFileNumber(String taxFileNumber) {
        beforePropertyWrite("taxFileNumber", this.taxFileNumber, taxFileNumber);
        this.taxFileNumber = taxFileNumber;
    }

    public String getTaxFileNumber() {
        beforePropertyRead("taxFileNumber");
        return this.taxFileNumber;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setUniqueCode(String uniqueCode) {
        beforePropertyWrite("uniqueCode", this.uniqueCode, uniqueCode);
        this.uniqueCode = uniqueCode;
    }

    public String getUniqueCode() {
        beforePropertyRead("uniqueCode");
        return this.uniqueCode;
    }

    public void addToAssessmentSubmissions(AssessmentSubmission obj) {
        addToManyTarget("assessmentSubmissions", obj, true);
    }

    public void removeFromAssessmentSubmissions(AssessmentSubmission obj) {
        removeToManyTarget("assessmentSubmissions", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<AssessmentSubmission> getAssessmentSubmissions() {
        return (List<AssessmentSubmission>)readProperty("assessmentSubmissions");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToContactComments(DiscussionCommentContact obj) {
        addToManyTarget("contactComments", obj, true);
    }

    public void removeFromContactComments(DiscussionCommentContact obj) {
        removeToManyTarget("contactComments", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<DiscussionCommentContact> getContactComments() {
        return (List<DiscussionCommentContact>)readProperty("contactComments");
    }

    public void addToCorporatePasses(CorporatePass obj) {
        addToManyTarget("corporatePasses", obj, true);
    }

    public void removeFromCorporatePasses(CorporatePass obj) {
        removeToManyTarget("corporatePasses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CorporatePass> getCorporatePasses() {
        return (List<CorporatePass>)readProperty("corporatePasses");
    }

    public void setCountry(Country country) {
        setToOneTarget("country", country, true);
    }

    public Country getCountry() {
        return (Country)readProperty("country");
    }

    public void addToCustomFields(ContactCustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(ContactCustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContactCustomField> getCustomFields() {
        return (List<ContactCustomField>)readProperty("customFields");
    }

    public void addToFromContacts(ContactRelation obj) {
        addToManyTarget("fromContacts", obj, true);
    }

    public void removeFromFromContacts(ContactRelation obj) {
        removeToManyTarget("fromContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContactRelation> getFromContacts() {
        return (List<ContactRelation>)readProperty("fromContacts");
    }

    public void addToInvoices(Invoice obj) {
        addToManyTarget("invoices", obj, true);
    }

    public void removeFromInvoices(Invoice obj) {
        removeToManyTarget("invoices", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Invoice> getInvoices() {
        return (List<Invoice>)readProperty("invoices");
    }

    public void addToMessagePeople(MessagePerson obj) {
        addToManyTarget("messagePeople", obj, true);
    }

    public void removeFromMessagePeople(MessagePerson obj) {
        removeToManyTarget("messagePeople", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<MessagePerson> getMessagePeople() {
        return (List<MessagePerson>)readProperty("messagePeople");
    }

    public void addToPaymentsIn(PaymentIn obj) {
        addToManyTarget("paymentsIn", obj, true);
    }

    public void removeFromPaymentsIn(PaymentIn obj) {
        removeToManyTarget("paymentsIn", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PaymentIn> getPaymentsIn() {
        return (List<PaymentIn>)readProperty("paymentsIn");
    }

    public void addToPaymentsOut(PaymentOut obj) {
        addToManyTarget("paymentsOut", obj, true);
    }

    public void removeFromPaymentsOut(PaymentOut obj) {
        removeToManyTarget("paymentsOut", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PaymentOut> getPaymentsOut() {
        return (List<PaymentOut>)readProperty("paymentsOut");
    }

    public void addToProducts(ProductItem obj) {
        addToManyTarget("products", obj, true);
    }

    public void removeFromProducts(ProductItem obj) {
        removeToManyTarget("products", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ProductItem> getProducts() {
        return (List<ProductItem>)readProperty("products");
    }

    public void setStudent(Student student) {
        setToOneTarget("student", student, true);
    }

    public Student getStudent() {
        return (Student)readProperty("student");
    }

    public void setSupportPassword(SupportPassword supportPassword) {
        setToOneTarget("supportPassword", supportPassword, true);
    }

    public SupportPassword getSupportPassword() {
        return (SupportPassword)readProperty("supportPassword");
    }

    public void setTaxOverride(Tax taxOverride) {
        setToOneTarget("taxOverride", taxOverride, true);
    }

    public Tax getTaxOverride() {
        return (Tax)readProperty("taxOverride");
    }

    public void addToToContacts(ContactRelation obj) {
        addToManyTarget("toContacts", obj, true);
    }

    public void removeFromToContacts(ContactRelation obj) {
        removeToManyTarget("toContacts", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<ContactRelation> getToContacts() {
        return (List<ContactRelation>)readProperty("toContacts");
    }

    public void setTutor(Tutor tutor) {
        setToOneTarget("tutor", tutor, true);
    }

    public Tutor getTutor() {
        return (Tutor)readProperty("tutor");
    }

    protected abstract void onPostAdd();

    protected abstract void onPrePersist();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "abn":
                return this.abn;
            case "angelId":
                return this.angelId;
            case "businessPhoneNumber":
                return this.businessPhoneNumber;
            case "cookieHash":
                return this.cookieHash;
            case "created":
                return this.created;
            case "dateOfBirth":
                return this.dateOfBirth;
            case "emailAddress":
                return this.emailAddress;
            case "familyName":
                return this.familyName;
            case "faxNumber":
                return this.faxNumber;
            case "givenName":
                return this.givenName;
            case "homePhoneNumber":
                return this.homePhoneNumber;
            case "honorific":
                return this.honorific;
            case "invoiceTerms":
                return this.invoiceTerms;
            case "isCompany":
                return this.isCompany;
            case "gender":
                return this.gender;
            case "isMarketingViaEmailAllowed":
                return this.isMarketingViaEmailAllowed;
            case "isMarketingViaPostAllowed":
                return this.isMarketingViaPostAllowed;
            case "isMarketingViaSMSAllowed":
                return this.isMarketingViaSMSAllowed;
            case "lastLoginTime":
                return this.lastLoginTime;
            case "middleName":
                return this.middleName;
            case "mobilePhoneNumber":
                return this.mobilePhoneNumber;
            case "modified":
                return this.modified;
            case "password":
                return this.password;
            case "passwordHash":
                return this.passwordHash;
            case "passwordRecoverExpire":
                return this.passwordRecoverExpire;
            case "passwordRecoveryKey":
                return this.passwordRecoveryKey;
            case "postcode":
                return this.postcode;
            case "state":
                return this.state;
            case "street":
                return this.street;
            case "suburb":
                return this.suburb;
            case "taxFileNumber":
                return this.taxFileNumber;
            case "title":
                return this.title;
            case "uniqueCode":
                return this.uniqueCode;
            case "assessmentSubmissions":
                return this.assessmentSubmissions;
            case "college":
                return this.college;
            case "contactComments":
                return this.contactComments;
            case "corporatePasses":
                return this.corporatePasses;
            case "country":
                return this.country;
            case "customFields":
                return this.customFields;
            case "fromContacts":
                return this.fromContacts;
            case "invoices":
                return this.invoices;
            case "messagePeople":
                return this.messagePeople;
            case "paymentsIn":
                return this.paymentsIn;
            case "paymentsOut":
                return this.paymentsOut;
            case "products":
                return this.products;
            case "student":
                return this.student;
            case "supportPassword":
                return this.supportPassword;
            case "taxOverride":
                return this.taxOverride;
            case "toContacts":
                return this.toContacts;
            case "tutor":
                return this.tutor;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "abn":
                this.abn = (String)val;
                break;
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "businessPhoneNumber":
                this.businessPhoneNumber = (String)val;
                break;
            case "cookieHash":
                this.cookieHash = (String)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "dateOfBirth":
                this.dateOfBirth = (Date)val;
                break;
            case "emailAddress":
                this.emailAddress = (String)val;
                break;
            case "familyName":
                this.familyName = (String)val;
                break;
            case "faxNumber":
                this.faxNumber = (String)val;
                break;
            case "givenName":
                this.givenName = (String)val;
                break;
            case "homePhoneNumber":
                this.homePhoneNumber = (String)val;
                break;
            case "honorific":
                this.honorific = (String)val;
                break;
            case "invoiceTerms":
                this.invoiceTerms = (Integer)val;
                break;
            case "isCompany":
                this.isCompany = (Boolean)val;
                break;
            case "gender":
                this.gender = (Gender)val;
                break;
            case "isMarketingViaEmailAllowed":
                this.isMarketingViaEmailAllowed = (Boolean)val;
                break;
            case "isMarketingViaPostAllowed":
                this.isMarketingViaPostAllowed = (Boolean)val;
                break;
            case "isMarketingViaSMSAllowed":
                this.isMarketingViaSMSAllowed = (Boolean)val;
                break;
            case "lastLoginTime":
                this.lastLoginTime = (Date)val;
                break;
            case "middleName":
                this.middleName = (String)val;
                break;
            case "mobilePhoneNumber":
                this.mobilePhoneNumber = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "passwordHash":
                this.passwordHash = (String)val;
                break;
            case "passwordRecoverExpire":
                this.passwordRecoverExpire = (Date)val;
                break;
            case "passwordRecoveryKey":
                this.passwordRecoveryKey = (String)val;
                break;
            case "postcode":
                this.postcode = (String)val;
                break;
            case "state":
                this.state = (String)val;
                break;
            case "street":
                this.street = (String)val;
                break;
            case "suburb":
                this.suburb = (String)val;
                break;
            case "taxFileNumber":
                this.taxFileNumber = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "uniqueCode":
                this.uniqueCode = (String)val;
                break;
            case "assessmentSubmissions":
                this.assessmentSubmissions = val;
                break;
            case "college":
                this.college = val;
                break;
            case "contactComments":
                this.contactComments = val;
                break;
            case "corporatePasses":
                this.corporatePasses = val;
                break;
            case "country":
                this.country = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            case "fromContacts":
                this.fromContacts = val;
                break;
            case "invoices":
                this.invoices = val;
                break;
            case "messagePeople":
                this.messagePeople = val;
                break;
            case "paymentsIn":
                this.paymentsIn = val;
                break;
            case "paymentsOut":
                this.paymentsOut = val;
                break;
            case "products":
                this.products = val;
                break;
            case "student":
                this.student = val;
                break;
            case "supportPassword":
                this.supportPassword = val;
                break;
            case "taxOverride":
                this.taxOverride = val;
                break;
            case "toContacts":
                this.toContacts = val;
                break;
            case "tutor":
                this.tutor = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.abn);
        out.writeObject(this.angelId);
        out.writeObject(this.businessPhoneNumber);
        out.writeObject(this.cookieHash);
        out.writeObject(this.created);
        out.writeObject(this.dateOfBirth);
        out.writeObject(this.emailAddress);
        out.writeObject(this.familyName);
        out.writeObject(this.faxNumber);
        out.writeObject(this.givenName);
        out.writeObject(this.homePhoneNumber);
        out.writeObject(this.honorific);
        out.writeObject(this.invoiceTerms);
        out.writeObject(this.isCompany);
        out.writeObject(this.gender);
        out.writeObject(this.isMarketingViaEmailAllowed);
        out.writeObject(this.isMarketingViaPostAllowed);
        out.writeObject(this.isMarketingViaSMSAllowed);
        out.writeObject(this.lastLoginTime);
        out.writeObject(this.middleName);
        out.writeObject(this.mobilePhoneNumber);
        out.writeObject(this.modified);
        out.writeObject(this.password);
        out.writeObject(this.passwordHash);
        out.writeObject(this.passwordRecoverExpire);
        out.writeObject(this.passwordRecoveryKey);
        out.writeObject(this.postcode);
        out.writeObject(this.state);
        out.writeObject(this.street);
        out.writeObject(this.suburb);
        out.writeObject(this.taxFileNumber);
        out.writeObject(this.title);
        out.writeObject(this.uniqueCode);
        out.writeObject(this.assessmentSubmissions);
        out.writeObject(this.college);
        out.writeObject(this.contactComments);
        out.writeObject(this.corporatePasses);
        out.writeObject(this.country);
        out.writeObject(this.customFields);
        out.writeObject(this.fromContacts);
        out.writeObject(this.invoices);
        out.writeObject(this.messagePeople);
        out.writeObject(this.paymentsIn);
        out.writeObject(this.paymentsOut);
        out.writeObject(this.products);
        out.writeObject(this.student);
        out.writeObject(this.supportPassword);
        out.writeObject(this.taxOverride);
        out.writeObject(this.toContacts);
        out.writeObject(this.tutor);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.abn = (String)in.readObject();
        this.angelId = (Long)in.readObject();
        this.businessPhoneNumber = (String)in.readObject();
        this.cookieHash = (String)in.readObject();
        this.created = (Date)in.readObject();
        this.dateOfBirth = (Date)in.readObject();
        this.emailAddress = (String)in.readObject();
        this.familyName = (String)in.readObject();
        this.faxNumber = (String)in.readObject();
        this.givenName = (String)in.readObject();
        this.homePhoneNumber = (String)in.readObject();
        this.honorific = (String)in.readObject();
        this.invoiceTerms = (Integer)in.readObject();
        this.isCompany = (Boolean)in.readObject();
        this.gender = (Gender)in.readObject();
        this.isMarketingViaEmailAllowed = (Boolean)in.readObject();
        this.isMarketingViaPostAllowed = (Boolean)in.readObject();
        this.isMarketingViaSMSAllowed = (Boolean)in.readObject();
        this.lastLoginTime = (Date)in.readObject();
        this.middleName = (String)in.readObject();
        this.mobilePhoneNumber = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.password = (String)in.readObject();
        this.passwordHash = (String)in.readObject();
        this.passwordRecoverExpire = (Date)in.readObject();
        this.passwordRecoveryKey = (String)in.readObject();
        this.postcode = (String)in.readObject();
        this.state = (String)in.readObject();
        this.street = (String)in.readObject();
        this.suburb = (String)in.readObject();
        this.taxFileNumber = (String)in.readObject();
        this.title = (String)in.readObject();
        this.uniqueCode = (String)in.readObject();
        this.assessmentSubmissions = in.readObject();
        this.college = in.readObject();
        this.contactComments = in.readObject();
        this.corporatePasses = in.readObject();
        this.country = in.readObject();
        this.customFields = in.readObject();
        this.fromContacts = in.readObject();
        this.invoices = in.readObject();
        this.messagePeople = in.readObject();
        this.paymentsIn = in.readObject();
        this.paymentsOut = in.readObject();
        this.products = in.readObject();
        this.student = in.readObject();
        this.supportPassword = in.readObject();
        this.taxOverride = in.readObject();
        this.toContacts = in.readObject();
        this.tutor = in.readObject();
    }

}
