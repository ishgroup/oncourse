package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.SystemUser;

/**
 * Class _Tax was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Tax extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CODE_PROPERTY = "code";
    public static final String CREATED_PROPERTY = "created";
    public static final String DESCRIPTION_PROPERTY = "description";
    public static final String IS_GSTTAX_TYPE_PROPERTY = "isGSTTaxType";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String RATE_PROPERTY = "rate";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CREATED_BY_PROPERTY = "createdBy";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Boolean> IS_GSTTAX_TYPE = Property.create("isGSTTaxType", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<BigDecimal> RATE = Property.create("rate", BigDecimal.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<SystemUser> CREATED_BY = Property.create("createdBy", SystemUser.class);

    protected Long angelId;
    protected String code;
    protected Date created;
    protected String description;
    protected Boolean isGSTTaxType;
    protected Date modified;
    protected BigDecimal rate;

    protected Object college;
    protected Object createdBy;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setIsGSTTaxType(Boolean isGSTTaxType) {
        beforePropertyWrite("isGSTTaxType", this.isGSTTaxType, isGSTTaxType);
        this.isGSTTaxType = isGSTTaxType;
    }

    public Boolean getIsGSTTaxType() {
        beforePropertyRead("isGSTTaxType");
        return this.isGSTTaxType;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setRate(BigDecimal rate) {
        beforePropertyWrite("rate", this.rate, rate);
        this.rate = rate;
    }

    public BigDecimal getRate() {
        beforePropertyRead("rate");
        return this.rate;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setCreatedBy(SystemUser createdBy) {
        setToOneTarget("createdBy", createdBy, true);
    }

    public SystemUser getCreatedBy() {
        return (SystemUser)readProperty("createdBy");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "code":
                return this.code;
            case "created":
                return this.created;
            case "description":
                return this.description;
            case "isGSTTaxType":
                return this.isGSTTaxType;
            case "modified":
                return this.modified;
            case "rate":
                return this.rate;
            case "college":
                return this.college;
            case "createdBy":
                return this.createdBy;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "code":
                this.code = (String)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "isGSTTaxType":
                this.isGSTTaxType = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "rate":
                this.rate = (BigDecimal)val;
                break;
            case "college":
                this.college = val;
                break;
            case "createdBy":
                this.createdBy = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.code);
        out.writeObject(this.created);
        out.writeObject(this.description);
        out.writeObject(this.isGSTTaxType);
        out.writeObject(this.modified);
        out.writeObject(this.rate);
        out.writeObject(this.college);
        out.writeObject(this.createdBy);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.code = (String)in.readObject();
        this.created = (Date)in.readObject();
        this.description = (String)in.readObject();
        this.isGSTTaxType = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.rate = (BigDecimal)in.readObject();
        this.college = in.readObject();
        this.createdBy = in.readObject();
    }

}
