package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.College;
import ish.oncourse.model.Tag;

/**
 * Class _TagGroupRequirement was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _TagGroupRequirement extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ALLOWS_MULTIPLE_TAGS_PROPERTY = "allowsMultipleTags";
    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CREATED_PROPERTY = "created";
    public static final String ENTITY_IDENTIFIER_PROPERTY = "entityIdentifier";
    public static final String IS_REQUIRED_PROPERTY = "isRequired";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String TAG_PROPERTY = "tag";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ALLOWS_MULTIPLE_TAGS = Property.create("allowsMultipleTags", Boolean.class);
    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> ENTITY_IDENTIFIER = Property.create("entityIdentifier", String.class);
    public static final Property<Boolean> IS_REQUIRED = Property.create("isRequired", Boolean.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Tag> TAG = Property.create("tag", Tag.class);

    protected Boolean allowsMultipleTags;
    protected Long angelId;
    protected Date created;
    protected String entityIdentifier;
    protected Boolean isRequired;
    protected Date modified;

    protected Object college;
    protected Object tag;

    public void setAllowsMultipleTags(Boolean allowsMultipleTags) {
        beforePropertyWrite("allowsMultipleTags", this.allowsMultipleTags, allowsMultipleTags);
        this.allowsMultipleTags = allowsMultipleTags;
    }

    public Boolean getAllowsMultipleTags() {
        beforePropertyRead("allowsMultipleTags");
        return this.allowsMultipleTags;
    }

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setEntityIdentifier(String entityIdentifier) {
        beforePropertyWrite("entityIdentifier", this.entityIdentifier, entityIdentifier);
        this.entityIdentifier = entityIdentifier;
    }

    public String getEntityIdentifier() {
        beforePropertyRead("entityIdentifier");
        return this.entityIdentifier;
    }

    public void setIsRequired(Boolean isRequired) {
        beforePropertyWrite("isRequired", this.isRequired, isRequired);
        this.isRequired = isRequired;
    }

    public Boolean getIsRequired() {
        beforePropertyRead("isRequired");
        return this.isRequired;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setTag(Tag tag) {
        setToOneTarget("tag", tag, true);
    }

    public Tag getTag() {
        return (Tag)readProperty("tag");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "allowsMultipleTags":
                return this.allowsMultipleTags;
            case "angelId":
                return this.angelId;
            case "created":
                return this.created;
            case "entityIdentifier":
                return this.entityIdentifier;
            case "isRequired":
                return this.isRequired;
            case "modified":
                return this.modified;
            case "college":
                return this.college;
            case "tag":
                return this.tag;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "allowsMultipleTags":
                this.allowsMultipleTags = (Boolean)val;
                break;
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "entityIdentifier":
                this.entityIdentifier = (String)val;
                break;
            case "isRequired":
                this.isRequired = (Boolean)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "college":
                this.college = val;
                break;
            case "tag":
                this.tag = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.allowsMultipleTags);
        out.writeObject(this.angelId);
        out.writeObject(this.created);
        out.writeObject(this.entityIdentifier);
        out.writeObject(this.isRequired);
        out.writeObject(this.modified);
        out.writeObject(this.college);
        out.writeObject(this.tag);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.allowsMultipleTags = (Boolean)in.readObject();
        this.angelId = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.entityIdentifier = (String)in.readObject();
        this.isRequired = (Boolean)in.readObject();
        this.modified = (Date)in.readObject();
        this.college = in.readObject();
        this.tag = in.readObject();
    }

}
