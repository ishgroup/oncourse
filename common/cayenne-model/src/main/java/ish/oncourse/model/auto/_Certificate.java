package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.CertificateOutcome;
import ish.oncourse.model.College;
import ish.oncourse.model.Qualification;
import ish.oncourse.model.Student;

/**
 * Class _Certificate was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Certificate extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String AWARDED_PROPERTY = "awarded";
    public static final String CERTIFICATE_NUMBER_PROPERTY = "certificateNumber";
    public static final String CREATED_PROPERTY = "created";
    public static final String END_DATE_PROPERTY = "endDate";
    public static final String FUNDING_SOURCE_PROPERTY = "fundingSource";
    public static final String IS_QUALIFICATION_PROPERTY = "isQualification";
    public static final String ISSUED_PROPERTY = "issued";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PRINTED_WHEN_PROPERTY = "printedWhen";
    public static final String PRIVATE_NOTES_PROPERTY = "privateNotes";
    public static final String PUBLIC_NOTES_PROPERTY = "publicNotes";
    public static final String REVOKED_WHEN_PROPERTY = "revokedWhen";
    public static final String STUDENT_FIRST_NAME_PROPERTY = "studentFirstName";
    public static final String STUDENT_LAST_NAME_PROPERTY = "studentLastName";
    public static final String UNIQUE_CODE_PROPERTY = "uniqueCode";
    public static final String CERTIFICATE_OUTCOMES_PROPERTY = "certificateOutcomes";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String QUALIFICATION_PROPERTY = "qualification";
    public static final String STUDENT_PROPERTY = "student";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<Date> AWARDED = Property.create("awarded", Date.class);
    public static final Property<Long> CERTIFICATE_NUMBER = Property.create("certificateNumber", Long.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> END_DATE = Property.create("endDate", Date.class);
    public static final Property<Integer> FUNDING_SOURCE = Property.create("fundingSource", Integer.class);
    public static final Property<Boolean> IS_QUALIFICATION = Property.create("isQualification", Boolean.class);
    public static final Property<Date> ISSUED = Property.create("issued", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Date> PRINTED_WHEN = Property.create("printedWhen", Date.class);
    public static final Property<String> PRIVATE_NOTES = Property.create("privateNotes", String.class);
    public static final Property<String> PUBLIC_NOTES = Property.create("publicNotes", String.class);
    public static final Property<Date> REVOKED_WHEN = Property.create("revokedWhen", Date.class);
    public static final Property<String> STUDENT_FIRST_NAME = Property.create("studentFirstName", String.class);
    public static final Property<String> STUDENT_LAST_NAME = Property.create("studentLastName", String.class);
    public static final Property<String> UNIQUE_CODE = Property.create("uniqueCode", String.class);
    public static final Property<List<CertificateOutcome>> CERTIFICATE_OUTCOMES = Property.create("certificateOutcomes", List.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Qualification> QUALIFICATION = Property.create("qualification", Qualification.class);
    public static final Property<Student> STUDENT = Property.create("student", Student.class);

    protected Long angelId;
    protected Date awarded;
    protected Long certificateNumber;
    protected Date created;
    protected Date endDate;
    protected Integer fundingSource;
    protected Boolean isQualification;
    protected Date issued;
    protected Date modified;
    protected Date printedWhen;
    protected String privateNotes;
    protected String publicNotes;
    protected Date revokedWhen;
    protected String studentFirstName;
    protected String studentLastName;
    protected String uniqueCode;

    protected Object certificateOutcomes;
    protected Object college;
    protected Object qualification;
    protected Object student;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setAwarded(Date awarded) {
        beforePropertyWrite("awarded", this.awarded, awarded);
        this.awarded = awarded;
    }

    public Date getAwarded() {
        beforePropertyRead("awarded");
        return this.awarded;
    }

    public void setCertificateNumber(Long certificateNumber) {
        beforePropertyWrite("certificateNumber", this.certificateNumber, certificateNumber);
        this.certificateNumber = certificateNumber;
    }

    public Long getCertificateNumber() {
        beforePropertyRead("certificateNumber");
        return this.certificateNumber;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setEndDate(Date endDate) {
        beforePropertyWrite("endDate", this.endDate, endDate);
        this.endDate = endDate;
    }

    public Date getEndDate() {
        beforePropertyRead("endDate");
        return this.endDate;
    }

    public void setFundingSource(Integer fundingSource) {
        beforePropertyWrite("fundingSource", this.fundingSource, fundingSource);
        this.fundingSource = fundingSource;
    }

    public Integer getFundingSource() {
        beforePropertyRead("fundingSource");
        return this.fundingSource;
    }

    public void setIsQualification(Boolean isQualification) {
        beforePropertyWrite("isQualification", this.isQualification, isQualification);
        this.isQualification = isQualification;
    }

    public Boolean getIsQualification() {
        beforePropertyRead("isQualification");
        return this.isQualification;
    }

    public void setIssued(Date issued) {
        beforePropertyWrite("issued", this.issued, issued);
        this.issued = issued;
    }

    public Date getIssued() {
        beforePropertyRead("issued");
        return this.issued;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPrintedWhen(Date printedWhen) {
        beforePropertyWrite("printedWhen", this.printedWhen, printedWhen);
        this.printedWhen = printedWhen;
    }

    public Date getPrintedWhen() {
        beforePropertyRead("printedWhen");
        return this.printedWhen;
    }

    public void setPrivateNotes(String privateNotes) {
        beforePropertyWrite("privateNotes", this.privateNotes, privateNotes);
        this.privateNotes = privateNotes;
    }

    public String getPrivateNotes() {
        beforePropertyRead("privateNotes");
        return this.privateNotes;
    }

    public void setPublicNotes(String publicNotes) {
        beforePropertyWrite("publicNotes", this.publicNotes, publicNotes);
        this.publicNotes = publicNotes;
    }

    public String getPublicNotes() {
        beforePropertyRead("publicNotes");
        return this.publicNotes;
    }

    public void setRevokedWhen(Date revokedWhen) {
        beforePropertyWrite("revokedWhen", this.revokedWhen, revokedWhen);
        this.revokedWhen = revokedWhen;
    }

    public Date getRevokedWhen() {
        beforePropertyRead("revokedWhen");
        return this.revokedWhen;
    }

    public void setStudentFirstName(String studentFirstName) {
        beforePropertyWrite("studentFirstName", this.studentFirstName, studentFirstName);
        this.studentFirstName = studentFirstName;
    }

    public String getStudentFirstName() {
        beforePropertyRead("studentFirstName");
        return this.studentFirstName;
    }

    public void setStudentLastName(String studentLastName) {
        beforePropertyWrite("studentLastName", this.studentLastName, studentLastName);
        this.studentLastName = studentLastName;
    }

    public String getStudentLastName() {
        beforePropertyRead("studentLastName");
        return this.studentLastName;
    }

    public void setUniqueCode(String uniqueCode) {
        beforePropertyWrite("uniqueCode", this.uniqueCode, uniqueCode);
        this.uniqueCode = uniqueCode;
    }

    public String getUniqueCode() {
        beforePropertyRead("uniqueCode");
        return this.uniqueCode;
    }

    public void addToCertificateOutcomes(CertificateOutcome obj) {
        addToManyTarget("certificateOutcomes", obj, true);
    }

    public void removeFromCertificateOutcomes(CertificateOutcome obj) {
        removeToManyTarget("certificateOutcomes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<CertificateOutcome> getCertificateOutcomes() {
        return (List<CertificateOutcome>)readProperty("certificateOutcomes");
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setQualification(Qualification qualification) {
        setToOneTarget("qualification", qualification, true);
    }

    public Qualification getQualification() {
        return (Qualification)readProperty("qualification");
    }

    public void setStudent(Student student) {
        setToOneTarget("student", student, true);
    }

    public Student getStudent() {
        return (Student)readProperty("student");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "awarded":
                return this.awarded;
            case "certificateNumber":
                return this.certificateNumber;
            case "created":
                return this.created;
            case "endDate":
                return this.endDate;
            case "fundingSource":
                return this.fundingSource;
            case "isQualification":
                return this.isQualification;
            case "issued":
                return this.issued;
            case "modified":
                return this.modified;
            case "printedWhen":
                return this.printedWhen;
            case "privateNotes":
                return this.privateNotes;
            case "publicNotes":
                return this.publicNotes;
            case "revokedWhen":
                return this.revokedWhen;
            case "studentFirstName":
                return this.studentFirstName;
            case "studentLastName":
                return this.studentLastName;
            case "uniqueCode":
                return this.uniqueCode;
            case "certificateOutcomes":
                return this.certificateOutcomes;
            case "college":
                return this.college;
            case "qualification":
                return this.qualification;
            case "student":
                return this.student;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "awarded":
                this.awarded = (Date)val;
                break;
            case "certificateNumber":
                this.certificateNumber = (Long)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "endDate":
                this.endDate = (Date)val;
                break;
            case "fundingSource":
                this.fundingSource = (Integer)val;
                break;
            case "isQualification":
                this.isQualification = (Boolean)val;
                break;
            case "issued":
                this.issued = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "printedWhen":
                this.printedWhen = (Date)val;
                break;
            case "privateNotes":
                this.privateNotes = (String)val;
                break;
            case "publicNotes":
                this.publicNotes = (String)val;
                break;
            case "revokedWhen":
                this.revokedWhen = (Date)val;
                break;
            case "studentFirstName":
                this.studentFirstName = (String)val;
                break;
            case "studentLastName":
                this.studentLastName = (String)val;
                break;
            case "uniqueCode":
                this.uniqueCode = (String)val;
                break;
            case "certificateOutcomes":
                this.certificateOutcomes = val;
                break;
            case "college":
                this.college = val;
                break;
            case "qualification":
                this.qualification = val;
                break;
            case "student":
                this.student = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.awarded);
        out.writeObject(this.certificateNumber);
        out.writeObject(this.created);
        out.writeObject(this.endDate);
        out.writeObject(this.fundingSource);
        out.writeObject(this.isQualification);
        out.writeObject(this.issued);
        out.writeObject(this.modified);
        out.writeObject(this.printedWhen);
        out.writeObject(this.privateNotes);
        out.writeObject(this.publicNotes);
        out.writeObject(this.revokedWhen);
        out.writeObject(this.studentFirstName);
        out.writeObject(this.studentLastName);
        out.writeObject(this.uniqueCode);
        out.writeObject(this.certificateOutcomes);
        out.writeObject(this.college);
        out.writeObject(this.qualification);
        out.writeObject(this.student);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.awarded = (Date)in.readObject();
        this.certificateNumber = (Long)in.readObject();
        this.created = (Date)in.readObject();
        this.endDate = (Date)in.readObject();
        this.fundingSource = (Integer)in.readObject();
        this.isQualification = (Boolean)in.readObject();
        this.issued = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.printedWhen = (Date)in.readObject();
        this.privateNotes = (String)in.readObject();
        this.publicNotes = (String)in.readObject();
        this.revokedWhen = (Date)in.readObject();
        this.studentFirstName = (String)in.readObject();
        this.studentLastName = (String)in.readObject();
        this.uniqueCode = (String)in.readObject();
        this.certificateOutcomes = in.readObject();
        this.college = in.readObject();
        this.qualification = in.readObject();
        this.student = in.readObject();
    }

}
