package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.oncourse.model.Log;

/**
 * Class _WillowUser was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _WillowUser extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String CREATED_PROPERTY = "created";
    public static final String EMAIL_PROPERTY = "email";
    public static final String FAILED_LOGIN_COUNT_PROPERTY = "failedLoginCount";
    public static final String FIRST_NAME_PROPERTY = "firstName";
    public static final String IS_ACTIVE_PROPERTY = "isActive";
    public static final String LAST_FAILED_LOGIN_PROPERTY = "lastFailedLogin";
    public static final String LAST_LOGIN_PROPERTY = "lastLogin";
    public static final String LAST_NAME_PROPERTY = "lastName";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String PASSWORD_PROPERTY = "password";
    public static final String LOGS_PROPERTY = "logs";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<Integer> FAILED_LOGIN_COUNT = Property.create("failedLoginCount", Integer.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<Boolean> IS_ACTIVE = Property.create("isActive", Boolean.class);
    public static final Property<Date> LAST_FAILED_LOGIN = Property.create("lastFailedLogin", Date.class);
    public static final Property<Date> LAST_LOGIN = Property.create("lastLogin", Date.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<List<Log>> LOGS = Property.create("logs", List.class);

    protected Date created;
    protected String email;
    protected Integer failedLoginCount;
    protected String firstName;
    protected Boolean isActive;
    protected Date lastFailedLogin;
    protected Date lastLogin;
    protected String lastName;
    protected Date modified;
    protected String password;

    protected Object logs;

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setFailedLoginCount(Integer failedLoginCount) {
        beforePropertyWrite("failedLoginCount", this.failedLoginCount, failedLoginCount);
        this.failedLoginCount = failedLoginCount;
    }

    public Integer getFailedLoginCount() {
        beforePropertyRead("failedLoginCount");
        return this.failedLoginCount;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setIsActive(Boolean isActive) {
        beforePropertyWrite("isActive", this.isActive, isActive);
        this.isActive = isActive;
    }

    public Boolean getIsActive() {
        beforePropertyRead("isActive");
        return this.isActive;
    }

    public void setLastFailedLogin(Date lastFailedLogin) {
        beforePropertyWrite("lastFailedLogin", this.lastFailedLogin, lastFailedLogin);
        this.lastFailedLogin = lastFailedLogin;
    }

    public Date getLastFailedLogin() {
        beforePropertyRead("lastFailedLogin");
        return this.lastFailedLogin;
    }

    public void setLastLogin(Date lastLogin) {
        beforePropertyWrite("lastLogin", this.lastLogin, lastLogin);
        this.lastLogin = lastLogin;
    }

    public Date getLastLogin() {
        beforePropertyRead("lastLogin");
        return this.lastLogin;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void addToLogs(Log obj) {
        addToManyTarget("logs", obj, true);
    }

    public void removeFromLogs(Log obj) {
        removeToManyTarget("logs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Log> getLogs() {
        return (List<Log>)readProperty("logs");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "created":
                return this.created;
            case "email":
                return this.email;
            case "failedLoginCount":
                return this.failedLoginCount;
            case "firstName":
                return this.firstName;
            case "isActive":
                return this.isActive;
            case "lastFailedLogin":
                return this.lastFailedLogin;
            case "lastLogin":
                return this.lastLogin;
            case "lastName":
                return this.lastName;
            case "modified":
                return this.modified;
            case "password":
                return this.password;
            case "logs":
                return this.logs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "created":
                this.created = (Date)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "failedLoginCount":
                this.failedLoginCount = (Integer)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "isActive":
                this.isActive = (Boolean)val;
                break;
            case "lastFailedLogin":
                this.lastFailedLogin = (Date)val;
                break;
            case "lastLogin":
                this.lastLogin = (Date)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "logs":
                this.logs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.created);
        out.writeObject(this.email);
        out.writeObject(this.failedLoginCount);
        out.writeObject(this.firstName);
        out.writeObject(this.isActive);
        out.writeObject(this.lastFailedLogin);
        out.writeObject(this.lastLogin);
        out.writeObject(this.lastName);
        out.writeObject(this.modified);
        out.writeObject(this.password);
        out.writeObject(this.logs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.created = (Date)in.readObject();
        this.email = (String)in.readObject();
        this.failedLoginCount = (Integer)in.readObject();
        this.firstName = (String)in.readObject();
        this.isActive = (Boolean)in.readObject();
        this.lastFailedLogin = (Date)in.readObject();
        this.lastLogin = (Date)in.readObject();
        this.lastName = (String)in.readObject();
        this.modified = (Date)in.readObject();
        this.password = (String)in.readObject();
        this.logs = in.readObject();
    }

}
