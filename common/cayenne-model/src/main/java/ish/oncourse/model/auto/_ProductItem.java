package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.cayenne.exp.Property;

import ish.common.types.ConfirmationStatus;
import ish.common.types.ProductStatus;
import ish.oncourse.model.College;
import ish.oncourse.model.Contact;
import ish.oncourse.model.InvoiceLine;
import ish.oncourse.model.Product;

/**
 * Class _ProductItem was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ProductItem extends WillowCayenneObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String CONFIRMATION_STATUS_PROPERTY = "confirmationStatus";
    public static final String CREATED_PROPERTY = "created";
    public static final String EXPIRY_DATE_PROPERTY = "expiryDate";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String STATUS_PROPERTY = "status";
    public static final String TYPE_PROPERTY = "type";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CONTACT_PROPERTY = "contact";
    public static final String INVOICE_LINE_PROPERTY = "invoiceLine";
    public static final String PRODUCT_PROPERTY = "product";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<ConfirmationStatus> CONFIRMATION_STATUS = Property.create("confirmationStatus", ConfirmationStatus.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> EXPIRY_DATE = Property.create("expiryDate", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<ProductStatus> STATUS = Property.create("status", ProductStatus.class);
    public static final Property<Integer> TYPE = Property.create("type", Integer.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<Contact> CONTACT = Property.create("contact", Contact.class);
    public static final Property<InvoiceLine> INVOICE_LINE = Property.create("invoiceLine", InvoiceLine.class);
    public static final Property<Product> PRODUCT = Property.create("product", Product.class);

    protected Long angelId;
    protected ConfirmationStatus confirmationStatus;
    protected Date created;
    protected Date expiryDate;
    protected Date modified;
    protected ProductStatus status;
    protected Integer type;

    protected Object college;
    protected Object contact;
    protected Object invoiceLine;
    protected Object product;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
        beforePropertyWrite("confirmationStatus", this.confirmationStatus, confirmationStatus);
        this.confirmationStatus = confirmationStatus;
    }

    public ConfirmationStatus getConfirmationStatus() {
        beforePropertyRead("confirmationStatus");
        return this.confirmationStatus;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setExpiryDate(Date expiryDate) {
        beforePropertyWrite("expiryDate", this.expiryDate, expiryDate);
        this.expiryDate = expiryDate;
    }

    public Date getExpiryDate() {
        beforePropertyRead("expiryDate");
        return this.expiryDate;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setStatus(ProductStatus status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public ProductStatus getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setType(Integer type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public Integer getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void setContact(Contact contact) {
        setToOneTarget("contact", contact, true);
    }

    public Contact getContact() {
        return (Contact)readProperty("contact");
    }

    public void setInvoiceLine(InvoiceLine invoiceLine) {
        setToOneTarget("invoiceLine", invoiceLine, true);
    }

    public InvoiceLine getInvoiceLine() {
        return (InvoiceLine)readProperty("invoiceLine");
    }

    public void setProduct(Product product) {
        setToOneTarget("product", product, true);
    }

    public Product getProduct() {
        return (Product)readProperty("product");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "confirmationStatus":
                return this.confirmationStatus;
            case "created":
                return this.created;
            case "expiryDate":
                return this.expiryDate;
            case "modified":
                return this.modified;
            case "status":
                return this.status;
            case "type":
                return this.type;
            case "college":
                return this.college;
            case "contact":
                return this.contact;
            case "invoiceLine":
                return this.invoiceLine;
            case "product":
                return this.product;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "confirmationStatus":
                this.confirmationStatus = (ConfirmationStatus)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "expiryDate":
                this.expiryDate = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "status":
                this.status = (ProductStatus)val;
                break;
            case "type":
                this.type = (Integer)val;
                break;
            case "college":
                this.college = val;
                break;
            case "contact":
                this.contact = val;
                break;
            case "invoiceLine":
                this.invoiceLine = val;
                break;
            case "product":
                this.product = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.confirmationStatus);
        out.writeObject(this.created);
        out.writeObject(this.expiryDate);
        out.writeObject(this.modified);
        out.writeObject(this.status);
        out.writeObject(this.type);
        out.writeObject(this.college);
        out.writeObject(this.contact);
        out.writeObject(this.invoiceLine);
        out.writeObject(this.product);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.confirmationStatus = (ConfirmationStatus)in.readObject();
        this.created = (Date)in.readObject();
        this.expiryDate = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.status = (ProductStatus)in.readObject();
        this.type = (Integer)in.readObject();
        this.college = in.readObject();
        this.contact = in.readObject();
        this.invoiceLine = in.readObject();
        this.product = in.readObject();
    }

}
