package ish.oncourse.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;
import java.util.List;

import org.apache.cayenne.exp.Property;

import ish.common.types.SurveyVisibility;
import ish.oncourse.model.College;
import ish.oncourse.model.Enrolment;
import ish.oncourse.model.ExpandableCayenneDataObject;
import ish.oncourse.model.FieldConfiguration;
import ish.oncourse.model.SurveyCustomField;

/**
 * Class _Survey was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Survey extends ExpandableCayenneDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ANGEL_ID_PROPERTY = "angelId";
    public static final String COMMENT_PROPERTY = "comment";
    public static final String COURSE_SCORE_PROPERTY = "courseScore";
    public static final String CREATED_PROPERTY = "created";
    public static final String MODIFIED_PROPERTY = "modified";
    public static final String NET_PROMOTER_SCORE_PROPERTY = "netPromoterScore";
    public static final String TESTIMONIAL_PROPERTY = "testimonial";
    public static final String TUTOR_SCORE_PROPERTY = "tutorScore";
    public static final String VENUE_SCORE_PROPERTY = "venueScore";
    public static final String VISIBILITY_PROPERTY = "visibility";
    public static final String COLLEGE_PROPERTY = "college";
    public static final String CUSTOM_FIELDS_PROPERTY = "customFields";
    public static final String ENROLMENT_PROPERTY = "enrolment";
    public static final String FIELD_CONFIGURATION_PROPERTY = "fieldConfiguration";

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Long> ANGEL_ID = Property.create("angelId", Long.class);
    public static final Property<String> COMMENT = Property.create("comment", String.class);
    public static final Property<Integer> COURSE_SCORE = Property.create("courseScore", Integer.class);
    public static final Property<Date> CREATED = Property.create("created", Date.class);
    public static final Property<Date> MODIFIED = Property.create("modified", Date.class);
    public static final Property<Integer> NET_PROMOTER_SCORE = Property.create("netPromoterScore", Integer.class);
    public static final Property<String> TESTIMONIAL = Property.create("testimonial", String.class);
    public static final Property<Integer> TUTOR_SCORE = Property.create("tutorScore", Integer.class);
    public static final Property<Integer> VENUE_SCORE = Property.create("venueScore", Integer.class);
    public static final Property<SurveyVisibility> VISIBILITY = Property.create("visibility", SurveyVisibility.class);
    public static final Property<College> COLLEGE = Property.create("college", College.class);
    public static final Property<List<SurveyCustomField>> CUSTOM_FIELDS = Property.create("customFields", List.class);
    public static final Property<Enrolment> ENROLMENT = Property.create("enrolment", Enrolment.class);
    public static final Property<FieldConfiguration> FIELD_CONFIGURATION = Property.create("fieldConfiguration", FieldConfiguration.class);

    protected Long angelId;
    protected String comment;
    protected Integer courseScore;
    protected Date created;
    protected Date modified;
    protected Integer netPromoterScore;
    protected String testimonial;
    protected Integer tutorScore;
    protected Integer venueScore;
    protected SurveyVisibility visibility;

    protected Object college;
    protected Object customFields;
    protected Object enrolment;
    protected Object fieldConfiguration;

    public void setAngelId(Long angelId) {
        beforePropertyWrite("angelId", this.angelId, angelId);
        this.angelId = angelId;
    }

    public Long getAngelId() {
        beforePropertyRead("angelId");
        return this.angelId;
    }

    public void setComment(String comment) {
        beforePropertyWrite("comment", this.comment, comment);
        this.comment = comment;
    }

    public String getComment() {
        beforePropertyRead("comment");
        return this.comment;
    }

    public void setCourseScore(Integer courseScore) {
        beforePropertyWrite("courseScore", this.courseScore, courseScore);
        this.courseScore = courseScore;
    }

    public Integer getCourseScore() {
        beforePropertyRead("courseScore");
        return this.courseScore;
    }

    public void setCreated(Date created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public Date getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setModified(Date modified) {
        beforePropertyWrite("modified", this.modified, modified);
        this.modified = modified;
    }

    public Date getModified() {
        beforePropertyRead("modified");
        return this.modified;
    }

    public void setNetPromoterScore(Integer netPromoterScore) {
        beforePropertyWrite("netPromoterScore", this.netPromoterScore, netPromoterScore);
        this.netPromoterScore = netPromoterScore;
    }

    public Integer getNetPromoterScore() {
        beforePropertyRead("netPromoterScore");
        return this.netPromoterScore;
    }

    public void setTestimonial(String testimonial) {
        beforePropertyWrite("testimonial", this.testimonial, testimonial);
        this.testimonial = testimonial;
    }

    public String getTestimonial() {
        beforePropertyRead("testimonial");
        return this.testimonial;
    }

    public void setTutorScore(Integer tutorScore) {
        beforePropertyWrite("tutorScore", this.tutorScore, tutorScore);
        this.tutorScore = tutorScore;
    }

    public Integer getTutorScore() {
        beforePropertyRead("tutorScore");
        return this.tutorScore;
    }

    public void setVenueScore(Integer venueScore) {
        beforePropertyWrite("venueScore", this.venueScore, venueScore);
        this.venueScore = venueScore;
    }

    public Integer getVenueScore() {
        beforePropertyRead("venueScore");
        return this.venueScore;
    }

    public void setVisibility(SurveyVisibility visibility) {
        beforePropertyWrite("visibility", this.visibility, visibility);
        this.visibility = visibility;
    }

    public SurveyVisibility getVisibility() {
        beforePropertyRead("visibility");
        return this.visibility;
    }

    public void setCollege(College college) {
        setToOneTarget("college", college, true);
    }

    public College getCollege() {
        return (College)readProperty("college");
    }

    public void addToCustomFields(SurveyCustomField obj) {
        addToManyTarget("customFields", obj, true);
    }

    public void removeFromCustomFields(SurveyCustomField obj) {
        removeToManyTarget("customFields", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<SurveyCustomField> getCustomFields() {
        return (List<SurveyCustomField>)readProperty("customFields");
    }

    public void setEnrolment(Enrolment enrolment) {
        setToOneTarget("enrolment", enrolment, true);
    }

    public Enrolment getEnrolment() {
        return (Enrolment)readProperty("enrolment");
    }

    public void setFieldConfiguration(FieldConfiguration fieldConfiguration) {
        setToOneTarget("fieldConfiguration", fieldConfiguration, true);
    }

    public FieldConfiguration getFieldConfiguration() {
        return (FieldConfiguration)readProperty("fieldConfiguration");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "angelId":
                return this.angelId;
            case "comment":
                return this.comment;
            case "courseScore":
                return this.courseScore;
            case "created":
                return this.created;
            case "modified":
                return this.modified;
            case "netPromoterScore":
                return this.netPromoterScore;
            case "testimonial":
                return this.testimonial;
            case "tutorScore":
                return this.tutorScore;
            case "venueScore":
                return this.venueScore;
            case "visibility":
                return this.visibility;
            case "college":
                return this.college;
            case "customFields":
                return this.customFields;
            case "enrolment":
                return this.enrolment;
            case "fieldConfiguration":
                return this.fieldConfiguration;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "angelId":
                this.angelId = (Long)val;
                break;
            case "comment":
                this.comment = (String)val;
                break;
            case "courseScore":
                this.courseScore = (Integer)val;
                break;
            case "created":
                this.created = (Date)val;
                break;
            case "modified":
                this.modified = (Date)val;
                break;
            case "netPromoterScore":
                this.netPromoterScore = (Integer)val;
                break;
            case "testimonial":
                this.testimonial = (String)val;
                break;
            case "tutorScore":
                this.tutorScore = (Integer)val;
                break;
            case "venueScore":
                this.venueScore = (Integer)val;
                break;
            case "visibility":
                this.visibility = (SurveyVisibility)val;
                break;
            case "college":
                this.college = val;
                break;
            case "customFields":
                this.customFields = val;
                break;
            case "enrolment":
                this.enrolment = val;
                break;
            case "fieldConfiguration":
                this.fieldConfiguration = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.angelId);
        out.writeObject(this.comment);
        out.writeObject(this.courseScore);
        out.writeObject(this.created);
        out.writeObject(this.modified);
        out.writeObject(this.netPromoterScore);
        out.writeObject(this.testimonial);
        out.writeObject(this.tutorScore);
        out.writeObject(this.venueScore);
        out.writeObject(this.visibility);
        out.writeObject(this.college);
        out.writeObject(this.customFields);
        out.writeObject(this.enrolment);
        out.writeObject(this.fieldConfiguration);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.angelId = (Long)in.readObject();
        this.comment = (String)in.readObject();
        this.courseScore = (Integer)in.readObject();
        this.created = (Date)in.readObject();
        this.modified = (Date)in.readObject();
        this.netPromoterScore = (Integer)in.readObject();
        this.testimonial = (String)in.readObject();
        this.tutorScore = (Integer)in.readObject();
        this.venueScore = (Integer)in.readObject();
        this.visibility = (SurveyVisibility)in.readObject();
        this.college = in.readObject();
        this.customFields = in.readObject();
        this.enrolment = in.readObject();
        this.fieldConfiguration = in.readObject();
    }

}
