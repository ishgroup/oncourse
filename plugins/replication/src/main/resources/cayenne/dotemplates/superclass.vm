##  Classes available in template
##    object (duplicated as 'objEntity') - the ObjEntity class: See org.apache.cayenne.map.ObjEntity
##    stringUtils - class for string "helper" functions: See org.apache.cayenne.gen.StringUtils
##    entityUtils - class for entity "helper" functions: See org.apache.cayenne.gen.EntityUtils
##    importUtils - class for import statement management: See org.apache.cayenne.gen.ImportUtils
##    superClassName
##    superPackageName
##    subClassName
##    subPackageName
##    baseClassName
##    basePackageName
##
/*
 * Copyright ish group pty ltd. All rights reserved. http://www.ish.com.au
 * No copying or use of this code is allowed without permission in writing from ish.
 *
 * Generated from superclass.vm
 */


${importUtils.setPackage($superPackageName)}##
${importUtils.addReservedType("${superPackageName}.${superClassName}")}##
${importUtils.addType("${basePackageName}.${baseClassName}")}##
${importUtils.addType('org.apache.cayenne.exp.Property')}##
${importUtils.addType('javax.annotation.Nonnull')}##
${importUtils.addType('javax.annotation.Nullable')}##
#foreach( $attr in ${object.DeclaredAttributes} )
$importUtils.addType(${attr.Type})##
#end
#foreach( $rel in ${object.DeclaredRelationships} )
$importUtils.addType(${rel.TargetEntity.ClassName})##
#if(${rel.CollectionType}) 
$importUtils.addType(${rel.CollectionType})##
#end
#end
${importUtils.generate()}

import javax.annotation.Generated;

/**
 * Class ${superClassName} was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
@Generated(value = { "GeneratedByCayenne" })
public abstract class ${superClassName} extends ${baseClassName} {
	private static final long serialVersionUID = 1L;
	public static final String ENTITY_NAME = "${subClassName}";

## Create property names
#foreach( $attr in ${object.DeclaredAttributes} )
    @Deprecated
    public static final String ${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY = "${attr.Name}";
#end
#foreach( $rel in ${object.DeclaredRelationships} )
    @Deprecated
    public static final String ${stringUtils.capitalizedAsConstant($rel.Name)}_PROPERTY = "${rel.Name}";
#end

#if( $object.DbEntity )
#foreach( $idAttr in ${object.DbEntity.PrimaryKeys} )
    public static final String ${stringUtils.capitalizedAsConstant($idAttr.Name)}_PK_COLUMN = "${idAttr.Name}";
#end
#end

## Create Properties
#foreach( $attr in ${object.DeclaredAttributes} )
    public static final Property<$importUtils.formatJavaType(${attr.Type}, false)> ${stringUtils.capitalizedAsConstant($attr.Name)} = Property.create("${attr.Name}", ${importUtils.formatJavaType(${attr.Type}, false)}.class);
#end
#foreach( $rel in ${object.DeclaredRelationships} )
#if( $rel.ToMany )
#if ( ${rel.CollectionType} == "java.util.Map")
    #set( $type = "$importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($entityUtils.getMapKeyType($rel)), $importUtils.formatJavaType($rel.TargetEntity.ClassName)>" )
    public static final Property<$type> ${stringUtils.capitalizedAsConstant($rel.Name)} = Property.create("${rel.Name}", ${rel.CollectionType}.class);
#else
    #set( $type = "$importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($rel.TargetEntity.ClassName)>" )
    public static final Property<$type> ${stringUtils.capitalizedAsConstant($rel.Name)} = Property.create("${rel.Name}", ${rel.CollectionType}.class);
#end
#else
    public static final Property<$importUtils.formatJavaType(${rel.TargetEntity.ClassName})> ${stringUtils.capitalizedAsConstant($rel.Name)} = Property.create("${rel.Name}", ${importUtils.formatJavaType(${rel.TargetEntity.ClassName})}.class);
#end
#end

## Create attribute set/get methods
#foreach( $attr in ${object.DeclaredAttributes} )
#if ("true" != "${object.isReadOnly()}")
    public void set${stringUtils.capitalized($attr.Name)}($importUtils.formatJavaType(${attr.Type}) $stringUtils.formatVariableName(${attr.Name})) {
        writeProperty("${attr.Name}", $stringUtils.formatVariableName(${attr.Name}));
    }
#end
#if ( $importUtils.isBoolean(${attr.Type}) )
	public boolean is${stringUtils.capitalized($attr.Name)}() {
        Boolean value = (Boolean)readProperty("${attr.Name}");
        return (value != null) ? value.booleanValue() : false;
    }
#elseif ( $importUtils.isNonBooleanPrimitive(${attr.Type}) )
    public ${importUtils.formatJavaType($attr.Type)} get${stringUtils.capitalized($attr.Name)}() {
        Object value = readProperty("${attr.Name}");
        return (value != null) ? ($importUtils.formatJavaTypeAsNonBooleanPrimitive(${attr.Type})) value : 0;
    }
#else
    public #if(${attr.getDbAttribute().isMandatory()})@Nonnull#{else}@Nullable#{end} $importUtils.formatJavaType(${attr.Type}) get${stringUtils.capitalized($attr.Name)}() {
        return ($importUtils.formatJavaType(${attr.Type}))readProperty("${attr.Name}");
    }
#end

#end
##
## Create list add/remove/get methods
#foreach( $rel in ${object.DeclaredRelationships} )
#if( $rel.ToMany )
#if ( ! $rel.ReadOnly )
    public void addTo${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClassName}) obj) {
        addToManyTarget("${rel.Name}", obj, true);
    }
    public void removeFrom${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClassName}) obj) {
        removeToManyTarget("${rel.Name}", obj, true);
    }
#end

#if ( ${rel.CollectionType} == "java.util.Map")
    public @Nonnull $importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($entityUtils.getMapKeyType($rel)), $importUtils.formatJavaType($rel.TargetEntity.ClassName)> get${stringUtils.capitalized($rel.Name)}() {
        return ($importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($entityUtils.getMapKeyType($rel)), $importUtils.formatJavaType($rel.TargetEntity.ClassName)>)readProperty("${rel.Name}");
    }
#else
    public @Nonnull $importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($rel.TargetEntity.ClassName)> get${stringUtils.capitalized($rel.Name)}() {
        return ($importUtils.formatJavaType($rel.CollectionType)<$importUtils.formatJavaType($rel.TargetEntity.ClassName)>)readProperty("${rel.Name}");
    }
#end
#else
#if ( !${object.isReadOnly()} && !$rel.ReadOnly )
    public void set${stringUtils.capitalized($rel.Name)}($importUtils.formatJavaType(${rel.TargetEntity.ClassName}) $stringUtils.formatVariableName(${rel.name})) {
        setToOneTarget("${rel.Name}", $stringUtils.formatVariableName(${rel.name}), true);
    }
#end

    public #if(${rel.isMandatory()})@Nonnull#{else}@Nullable#{end} $importUtils.formatJavaType(${rel.TargetEntity.ClassName}) get${stringUtils.capitalized($rel.Name)}() {
        return ($importUtils.formatJavaType(${rel.TargetEntity.ClassName}))readProperty("${rel.Name}");
    }
#end


#end
##
##callback methods
#foreach($cbname in ${entityUtils.callbackNames})
    protected abstract void ${cbname}();

#end

	/**
	 * Gets data type for given key.
	 * @return Class - data type for given key
	 * @param key - Property String 
	 */
	public static Class<?> getDataTypeForKey(String key) {
	    Class<?> propClass = null;
	    //attributes
#foreach( $attr in ${object.DeclaredAttributes} )
	    if (${stringUtils.capitalizedAsConstant($attr.Name)}_PROPERTY.equals(key)) { propClass = ${importUtils.formatJavaType(${attr.Type})}.class; }
#end
		//relationships
#foreach( $rel in ${object.DeclaredRelationships} )
	    if (${stringUtils.capitalizedAsConstant($rel.Name)}_PROPERTY.equals(key)) { propClass = ${importUtils.formatJavaType(${rel.TargetEntity.ClassName})}.class; }
#end
		if (propClass == null) {
			propClass = CayenneDataObject.getDataTypeForKey(key);
		}
	    return propClass;
	}
	
		@Override
		public void addValueForKey(String aKey, Object aValue) {
			if ( aKey == null ) return;

			//check if the object is not to be added twice (if we don't do it now it will be done on commit, but that's too late)
			java.util.List<Object> list = (java.util.List<Object>) readProperty(aKey);
			if (list != null) {
				for (int i=0; i<list.size(); i++) {
					if (list.get(i).equals(aValue)) {
						return;
					}
				}
			}
#foreach( $rel in ${object.DeclaredRelationships} )
#if( $rel.ToMany )
#if ( ! $rel.ReadOnly )
			if (${stringUtils.capitalizedAsConstant($rel.Name)}_PROPERTY.equals(aKey)) { addTo${stringUtils.capitalized($rel.Name)}( (${importUtils.formatJavaType($rel.TargetEntity.ClassName)}) aValue); return; }
#end
#end
#end
			super.addValueForKey(aKey, aValue);
		}

		@Override
		public void removeValueForKey(String aKey, Object aValue) {
			if ( aKey == null ) return;

#foreach( $rel in ${object.DeclaredRelationships} )
#if( $rel.ToMany )
#if ( ! $rel.ReadOnly )
			if (${stringUtils.capitalizedAsConstant($rel.Name)}_PROPERTY.equals(aKey)) { removeFrom${stringUtils.capitalized($rel.Name)}( (${importUtils.formatJavaType($rel.TargetEntity.ClassName)}) aValue); return; }
#end
#end
#end
			super.removeValueForKey(aKey, aValue);
		}
		
}