/*
 * Copyright ish group pty ltd. All rights reserved. https://www.ish.com.au
 * No copying or use of this code is allowed without permission in writing from ish.
 */

apply plugin: 'org.apache.cayenne'


sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'
sourceSets.main.groovy.srcDirs += "${buildDir}/generated-resources/main/java"
ext {
    webservicesVersion = '103'
}

configurations {
    bundle
}

dependencies {
    implementation("ish.oncourse.willow:webservices-client:$webservicesVersion")
    testImplementation group: "ish.oncourse.angel", name: "test", version: "99-SNAPSHOT", changing: true
//    testImplementation "org.apache.cayenne:cayenne-dbsync:$cayenneVersion"
//    testImplementation 'org.mockito:mockito-core:2.18.3'
//    testImplementation "org.apache.derby:derbytools:$derbyVersion"
//    testImplementation 'commons-dbcp:commons-dbcp:1.4'
//    testImplementation 'xmlunit:xmlunit:1.6' //used for xml export validation tests
//    testImplementation 'org.kohsuke:wordnet-random-name:1.3'
//    testImplementation "io.bootique:bootique-test:$bootiqueVersion"
//    testImplementation "org.testng:testng:6.13.1"
//    testImplementation "org.apache.derby:derbyclient:$derbyVersion"
//    testImplementation "org.apache.derby:derbynet:$derbyVersion"
}

cgen {

    map = "${projectDir}/src/main/resources/cayenne/ReplicationMap.map.xml"
    makePairs = true
    template = "${projectDir}/src/main/resources/cayenne/dotemplates/subclass.vm"
    superTemplate = "${projectDir}/src/main/resources/cayenne/dotemplates/superclass.vm"
    mode = 'entity'
    superPkg = 'ish.oncourse.commercial.replication.cayenne.glue'
    destDir = file("${buildDir}/generated-resources/main/java")
    doLast {
        // remove subclass files which are already committed inside the app
        delete fileTree("${buildDir}/generated-resources/main/java/ish/oncourse/commercial/replication/cayenne") {
            exclude '**/glue/*'
        }
    }
}

compileJava {
    dependsOn cgen
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    from configurations.runtimeClasspath.findAll {it.name.matches("^(webservices-client).*\$")}.collect {it.isDirectory() ? it : zipTree(it)}, sourceSets.main.allSource
    with sourcesJar
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact fatJar
        }
    }
}