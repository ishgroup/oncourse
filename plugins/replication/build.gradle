/*
 * Copyright ish group pty ltd. All rights reserved. https://www.ish.com.au
 * No copying or use of this code is allowed without permission in writing from ish.
 */

apply plugin: 'org.apache.cayenne'

ext {
    webservicesVersion = '124'
    cayenneVersion = '4.1'
    derbyVersion = '10.14.2.0'
    bootiqueVersion = '1.0'
    groovyVersion ='2.5.13'
    oldVersion = 25
    versionToSet = 25
}


dependencies {
    implementation("ish.oncourse.willow:webservices-client:$webservicesVersion")
    testImplementation group: "ish.oncourse.angel", name: "test", version: "99-SNAPSHOT", classifier: 'tests', changing: true
    testImplementation "org.apache.cayenne:cayenne-dbsync:$cayenneVersion"
    testImplementation 'org.mockito:mockito-core:2.18.3'
    testImplementation "org.apache.derby:derbytools:$derbyVersion"
    testImplementation 'commons-dbcp:commons-dbcp:1.4'
    testImplementation 'xmlunit:xmlunit:1.6' //used for xml export validation tests
    testImplementation 'org.kohsuke:wordnet-random-name:1.3'
    testImplementation "io.bootique:bootique-test:$bootiqueVersion"
    testImplementation "org.testng:testng:6.13.1"

    testImplementation 'org.dbunit:dbunit:2.6.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.1' // needed for dbunit https://sourceforge.net/p/dbunit/feature-requests/222/
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation "org.codehaus.groovy:groovy-test:$groovyVersion"
    testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
    testImplementation "org.codehaus.groovy:groovy-testng:$groovyVersion"
    testImplementation "org.codehaus.groovy:groovy-sql:$groovyVersion"

}


cgen {
    map = "${projectDir}/src/main/resources/cayenne/ReplicationMap.map.xml"
    makePairs = true
    template = "${projectDir}/src/main/resources/cayenne/dotemplates/subclass.vm"
    superTemplate = "${projectDir}/src/main/resources/cayenne/dotemplates/superclass.vm"
    mode = 'entity'
    superPkg = 'ish.oncourse.commercial.replication.cayenne.glue'
    destDir = file("${buildDir}/generated-resources/main/java")
    doLast {
        // remove subclass files which are already committed inside the app
        delete fileTree("${buildDir}/generated-resources/main/java/ish/oncourse/commercial/replication/cayenne") {
            exclude '**/glue/*'
        }
    }
}

compileJava {
    dependsOn cgen
}

task switchReplicationVersion(type: Copy) {
    onlyIf {oldVersion != versionToSet}
    ant.replaceregexp(match:"${oldVersion}", replace:"${versionToSet}", flags:'g') {
        fileset(dir: 'src')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}
sourceSets.main.groovy.srcDirs += "${buildDir}/generated-resources/main/java"

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    from configurations.runtimeClasspath.findAll {it.name.matches("^(webservices-client).*\$")}.collect {it.isDirectory() ? it : zipTree(it)}, sourceSets.main.allSource
    with jar
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact fatJar
        }
    }
}
