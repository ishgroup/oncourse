/*
 * Copyright ish group pty ltd. All rights reserved. https://www.ish.com.au
 * No copying or use of this code is allowed without permission in writing from ish.
 */

apply plugin: 'org.apache.cayenne'


sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'
sourceSets.main.groovy.srcDirs += "${buildDir}/generated-resources/main/java"
ext {
    webservicesVersion = '103'
}

configurations {
    bundle
}

dependencies {
    implementation("ish.oncourse.willow:webservices-client:$webservicesVersion") 
}

cgen {

    map = "${projectDir}/src/main/resources/cayenne/ReplicationMap.map.xml"
    makePairs = true
    template = "${projectDir}/src/main/resources/cayenne/dotemplates/subclass.vm"
    superTemplate = "${projectDir}/src/main/resources/cayenne/dotemplates/superclass.vm"
    mode = 'entity'
    superPkg = 'ish.oncourse.commercial.replication.cayenne.glue'
    destDir = file("${buildDir}/generated-resources/main/java")
    doLast {
        // remove subclass files which are already committed inside the app
        delete fileTree("${buildDir}/generated-resources/main/java/ish/oncourse/commercial/replication/cayenne") {
            exclude '**/glue/*'
        }
    }
}

compileJava {
    dependsOn cgen
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    from {
        configurations.runtimeClasspath.findAll {
            it.name.matches("^(webservices-client).*\$")
        }.collect {
            it.isDirectory() ? it : zipTree(it) 
        } 
    }
    with jar
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact fatJar
        }
    }
}