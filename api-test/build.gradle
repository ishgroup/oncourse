import test.PrepareTestDatabase
import test.LocalStack

/*
 * Copyright ish group pty ltd 2020.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License version 3 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 */

ext {
    karateVersion = '1.4.1'
}

dependencies {
    implementation 'org.dbunit:dbunit:2.6.0'
    implementation "org.mariadb.jdbc:mariadb-java-client:$mariadbVersion"

    testImplementation "com.sun.activation:javax.activation:$javaxActivationVersion"
    testImplementation "com.intuit.karate:karate-junit5:$karateVersion"
    testImplementation "com.intuit.karate:karate-core:$karateVersion"
    testImplementation 'org.glassfish.jersey.connectors:jersey-jetty-connector:2.26'
    testImplementation 'org.glassfish.jersey.media:jersey-media-multipart:2.26'
    testImplementation 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    testImplementation "org.eclipse.jetty.http2:http2-http-client-transport:$jettyVersion"
    testImplementation "org.eclipse.jetty:jetty-client:$jettyVersion"
}

sourceCompatibility = 11
targetCompatibility = 11

tasks.register('startLocalstack', LocalStack.Start) {
    bucketName = 'test-bucket'
    propertiesFilePath = "${buildDir}/localstack.properties"
    doFirst {
        System.setProperty('testcontainers.ryuk.disabled', 'true')
    }
}

tasks.register('stopLocalstack', LocalStack.Stop)

tasks.register('copyConfig', Copy) {
    from("$rootDir/api-test/src/test/resources/") {
        include 'onCourse.yml'
        include 'logSetup.xml'
    }
    into "$rootDir/server/build"

    doFirst {
        def props = new Properties()
        file("${buildDir}/localstack.properties").withInputStream { props.load(it) }

        def dbUrl = project.hasProperty('dbUrl')
                ? project.property('dbUrl')
                : 'jdbc:mariadb://localhost/angel_api_test'

        expand(
                dbUrl: dbUrl,
                document: [
                        accessKeyId    : props.getProperty('document.accessKeyId'),
                        accessSecretKey: props.getProperty('document.accessSecretKey'),
                        bucket         : props.getProperty('document.bucket'),
                        region         : props.getProperty('document.region'),
                        endpoint       : props.getProperty('document.endpoint')
                ]
        )
    }
}

tasks.register('prepareTestDatabase', PrepareTestDatabase) {
    databaseUrl = project.hasProperty('dbUrl') ? project.property('dbUrl') : 'jdbc:mariadb://localhost/angel_api_test'
    dataSetPath = "$rootDir/api-test/src/test/resources/test-dataset.xml"
}

tasks.named('copyConfig') {
    mustRunAfter('startLocalstack')
}

tasks.named('prepareTestDatabase') {
    mustRunAfter(':server:startDaemon')
    mustRunAfter('copyConfig')
}

test {
    finalizedBy(stopLocalstack)
    testLogging {
        events 'failed', 'standardOut'
    }

    dependsOn ':server:startDaemon'
    dependsOn copyConfig
    dependsOn startLocalstack
    dependsOn prepareTestDatabase

    // pull cucumber options into the cucumber jvm
    systemProperty 'cucumber.options', System.properties.getProperty('cucumber.options')
    // pull karate options into the jvm
    systemProperty 'karate.env', System.properties.getProperty('karate.env')
    // ensure tests are always run
    outputs.upToDateWhen { false }
}
