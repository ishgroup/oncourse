apply plugin: 'war'
apply plugin: 'compass'
apply plugin: 'js'

dependencies {
	providedCompile 'javax.servlet:servlet-api:2.5'

	compile project(':common:common-services')
	compile project(':common:common-model')
	compile project(':common:common-ui')

	compile 'commons-collections:commons-collections:3.2.1'
	compile 'commons-logging:commons-logging:1.1.1'
	compile 'org.apache.tapestry:tapestry-core:5.2.6'
	compile 'org.apache.tapestry:tapestry-json:5.2.6'
	compile 'org.apache.tapestry:tapestry-upload:5.2.6'
	compile 'opensymphony:oscache:2.4.1'
    compile 'io.milton:milton-api:2.6.0.1'
    compile 'io.milton:milton-server-ce:2.6.0.1'
    compile 'org.reflections:reflections:0.9.8'

	testCompile 'org.apache.tapestry:tapestry-test:5.2.6'

	// The odd next line is to work around gradle pulling in the wrong configuration
	// http://forums.gradle.org/gradle/topics/transitive_libraries_not_included_through_project_dependency
	testCompile project(path: ':common:common-test', configuration: 'testFixtures')
}

war {
	archiveName = 'cms.war'
	manifest {
		from sharedManifest
	}
    from 'build/resource-assemble'
    from ('src/main/static') {
        exclude 'js'
        exclude 'src'
    }
    into('/plugins') {
        from 'src/main/static/js/plugins'
    }
}

compass {
    cssDir = file("${buildDir}/resource-assemble/css/cms")
    sassDir = file('src/main/static/src')
    fontsDir = file('src/main/static/fonts')
    noLineComments = true
    relativeAssets = true
    debugInfo = false
    environment = 'production'
}

javascript.source {
    production {
        js {
            srcDir 'src/main/static/js'
            include "**/*.js"
        }
    }
}
combineJs {
    source = javascript.source.production.js.files
    dest = file("${buildDir}/resource-assemble/js/cms/cms.js")
}
minifyJs {
    source = combineJs
    dest = file("${buildDir}/resource-assemble/js/cms/cms-min.js")
}
gzipJs {
    source = minifyJs
    dest = file("${buildDir}/resource-assemble/js/cms/cms-min.js.gz")
}

task zipCss(dependsOn:compileSass) {
    String srcPath = "${buildDir}/resource-assemble/css/cms/cms.css"
    inputs.file srcPath
    outputs.file "${srcPath}.gz"
    println "*** ${srcPath}"
    doLast {
        ant.gzip(src: srcPath, destfile: "${srcPath}.gz")
    }

}

processResources.inputs.files zipCss
processResources.inputs.files gzipJs

clean.dependsOn cleanCompileSass
clean.dependsOn cleanMinifyJs
