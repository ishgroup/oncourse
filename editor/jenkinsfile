#!groovyâ€‹

pipeline {
    agent {
        //should use 'mac os' agent because 'com.moowork.node' doesn't support freebsd
        label 'osx'
    }

    parameters {
        string(defaultValue: '', description: 'Release version. Leave blank to not release.', name: 'version')
    }

    stages {
        stage('Build') {
            steps {
                sh "./gradlew editor:build -Dbuild_number=${env.BUILD_NUMBER} -PreleaseVersion=${params.version}"
            }
        }
        stage('Snapshot') {
            when {
                expression { params.version == '' }
            }
            steps {
                sh "./gradlew editor:publishExecutablesPublicationToSnapshotsRepository -Dbuild_number=${env.BUILD_NUMBER} -PreleaseVersion=SNAPSHOT"                    
            }
        }
        stage('Create release') {
            when {
                expression { params.version != '' }
            }
            steps {
                script {
                    currentBuild.displayName = "Release ${params.version}"
                }
                sh "./gradlew editor:publishExecutablesPublicationToExecutablesRepository -PreleaseVersion=${params.version}"
                sh "./gradlew createVersion -PreleaseVersion='${params.version} editor-client'"
            }
        }
    }

    post {
        failure {
            mail(
                to: "development@ish.com.au",
                subject: "${currentBuild.result}: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: "Check console output at ${env.BUILD_URL}",
            )
        }
        unstable {
            mail(
                to: "development@ish.com.au",
                subject: "${currentBuild.result}: Job ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: "Check console output at ${env.BUILD_URL}",
            )
        }
        success {
            archiveArtifacts artifacts: 'editor/build/distribution/*.zip'
        }
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr:'30'))
        timeout(time: 60, unit: 'MINUTES')
    }
}
