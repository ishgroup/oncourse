apply from: "$rootDir/gradle/tapestry.app.gradle"
apply from: "$rootDir/gradle/cxf-spring.gradle"
apply plugin: 'com.github.node-gradle.node'

ext {
    staticSrcPath = "${projectDir}/src/main/static"
    staticBuildPath = "${buildDir}/resource-assemble/static"
    cssCombined = "${staticBuildPath}/css/${project.name}.css"
}

//css combining
task sass(type: Exec) {
    inputs.dir "${staticSrcPath}/src"
    outputs.file cssCombined
    commandLine "sassc", "--style", "compressed", "${staticSrcPath}/src/${project.name}.scss", cssCombined
}

task gzipCss(dependsOn: sass) {
    inputs.file cssCombined
    outputs.file "${cssCombined}.gz"
    doLast {
        ant.gzip(src: cssCombined, destfile: "${cssCombined}.gz")
    }
}

task combineSvg(type: CombineSvg) {
    projectName = "${project.name}"
    imgDirectoryName = file("$staticSrcPath/img")
    outputDirectoryName = "$staticBuildPath"
}

task cleanCombineSvg(type: CleanCombineSvg) {
    imgDirectory = "$staticBuildPath"
}

/**
 * Task build and copy js and css bundles to this artifact folder
 */
task refreshIdeaArtifact {
    doFirst {
        ex.execute()
        cp.execute()
    }
    task ex(type: GradleBuild){
        tasks = ['gzipJs', 'gzipCss']
    }
    task cp(type: Copy) {
        from(staticBuildPath) {
            include '**/*.*'
        }
        from(staticSrcPath) {
            include '**/*.*'
        }
        into "out/resources/static"
    }
}

processResources.inputs.files gzipCss
processResources.inputs.files combineSvg

clean.dependsOn cleanCombineSvg

jar {
    from "${buildDir}/resource-assemble"
    from ('src/main') {
        include 'static/**/*'
        exclude 'static/js'
        exclude 'static/src'
    }
}

node {
    version = '14.16.0'
    yarnVersion = '1.22.4'
    download = System.properties['os.name'] != "FreeBSD" // FreeBSD has no binaries this plugin can install
}

yarn_install.args = ['--verbose']

task webpack(type: NodeTask, dependsOn: 'yarn_install') {
    script = file('node_modules/.bin/webpack')
    args = ['--progress', '--env', 'NODE_ENV=production', '--env', "BUILD_NUMBER=${version ?: '99-SNAPSHOT'}"]
}

processResources.dependsOn(webpack)

mainClassName = 'ish.oncourse.portal.PortalApp'

dependencies {
    implementation project(':common:common-bootique')

    compile 'org.mnode.ical4j:ical4j:1.0.2'
    compile 'com.ocpsoft:ocpsoft-pretty-time:1.0.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.5'
    compile (project(':common:common-textile')) {
        exclude group: 'axis', module: 'axis-wsdl4j'
    }

    compile (project(':common:tapestry-classes'))
    // The odd next line is to work around gradle pulling in the wrong configuration
    // http://forums.gradle.org/gradle/topics/transitive_libraries_not_included_through_project_dependency
    testCompile project(':common:test-functions')
    testCompile(project(path: ':common:common-test', configuration: 'testFixtures')) {
        exclude group: 'org.apache.tapestry'
    }
}

sourceSets {
    main {
        groovy {
            srcDirs += 'src/main/'
        }
        java {
            srcDirs = []
        }
    }
}

ext {
    staticBuildPath = "${rootDir}/resource-assemble/static"
}

task copyStatic(type: Copy) {
    from "build/resource-assemble/static"
    into "build/resources/main/static"
}

task start(dependsOn: copyStatic, type: JavaExec) {
    main = 'ish.oncourse.portal.PortalApp'
    classpath = sourceSets.main.runtimeClasspath
    args  = []
}
