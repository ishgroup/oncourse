def projectsWithStaticResources = ['admin', 'enrol', 'portal', 'web', 'cms']

allprojects.findAll { it.name in projectsWithStaticResources }.each { p ->
    configure(p) {
        //common tasks for combining java script and css
        apply plugin: 'war'
        apply plugin: 'com.eriwen.gradle.js'
        apply plugin: 'com.github.robfletcher.compass'


        javascript.source {
            production {
                js {
                    srcDir 'src/main/static/js'
                    include "**/*.js"
                }
            }
        }

        minifyJs {
            source = javascript.source.production.js.files
            dest = file("${buildDir}/resource-assemble/js/${project.name}-min.js")
        }

        gzipJs {
            source = minifyJs
            dest = file("${buildDir}/resource-assemble/js/${project.name}-min.js.gz")
        }

        //css combining
        compass {
            cssDir = file("${buildDir}/resource-assemble/css")
            sassDir = file('src/main/static/src')
            fontsDir = file('src/main/static/fonts')
            noLineComments = true
            relativeAssets = true
            debugInfo = false
            environment = 'production'
        }

        task gzipCss(dependsOn: compassCompile) {
            String srcPath = "${buildDir}/resource-assemble/css/${project.name}.css"
            inputs.file srcPath
            outputs.file "${srcPath}.gz"
            doLast {
                ant.gzip(src: srcPath, destfile: "${srcPath}.gz")
            }
        }

        task combineSvg(type: CombineSvg) {
            projectName = "${project.name}"
            imgDirectoryName = file("src/main/static/img")
            outputDirectoryName = "${buildDir}/resource-assemble"
        }

        task cleanCombineSvg(type: CleanCombineSvg) {
            imgDirectory = "${buildDir}/resource-assemble/img"
        }

        /**
         * Task build and copy js and css bundles to this artifact folder
         */
        task refreshIdeaArtifact {
            doFirst {
                ex.execute()
                cp.execute()
            }
            task ex(type: GradleBuild){
                tasks = ['cleanMinifyJs', 'gzipJs', 'gzipCss']
            }
            task cp(type: Copy) {
                from('build/resource-assemble') {
                    include '**/*.*'
                }
                into "build/libs/exploded/${project.name}.war"
            }
        }

        processResources.inputs.files gzipJs
        processResources.inputs.files gzipCss
        processResources.inputs.files combineSvg

        clean.dependsOn cleanMinifyJs
        clean.dependsOn cleanCompassCompile
        clean.dependsOn cleanCombineSvg
    }
}



